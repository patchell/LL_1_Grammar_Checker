//-------------------------------
// Grammar for the 6502 assmebler
//
// An assembly line of code generaslly
// consists of 3 parts:
// 1. Lable
// 2. Operator
// 3. Operand
//-------------------------------

TERMINALS
	// Opecodes
"ADC" = 256,
"AND",
"ASL",
"BCC",
"BCS",
"BEQ",
"BMI",
"BNE",
"BPL",
"BVC",
"BVS",
"BIT",
"BRK",
"CLC",
"CLD",
"CLI",
"CLV",
"CMP",
"CPX",
"CPY",
"DEC",
"DEX",
"DEY",
"EOR",
"INC",
"INX",
"INY",
"JMP",
"JSR",
"LDA",
"LDX",
"LDY",
"LSR",
"NOP",
"ORA",
"PHA",
"PLA",
"PHP",
"PLP",
"ROL",
"ROR",
"RTI",
"RTS",
"SBC",
"STA",
"SEC",
"SED",
"SEI",
"STX",
"STY",
"TAX",
"TAY",
"TXA",
"TYA",
"TXS",
"TSX",

"IDENT",
"LOCAL_LABLE",
"GLOBAL_LABLE",
"STRING",
"CHAR_CONSTANT",
"NUMBER",
"AREG",
"XREG",
"YREG",
"ORG",
"DB",
"DW",
"DL",
"DS",
"SECTION",
"SECTION_NAME",
"SIZE",
"START",
"READ_WRITE",
"MODE",
"READ_ONLY",
"R6502",
"PROCESSOR",
"WD65C02",
"WD65C816",
"PROC",
"EPROC",
"EOL"


GRAMMAR

As65	-> CodeLines;

CodeLines		-> CodeLine CodeLines_1;
CodeLines_1		-> ';' CodeLine CodeLines_1
				-> .
				;

CodeLine		-> OptLable AsmStatement;


AsmStatement	-> DefineStorage DefineMemory_1;
DefineMemory_1	-> DB AsmConstList DefineStorage DefineMemory_1 
				-> DW AsmConstList DefineStorage DefineMemory_1
				-> DL AsmConstList DefineStorage DefineMemory_1
				-> .
				;

DefineStorage	-> Proceedure DefineStorage_1;
DefineStorage_1	-> DS AsmConstant Proceedure DefineStorage_1
				-> .
				;

Proceedure		-> Section Proceedure_1;
Proceedure_1	-> PROC CodeLines EPROC Section Proceedure_1
				-> .
				;

Section			-> Org Section_1;
Section_1		-> SECTION Section_2 Org Section_1
				-> .
				;
Section_2		-> SECTION_NAME
				-> IDENT '[' SectionAttributes ']'
				-> .
				;


SectionAttributes	-> SectionAtribute SectionAttributes_1;
SectionAttributes_1	-> ',' SectionAtribute SectionAttributes_1
					-> .
					;

SectionAtribute	-> START '=' AsmConstant
				-> SIZE '=' AsmConstant
				-> MODE '=' Modes
				-> .
				;

Modes			-> READ_ONLY
				-> READ_WRITE
				;

Org				-> Processor  Org_1;
Org_1			-> ORG NUMBER Processor Org_1
				-> .
				;

Processor		-> Instruction Processor_1;
Processor_1		-> PROCESSOR ProcessorType Instruction Processor_1
				-> .
				;
ProcessorType-> R6502
			-> WD65C02
			-> WD65C816
			;

Instruction	-> ADC  AluAdrModes			//ALU Opcodes
			-> AND  AluAdrModes	
			-> EOR  AluAdrModes	
			-> ORA  AluAdrModes	
			-> CMP  AluAdrModes	
			-> SBC  AluAdrModes	
			-> LDA  AluAdrModes	
			-> STA  StaAddressingModes	
			-> ASL ShiftAddressingModes			//shift addressing modes
			-> ROL ShiftAddressingModes	
			-> LSR ShiftAddressingModes 
			-> ROR ShiftAddressingModes	 
			-> BCC RelAddressingMode				// Branch Op Codes
			-> BCS RelAddressingMode	 
			-> BEQ RelAddressingMode	 
			-> BMI RelAddressingMode 	
			-> BNE RelAddressingMode 	
			-> BPL RelAddressingMode 	
			-> BVC RelAddressingMode	
			-> BVS RelAddressingMode 	
			-> BIT BitAddressModes			//BIT opcode
			-> BRK				//Implied Addressing Mode 
			-> CLC	 
			-> CLD	
			-> CLI	
			-> CLV	
			-> DEX	
			-> DEY	
			-> INX	
			-> INY	
			-> NOP	
			-> PHA	
			-> PLA	
			-> PHP	
			-> PLP	
			-> RTI	
			-> RTS	
			-> SEC	
			-> SED	
			-> SEI	
			-> TAX	
			-> TAY	
			-> TXA	
			-> TYA	
			-> TXS	
			-> TSX	
			-> INC IncAddressingMOdes			//Inc/Dec Addressing Modes
			-> DEC IncAddressingMOdes	
			-> JMP JumpAddressingModes		// Jump
			-> JSR CallAddressingMode			// Jump To Subroutine
			-> CPX  CPX_CPY_AddressingMode	
			-> CPY  CPX_CPY_AddressingMode	
			-> LDX LdxAddressingMode	
			-> LDY LdyAddressingMode	
			-> STX StxAddressingMode	
			-> STY StyAddressingMode	
			-> .
			;

OptLable	-> IDENT LocalGlobal
			-> LOCAL_LABLE ':'
			-> GLOBAL_LABLE
			-> .
			;

LocalGlobal	-> ':'		//Local
			-> .		//Global
			;

//-----------------------------------
//ALU Addressing Mode
//-----------------------------------

AluAdrModes		-> '#' AsmConstant
				-> '(' Indirect
				-> AsmConstant OptIndexReg
				;
Indirect	-> AsmConstant  Indirect_1;
Indirect_1	-> ')' ',' YREG
			-> ',' XREG ')'
			;

//---------------------------------------------
// STA addressing mode
//---------------------------------------------
StaAddressingModes	-> AsmConstant OptIndexReg
					-> '(' Indirect
					;

//-----------------------------------------
// ASL LSR ROR and ROL addressing modes
//-----------------------------------------

ShiftAddressingModes	-> AREG
						-> AsmConstant OptXReg
						;

//------------------------------------------
// Branch Instructions Addressing Mode
//------------------------------------------
RelAddressingMode	-> AsmConstant;

//------------------------------------------
// BIT Instructions Addressing Mode
//------------------------------------------

BitAddressModes	-> AsmConstant;

//------------------------------------------
// INC DEC Instructions Addressing Mode
//------------------------------------------

IncAddressingMOdes	-> AsmConstant OptXReg;

//------------------------------------------
// JMP Instructions Addressing Mode
//------------------------------------------

JumpAddressingModes	-> AsmConstant
					-> '(' AsmConstant ')'
					;

//------------------------------------------
// JSR Instructions Addressing Mode
//------------------------------------------

CallAddressingMode	-> AsmConstant;

//------------------------------------------
// LDX Instructions Addressing Mode
//------------------------------------------

LdxAddressingMode	-> AsmConstant OptYReg
					-> '#' AsmConstant
					;
//------------------------------------------
// CPX & CPY Instructions Addressing Mode
//------------------------------------------

CPX_CPY_AddressingMode	-> AsmConstant
					-> '#' AsmConstant
					;

//------------------------------------------
// STX Instructions Addressing Mode
//------------------------------------------

StxAddressingMode	-> AsmConstant OptYReg;

//------------------------------------------
// LDY Instructions Addressing Mode
//------------------------------------------

LdyAddressingMode	-> AsmConstant OptXReg
					-> '#' AsmConstant
					;

//------------------------------------------
// STY Instructions Addressing Mode
//------------------------------------------

StyAddressingMode	-> AsmConstant OptXReg;

OptIndexReg		-> ',' OptIndexReg_1
				-> .
				;
OptIndexReg_1	-> XREG
				-> YREG
				;

OptXReg			-> ',' XREG
				-> .
				;

OptYReg			-> ',' YREG
				-> .
				;

AsmConstList	-> STRING
				-> AsmConstant AsmConstList_1
				;
AsmConstList_1	-> ',' AsmConstant AsmConstList_1
				-> .
				;

AsmConstant		-> '>' AsmConstant_1	//Lower Part
				-> '<' AsmConstant_1	//Upper Part
				-> AsmConstant_1
				;

AsmConstant_1	-> BaseAsmConstant AsmConstant_2;
AsmConstant_2	-> '+' BaseAsmConstant AsmConstant_2
				-> '-' BaseAsmConstant AsmConstant_2
				-> .
				;
BaseAsmConstant	-> LOCAL_LABLE
				-> GLOBAL_LABLE
				-> IDENT
				-> NUMBER
				-> CHAR_CONSTANT
				-> '*'				//current location counter
				-> .
				;

