???????? $ Nullable Set(0)
*************  Print Out Grammar Structure************
Action65
 -> Modules
Modules
 -> PROCroutine Modules_1
Modules_1
 -> MODULE PROCroutine Modules_1
 -> e
PROCroutine
 -> SysDecl PROCroutine_1
PROCroutine_1
 -> PROC ProcDef PROCroutine_1
 -> e
ProcDef
 -> ProcDecl ProcBody
FuncDef
 -> FuncDecl ProcBody
ProcDecl
 -> IDENT OptInit ( ParamList )
FuncDecl
 -> IDENT OptInit ( ParamList )
ProcBody
 -> BEGIN ProcBody_1 END
ProcBody_1
 -> LocalDecls Statements
Statements
 -> ProcCall Begin
Begin
 -> BEGIN Statements END ProcCall Begin
 -> e
ProcCall
 -> ForStmt ProcCall_1
ProcCall_1
 -> PROC_IDENT PROCstmt ; ForStmt ProcCall_1
 -> FUNC_IDENT PROCstmt ; ForStmt ProcCall_1
 -> e
PROCstmt
 -> ( MemCntentsList )
ForStmt
 -> IfStmt ForStmt_1
ForStmt_1
 -> FOR FORstmt OD IfStmt ForStmt_1
 -> e
FORstmt
 -> IDENT = Start TO Finish STEPoption DO Statements
Start
 -> ArithExpr
Finish
 -> ArithExpr
STEPoption
 -> STEP ArithExpr
 -> e
IfStmt
 -> WhileStmt IfStmt_1
IfStmt_1
 -> IF If FI WhileStmt IfStmt_1
 -> e
If
 -> ArithExpr ThenPart
ThenPart
 -> THEN ThenPart_1
ThenPart_1
 -> Statements ElseIfPart
ElseIfPart
 -> ELSEIF ArithExpr ThenPart
 -> ELSE Statements
 -> e
WhileStmt
 -> DoStmt WhileStmt_1
WhileStmt_1
 -> WHILE ArithExpr DO Statements OD DoStmt WhileStmt_1
 -> e
DoStmt
 -> EXITstmt DoStmt_1
DoStmt_1
 -> DO Statements OD EXITstmt DoStmt_1
 -> e
EXITstmt
 -> RetStmt EXITstmt_1
EXITstmt_1
 -> EXIT ; RetStmt EXITstmt_1
 -> e
RetStmt
 -> CodeBlock RetStmt_1
RetStmt_1
 -> RETURN RetStmt_2 ; CodeBlock RetStmt_1
 -> e
RetStmt_2
 -> ( ArithExpr )
 -> e
CodeBlock
 -> UntillStmt CodeBlock_1
CodeBlock_1
 -> [ ConstList ] UntillStmt CodeBlock_1
 -> e
ConstList
 -> CompConst ConstList_1
ConstList_1
 -> , CompConst ConstList_1
 -> e
UntillStmt
 -> Assignment UntillStmt_1
UntillStmt_1
 -> UNTILL ArithExpr ; Assignment UntillStmt_1
 -> e
Assignment
 -> MemContents ASSIGNstmt
ASSIGNstmt
 -> = ArithExpr ; MemContents
 -> ==+ ArithExpr ; MemContents
 -> ==- ArithExpr ; MemContents
 -> ==* ArithExpr ; MemContents
 -> ==/ ArithExpr ; MemContents
 -> ==MOD ArithExpr ; MemContents
 -> ==& ArithExpr ; MemContents
 -> ==! ArithExpr ; MemContents
 -> ==% ArithExpr ; MemContents
 -> ==LSH ArithExpr ; MemContents
 -> ==RSH ArithExpr ; MemContents
 -> e
ArithExpr
 -> LogicalAND LogicalOR_1
LogicalOR_1
 -> OR LogicalAND LogicalOR_1
 -> e
LogicalAND
 -> RelOperation LogicalAND_1
LogicalAND_1
 -> AND RelOperation LogicalAND_1
 -> e
RelOperation
 -> RelEquals RelOperation_1
RelOperation_1
 -> > RelEquals RelOperation_1
 -> < RelEquals RelOperation_1
 -> GTEQ RelEquals RelOperation_1
 -> LTEQ RelEquals RelOperation_1
 -> e
RelEquals
 -> BitwiseOR RelEquals_1
RelEquals_1
 -> = BitwiseOR RelEquals_1
 -> # BitwiseOR RelEquals_1
 -> e
BitwiseOR
 -> BitwiseAND BitwiseOR_1
BitwiseOR_1
 -> % BitwiseAND BitwiseOR_1
 -> e
BitwiseAND
 -> BitwiseXOR BitwiseAND_1
BitwiseAND_1
 -> & BitwiseXOR BitwiseAND_1
 -> e
BitwiseXOR
 -> AddExpr BitwiseXOR_1
BitwiseXOR_1
 -> ! AddExpr BitwiseXOR_1
 -> e
AddExpr
 -> ShifExpr AddExpr_1
AddExpr_1
 -> + ShifExpr AddExpr_1
 -> - ShifExpr AddExpr_1
 -> e
ShifExpr
 -> MultExpr ShiftExpr_1
ShiftExpr_1
 -> LSH MultExpr ShiftExpr_1
 -> RSH MultExpr ShiftExpr_1
 -> e
MultExpr
 -> Unary MultExpr_1
MultExpr_1
 -> * Unary MultExpr_1
 -> / Unary MultExpr_1
 -> MOD Unary MultExpr_1
 -> e
Unary
 -> - Unary
 -> Factor
Factor
 -> FUNC_IDENT ( MemCntentsList )
 -> ( ArithExpr )
 -> NUMBER
 -> *
 -> @ MemContents
 -> IDENT MemContentsType
MemCntentsList
 -> MemContents MemCntentsList_1
MemCntentsList_1
 -> , MemContents MemCntentsList_1
 -> e
SysDecl
 -> TypeDecl Define
Define
 -> DEFINE DefList TypeDecl Define
 -> e
DefList
 -> Def DefList_1
DefList_1
 -> , Def DefList_1
 -> e
Def
 -> IDENT = CompConst
TypeDecl
 -> RecDecl TypeDecl_1
TypeDecl_1
 -> TYPE RecIdent RecDecl TypeDecl_1
 -> e
RecIdent
 -> IDENT RecField
RecField
 -> = [ VarDecls ]
VarDecls
 -> CHAR Modifier VarList ; VarDecls
 -> BYTE Modifier VarList ; VarDecls
 -> INT Modifier VarList ; VarDecls
 -> CARD Modifier VarList ; VarDecls
 -> BOOL Modifier VarList ; VarDecls
 -> e
VarList
 -> Ident VarList_1
VarList_1
 -> , Ident VarList_1
 -> e
Modifier
 -> POINTER
 -> ARRAY ArrayStuff
 -> e
ArrayStuff
 -> ( ArithExpr ) OptArrayInit
 -> e
OptArrayInit
 -> = [ ConstList ]
 -> e
RecDecl
 -> FundDecl RecDecl_1
RecDecl_1
 -> RECORDTYPE Modifier DataDecl RecDecl_1
 -> e
FundDecl
 -> BOOL Modifier FUNCDecl FundDecl
 -> CHAR Modifier FUNCDecl FundDecl
 -> BYTE Modifier FUNCDecl FundDecl
 -> INT Modifier FUNCDecl FundDecl
 -> CARD Modifier FUNCDecl FundDecl
 -> e
FUNCDecl
 -> DataDecl FUNCDecl_1
FUNCDecl_1
 -> FUNC FuncDef DataDecl FUNCDecl_1
 -> e
DataDecl
 -> IdentList DataCecl_1
DataCecl_1
 -> ; IdentList DataCecl_1
 -> e
IdentList
 -> Ident IdentList_1
IdentList_1
 -> , Ident IdentList_1
 -> e
Ident
 -> IDENT OptInit
 -> e
OptInit
 -> = CompConst
 -> e
ParamList
 -> Param ParamList_1
ParamList_1
 -> , Param ParamList_1
 -> e
Param
 -> RECORDTYPE POINTER Ident
 -> CHAR Modifier Ident
 -> BYTE Modifier Ident
 -> INT Modifier Ident
 -> CARD Modifier Ident
 -> BOOL Modifier Ident
 -> e
LocalDecls
 -> CHAR Modifier VarList ; LocalDecls
 -> BYTE Modifier VarList ; LocalDecls
 -> INT Modifier VarList ; LocalDecls
 -> CARD Modifier VarList ; LocalDecls
 -> BOOL Modifier VarList ; LocalDecls
 -> e
CompConst
 -> BaseCompConst CompConst_1
CompConst_1
 -> + BaseCompConst CompConst_1
 -> - BaseCompConst CompConst_1
 -> e
BaseCompConst
 -> NUMBER
 -> *
 -> @ MemContents
 -> e
MemContents
 -> IDENT MemContentsType
MemContentsType
 -> ( ArithExpr )
 -> ^
 -> . MemContents
 -> e
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','.','^','!','&','%','#','>','<','=','==+','==-','==*','==/','==MOD','==&','==!'
,'==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH','RSH','('
,')','e','$' }
NONTERMINALS['Non Terminals'] { 'Action65','Modules','Modules_1','PROCroutine','PROCroutine_1'
,'ProcDef','FuncDef','ProcDecl','FuncDecl','ProcBody','ProcBody_1','Statements','Begin'
,'ProcCall','ProcCall_1','PROCstmt','ForStmt','ForStmt_1','FORstmt','Start','Finish'
,'STEPoption','IfStmt','IfStmt_1','If','ThenPart','ThenPart_1','ElseIfPart','WhileStmt'
,'WhileStmt_1','DoStmt','DoStmt_1','EXITstmt','EXITstmt_1','RetStmt','RetStmt_1','RetStmt_2'
,'CodeBlock','CodeBlock_1','ConstList','ConstList_1','UntillStmt','UntillStmt_1','Assignment'
,'ASSIGNstmt','ArithExpr','LogicalOR_1','LogicalAND','LogicalAND_1','RelOperation'
,'RelOperation_1','RelEquals','RelEquals_1','BitwiseOR','BitwiseOR_1','BitwiseAND'
,'BitwiseAND_1','BitwiseXOR','BitwiseXOR_1','AddExpr','AddExpr_1','ShifExpr','ShiftExpr_1'
,'MultExpr','MultExpr_1','Unary','Factor','MemCntentsList','MemCntentsList_1','SysDecl'
,'Define','DefList','DefList_1','Def','TypeDecl','TypeDecl_1','RecIdent','RecField'
,'VarDecls','VarList','VarList_1','Modifier','ArrayStuff','OptArrayInit','RecDecl'
,'RecDecl_1','FundDecl','FUNCDecl','FUNCDecl_1','DataDecl','DataCecl_1','IdentList'
,'IdentList_1','Ident','OptInit','ParamList','ParamList_1','Param','LocalDecls','CompConst'
,'CompConst_1','BaseCompConst','MemContents','MemContentsType' }
*********** Build Nullable Set **********
****************Create NOT nullable set ************************
----- Calc First Sets------
FIRST['Action65'] { }
FIRST['Modules'] { }
FIRST['Modules_1'] { 'e' }
FIRST['PROCroutine'] { }
FIRST['PROCroutine_1'] { 'e' }
FIRST['ProcDef'] { }
FIRST['FuncDef'] { }
FIRST['ProcDecl'] { }
FIRST['FuncDecl'] { }
FIRST['ProcBody'] { }
FIRST['ProcBody_1'] { }
FIRST['Statements'] { }
FIRST['Begin'] { 'e' }
FIRST['ProcCall'] { }
FIRST['ProcCall_1'] { 'e' }
FIRST['PROCstmt'] { }
FIRST['ForStmt'] { }
FIRST['ForStmt_1'] { 'e' }
FIRST['FORstmt'] { }
FIRST['Start'] { }
FIRST['Finish'] { }
FIRST['STEPoption'] { 'e' }
FIRST['IfStmt'] { }
FIRST['IfStmt_1'] { 'e' }
FIRST['If'] { }
FIRST['ThenPart'] { }
FIRST['ThenPart_1'] { }
FIRST['ElseIfPart'] { 'e' }
FIRST['WhileStmt'] { }
FIRST['WhileStmt_1'] { 'e' }
FIRST['DoStmt'] { }
FIRST['DoStmt_1'] { 'e' }
FIRST['EXITstmt'] { }
FIRST['EXITstmt_1'] { 'e' }
FIRST['RetStmt'] { }
FIRST['RetStmt_1'] { 'e' }
FIRST['RetStmt_2'] { 'e' }
FIRST['CodeBlock'] { }
FIRST['CodeBlock_1'] { 'e' }
FIRST['ConstList'] { }
FIRST['ConstList_1'] { 'e' }
FIRST['UntillStmt'] { }
FIRST['UntillStmt_1'] { 'e' }
FIRST['Assignment'] { }
FIRST['ASSIGNstmt'] { 'e' }
FIRST['ArithExpr'] { }
FIRST['LogicalOR_1'] { 'e' }
FIRST['LogicalAND'] { }
FIRST['LogicalAND_1'] { 'e' }
FIRST['RelOperation'] { }
FIRST['RelOperation_1'] { 'e' }
FIRST['RelEquals'] { }
FIRST['RelEquals_1'] { 'e' }
FIRST['BitwiseOR'] { }
FIRST['BitwiseOR_1'] { 'e' }
FIRST['BitwiseAND'] { }
FIRST['BitwiseAND_1'] { 'e' }
FIRST['BitwiseXOR'] { }
FIRST['BitwiseXOR_1'] { 'e' }
FIRST['AddExpr'] { }
FIRST['AddExpr_1'] { 'e' }
FIRST['ShifExpr'] { }
FIRST['ShiftExpr_1'] { 'e' }
FIRST['MultExpr'] { }
FIRST['MultExpr_1'] { 'e' }
FIRST['Unary'] { }
FIRST['Factor'] { }
FIRST['MemCntentsList'] { }
FIRST['MemCntentsList_1'] { 'e' }
FIRST['SysDecl'] { }
FIRST['Define'] { 'e' }
FIRST['DefList'] { }
FIRST['DefList_1'] { 'e' }
FIRST['Def'] { }
FIRST['TypeDecl'] { }
FIRST['TypeDecl_1'] { 'e' }
FIRST['RecIdent'] { }
FIRST['RecField'] { }
FIRST['VarDecls'] { 'e' }
FIRST['VarList'] { 'e' }
FIRST['VarList_1'] { 'e' }
FIRST['Modifier'] { 'e' }
FIRST['ArrayStuff'] { 'e' }
FIRST['OptArrayInit'] { 'e' }
FIRST['RecDecl'] { 'e' }
FIRST['RecDecl_1'] { 'e' }
FIRST['FundDecl'] { 'e' }
FIRST['FUNCDecl'] { }
FIRST['FUNCDecl_1'] { 'e' }
FIRST['DataDecl'] { }
FIRST['DataCecl_1'] { 'e' }
FIRST['IdentList'] { 'e' }
FIRST['IdentList_1'] { 'e' }
FIRST['Ident'] { 'e' }
FIRST['OptInit'] { 'e' }
FIRST['ParamList'] { 'e' }
FIRST['ParamList_1'] { 'e' }
FIRST['Param'] { 'e' }
FIRST['LocalDecls'] { 'e' }
FIRST['CompConst'] { 'e' }
FIRST['CompConst_1'] { 'e' }
FIRST['BaseCompConst'] { 'e' }
FIRST['MemContents'] { }
FIRST['MemContentsType'] { 'e' }
----- Calc Follow Sets------
------------ Follow Sets ---------------
FOLLOW['Action65'] { '$' }
FOLLOW['Modules'] { '$' }
FOLLOW['Modules_1'] { '$' }
FOLLOW['PROCroutine'] { '$' }
FOLLOW['PROCroutine_1'] { '$' }
FOLLOW['ProcDef'] { '$' }
FOLLOW['FuncDef'] { }
FOLLOW['ProcDecl'] { }
FOLLOW['FuncDecl'] { }
FOLLOW['ProcBody'] { '$' }
FOLLOW['ProcBody_1'] { }
FOLLOW['Statements'] { }
FOLLOW['Begin'] { }
FOLLOW['ProcCall'] { }
FOLLOW['ProcCall_1'] { }
FOLLOW['PROCstmt'] { }
FOLLOW['ForStmt'] { }
FOLLOW['ForStmt_1'] { }
FOLLOW['FORstmt'] { }
FOLLOW['Start'] { }
FOLLOW['Finish'] { }
FOLLOW['STEPoption'] { }
FOLLOW['IfStmt'] { }
FOLLOW['IfStmt_1'] { }
FOLLOW['If'] { }
FOLLOW['ThenPart'] { }
FOLLOW['ThenPart_1'] { }
FOLLOW['ElseIfPart'] { }
FOLLOW['WhileStmt'] { }
FOLLOW['WhileStmt_1'] { }
FOLLOW['DoStmt'] { }
FOLLOW['DoStmt_1'] { }
FOLLOW['EXITstmt'] { }
FOLLOW['EXITstmt_1'] { }
FOLLOW['RetStmt'] { }
FOLLOW['RetStmt_1'] { }
FOLLOW['RetStmt_2'] { }
FOLLOW['CodeBlock'] { }
FOLLOW['CodeBlock_1'] { }
FOLLOW['ConstList'] { }
FOLLOW['ConstList_1'] { }
FOLLOW['UntillStmt'] { }
FOLLOW['UntillStmt_1'] { }
FOLLOW['Assignment'] { }
FOLLOW['ASSIGNstmt'] { }
FOLLOW['ArithExpr'] { }
FOLLOW['LogicalOR_1'] { }
FOLLOW['LogicalAND'] { }
FOLLOW['LogicalAND_1'] { }
FOLLOW['RelOperation'] { }
FOLLOW['RelOperation_1'] { }
FOLLOW['RelEquals'] { }
FOLLOW['RelEquals_1'] { }
FOLLOW['BitwiseOR'] { }
FOLLOW['BitwiseOR_1'] { }
FOLLOW['BitwiseAND'] { }
FOLLOW['BitwiseAND_1'] { }
FOLLOW['BitwiseXOR'] { }
FOLLOW['BitwiseXOR_1'] { }
FOLLOW['AddExpr'] { }
FOLLOW['AddExpr_1'] { }
FOLLOW['ShifExpr'] { }
FOLLOW['ShiftExpr_1'] { }
FOLLOW['MultExpr'] { }
FOLLOW['MultExpr_1'] { }
FOLLOW['Unary'] { }
FOLLOW['Factor'] { }
FOLLOW['MemCntentsList'] { }
FOLLOW['MemCntentsList_1'] { }
FOLLOW['SysDecl'] { '$' }
FOLLOW['Define'] { '$' }
FOLLOW['DefList'] { }
FOLLOW['DefList_1'] { }
FOLLOW['Def'] { }
FOLLOW['TypeDecl'] { '$' }
FOLLOW['TypeDecl_1'] { '$' }
FOLLOW['RecIdent'] { }
FOLLOW['RecField'] { }
FOLLOW['VarDecls'] { }
FOLLOW['VarList'] { }
FOLLOW['VarList_1'] { }
FOLLOW['Modifier'] { }
FOLLOW['ArrayStuff'] { }
FOLLOW['OptArrayInit'] { }
FOLLOW['RecDecl'] { '$' }
FOLLOW['RecDecl_1'] { '$' }
FOLLOW['FundDecl'] { '$' }
FOLLOW['FUNCDecl'] { '$' }
FOLLOW['FUNCDecl_1'] { '$' }
FOLLOW['DataDecl'] { '$' }
FOLLOW['DataCecl_1'] { '$' }
FOLLOW['IdentList'] { '$' }
FOLLOW['IdentList_1'] { '$' }
FOLLOW['Ident'] { '$' }
FOLLOW['OptInit'] { }
FOLLOW['ParamList'] { }
FOLLOW['ParamList_1'] { }
FOLLOW['Param'] { }
FOLLOW['LocalDecls'] { }
FOLLOW['CompConst'] { }
FOLLOW['CompConst_1'] { }
FOLLOW['BaseCompConst'] { }
FOLLOW['MemContents'] { }
FOLLOW['MemContentsType'] { }
---------------- Create Parse Table --------------
Table Entries = 66
------------ Check For Conflicts-------------
