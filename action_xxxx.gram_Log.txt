???????? $ Nullable Set(0)
Action65:  Token:NONTERMINAL Value:265 NULLABLE(0) START(1)
     FIRST['Action65'] { }
     FOLLOW['Action65'] { '$' }
*************  Print Out Grammar Structure************
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
********** Non Terminals Set **********
NONTERMINALS['Non Terminals'] { 'Action65','Modules','Modules_1','Module','Routines'
,'Routines_1','Routine','ProcBody','ProcBody_1','ProcDecl','FuncDecl','FuncIdent'
,'ProcIdent','Statements','SemiTermStmts','ODTermStmts','FITermStmts','IfStmt','ThenPart'
,'ThenPart_1','ElseIfPart','DoPart','Start','Finish','Step','StepPart','Next','ToPart'
,'FORLoop','ArithExpr','LogicalOR_1','LogicalAND','LogicalAND_1','RelOperation','RelOperation_1'
,'RelEquals','RelEquals_1','BitwiseOR','BitwiseOR_1','BitwiseAND','BitwiseAND_1','BitwiseXOR'
,'SimpleRelExpr_1','AddExpr','AddExpr_1','ShifExpr','ShiftExpr_1','MultExpr','MultExpr_1'
,'Unary','Factor','FUNCcall','IdentList','IdentList_1','FundType','OptModifier','ParamList'
,'ParamList_1','Param','VarDecls','SysDecls','SysDecls_1','SysDecl','VarList','VarList_1'
,'VarName','OptInit','DefList','DefList_1','Def','RecIdent','RecField','RecFieldList'
,'RecFieldList_1','Modifier','ArrayStuff','OptArrayInit','CompConstList','CompConstList_1'
,'CompConst','CompConst_1','BaseCompConst','Ident','MemContents','MemContentsType'
 }
*********** Build Nullable Set **********
****************Create NOT nullable set ************************
----- Calc First Sets------
FIRST['Action65'] { 'MODULE' }
FIRST['Modules'] { 'MODULE' }
FIRST['Modules_1'] { 'MODULE','ϵ' }
FIRST['Module'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','FUNC'
,'PROC' }
FIRST['Routines'] { 'FUNC','PROC' }
FIRST['Routines_1'] { 'END','ϵ' }
FIRST['Routine'] { 'FUNC','PROC' }
FIRST['ProcBody'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
FIRST['ProcBody_1'] { 'UNTILL','EXIT','FOR','IF' }
FIRST['ProcDecl'] { 'PROC_IDENT' }
FIRST['FuncDecl'] { 'FUNC_IDENT' }
FIRST['FuncIdent'] { 'FUNC_IDENT' }
FIRST['ProcIdent'] { 'PROC_IDENT' }
FIRST['Statements'] { 'UNTILL','EXIT','FOR','IF' }
FIRST['SemiTermStmts'] { 'UNTILL','EXIT' }
FIRST['ODTermStmts'] { 'FOR' }
FIRST['FITermStmts'] { 'IF' }
FIRST['IfStmt'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['ThenPart'] { 'THEN' }
FIRST['ThenPart_1'] { 'UNTILL','EXIT','FOR','IF' }
FIRST['ElseIfPart'] { 'ELSEIF','ELSE','ϵ' }
FIRST['DoPart'] { 'DO' }
FIRST['Start'] { 'IDENT' }
FIRST['Finish'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['Step'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['StepPart'] { 'STEP','ϵ' }
FIRST['Next'] { 'STEP' }
FIRST['ToPart'] { 'TO' }
FIRST['FORLoop'] { 'IDENT' }
FIRST['ArithExpr'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['LogicalOR_1'] { 'OR','ϵ' }
FIRST['LogicalAND'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['LogicalAND_1'] { 'AND','ϵ' }
FIRST['RelOperation'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['RelOperation_1'] { '>','<','GTEQ','LTEQ','ϵ' }
FIRST['RelEquals'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['RelEquals_1'] { '=','#','ϵ' }
FIRST['BitwiseOR'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['BitwiseOR_1'] { '%','ϵ' }
FIRST['BitwiseAND'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['BitwiseAND_1'] { '&','ϵ' }
FIRST['BitwiseXOR'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['SimpleRelExpr_1'] { '!','ϵ' }
FIRST['AddExpr'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['AddExpr_1'] { '+','-','ϵ' }
FIRST['ShifExpr'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['ShiftExpr_1'] { 'LSH','RSH','ϵ' }
FIRST['MultExpr'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['MultExpr_1'] { '*','/','MOD','ϵ' }
FIRST['Unary'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['Factor'] { '(','NUMBER','*','@','FUNC_IDENT','IDENT' }
FIRST['FUNCcall'] { 'FUNC_IDENT' }
FIRST['IdentList'] { 'IDENT' }
FIRST['IdentList_1'] { ',','ϵ' }
FIRST['FundType'] { 'BOOL','CHAR','BYTE','INT','CARD' }
FIRST['OptModifier'] { 'POINTER','ϵ' }
FIRST['ParamList'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
FIRST['ParamList_1'] { ',','ϵ' }
FIRST['Param'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
FIRST['VarDecls'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
FIRST['SysDecls'] { 'ϵ','DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
 }
FIRST['SysDecls_1'] { ';','ϵ' }
FIRST['SysDecl'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL','ϵ'
 }
FIRST['VarList'] { 'IDENT' }
FIRST['VarList_1'] { ',','ϵ' }
FIRST['VarName'] { 'IDENT' }
FIRST['OptInit'] { '=','ϵ' }
FIRST['DefList'] { 'IDENT' }
FIRST['DefList_1'] { ',','ϵ' }
FIRST['Def'] { 'IDENT' }
FIRST['RecIdent'] { '=' }
FIRST['RecField'] { '=' }
FIRST['RecFieldList'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
FIRST['RecFieldList_1'] { ';','ϵ' }
FIRST['Modifier'] { 'POINTER','ARRAY','ϵ' }
FIRST['ArrayStuff'] { '(','ϵ' }
FIRST['OptArrayInit'] { '=','ϵ' }
FIRST['CompConstList'] { 'NUMBER','*','@' }
FIRST['CompConstList_1'] { ',','ϵ' }
FIRST['CompConst'] { 'NUMBER','*','@' }
FIRST['CompConst_1'] { '+','ϵ' }
FIRST['BaseCompConst'] { 'NUMBER','*','@' }
FIRST['Ident'] { 'IDENT' }
FIRST['MemContents'] { 'IDENT' }
FIRST['MemContentsType'] { '(','^','.','ϵ' }
----- Calc Follow Sets------
------------ Follow Sets ---------------
FOLLOW['Action65'] { '$' }
FOLLOW['Modules'] { '$' }
FOLLOW['Modules_1'] { }
FOLLOW['Module'] { 'MODULE' }
FOLLOW['Routines'] { 'MODULE' }
FOLLOW['Routines_1'] { 'MODULE' }
FOLLOW['Routine'] { 'END','MODULE' }
FOLLOW['ProcBody'] { }
FOLLOW['ProcBody_1'] { }
FOLLOW['ProcDecl'] { }
FOLLOW['FuncDecl'] { }
FOLLOW['FuncIdent'] { }
FOLLOW['ProcIdent'] { }
FOLLOW['Statements'] { 'ELSEIF','ELSE' }
FOLLOW['SemiTermStmts'] { 'ELSEIF','ELSE' }
FOLLOW['ODTermStmts'] { 'ELSEIF','ELSE' }
FOLLOW['FITermStmts'] { 'ELSEIF','ELSE' }
FOLLOW['IfStmt'] { 'FI' }
FOLLOW['ThenPart'] { 'FI' }
FOLLOW['ThenPart_1'] { }
FOLLOW['ElseIfPart'] { }
FOLLOW['DoPart'] { 'OD' }
FOLLOW['Start'] { 'TO' }
FOLLOW['Finish'] { 'STEP' }
FOLLOW['Step'] { }
FOLLOW['StepPart'] { 'DO' }
FOLLOW['Next'] { 'OD' }
FOLLOW['ToPart'] { 'OD' }
FOLLOW['FORLoop'] { 'OD' }
FOLLOW['ArithExpr'] { ';','THEN','STEP',')' }
FOLLOW['LogicalOR_1'] { ';','THEN','STEP',')' }
FOLLOW['LogicalAND'] { 'OR',';','THEN','STEP',')' }
FOLLOW['LogicalAND_1'] { 'OR',';','THEN','STEP',')' }
FOLLOW['RelOperation'] { 'AND','OR',';','THEN','STEP',')' }
FOLLOW['RelOperation_1'] { 'AND','OR',';','THEN','STEP',')' }
FOLLOW['RelEquals'] { '>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP',')' }
FOLLOW['RelEquals_1'] { '>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP',')' }
FOLLOW['BitwiseOR'] { '=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP',')'
 }
FOLLOW['BitwiseOR_1'] { '=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP',')'
 }
FOLLOW['BitwiseAND'] { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP'
,')' }
FOLLOW['BitwiseAND_1'] { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP'
,')' }
FOLLOW['BitwiseXOR'] { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP'
,')' }
FOLLOW['SimpleRelExpr_1'] { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN'
,'STEP',')' }
FOLLOW['AddExpr'] { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN'
,'STEP',')' }
FOLLOW['AddExpr_1'] { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN'
,'STEP',')' }
FOLLOW['ShifExpr'] { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',';'
,'THEN','STEP',')' }
FOLLOW['ShiftExpr_1'] { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR'
,';','THEN','STEP',')' }
FOLLOW['MultExpr'] { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND'
,'OR',';','THEN','STEP',')' }
FOLLOW['MultExpr_1'] { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ'
,'AND','OR',';','THEN','STEP',')' }
FOLLOW['Unary'] { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ'
,'LTEQ','AND','OR',';','THEN','STEP',')' }
FOLLOW['Factor'] { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ'
,'LTEQ','AND','OR',';','THEN','STEP',')' }
FOLLOW['FUNCcall'] { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ'
,'LTEQ','AND','OR',';','THEN','STEP',')' }
FOLLOW['IdentList'] { ')' }
FOLLOW['IdentList_1'] { ')' }
FOLLOW['FundType'] { }
FOLLOW['OptModifier'] { 'IDENT' }
FOLLOW['ParamList'] { ')' }
FOLLOW['ParamList_1'] { ')' }
FOLLOW['Param'] { ',',')' }
FOLLOW['VarDecls'] { ';',']' }
FOLLOW['SysDecls'] { 'FUNC','PROC','UNTILL','EXIT','FOR','IF' }
FOLLOW['SysDecls_1'] { 'FUNC','PROC','UNTILL','EXIT','FOR','IF' }
FOLLOW['SysDecl'] { ';','FUNC','PROC','UNTILL','EXIT','FOR','IF' }
FOLLOW['VarList'] { ';','FUNC','PROC','UNTILL','EXIT','FOR','IF',']' }
FOLLOW['VarList_1'] { ';','FUNC','PROC','UNTILL','EXIT','FOR','IF',']' }
FOLLOW['VarName'] { ',',';','FUNC','PROC','UNTILL','EXIT','FOR','IF',']' }
FOLLOW['OptInit'] { ',',';','FUNC','PROC','UNTILL','EXIT','FOR','IF',']' }
FOLLOW['DefList'] { }
FOLLOW['DefList_1'] { }
FOLLOW['Def'] { ',' }
FOLLOW['RecIdent'] { }
FOLLOW['RecField'] { }
FOLLOW['RecFieldList'] { ']' }
FOLLOW['RecFieldList_1'] { ']' }
FOLLOW['Modifier'] { 'IDENT' }
FOLLOW['ArrayStuff'] { }
FOLLOW['OptArrayInit'] { }
FOLLOW['CompConstList'] { ']' }
FOLLOW['CompConstList_1'] { ']' }
FOLLOW['CompConst'] { ',',']' }
FOLLOW['CompConst_1'] { ',',']' }
FOLLOW['BaseCompConst'] { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>'
,'<','GTEQ','LTEQ','AND','OR',';','THEN','STEP',')',',',']' }
FOLLOW['Ident'] { '=',',','(','^','.',')',';','FUNC','PROC','UNTILL','EXIT','FOR','IF'
,'*','/','MOD','LSH','RSH','+','-','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR'
,'THEN','STEP',']' }
FOLLOW['MemContents'] { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<'
,'GTEQ','LTEQ','AND','OR',';','THEN','STEP',')',',' }
FOLLOW['MemContentsType'] { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>'
,'<','GTEQ','LTEQ','AND','OR',';','THEN','STEP',')',',' }
---------------- Create Parse Table --------------
TerminalSymbol:IDENT
TerminalSymbol:GLOBALS
TerminalSymbol:ROUTINES
TerminalSymbol:MODULE
TerminalSymbol:RETURN
TerminalSymbol:PROC
TerminalSymbol:FUNC
TerminalSymbol:FUNC_IDENT
TerminalSymbol:PROC_IDENT
TerminalSymbol:IF
TerminalSymbol:FOR
TerminalSymbol:WHILE
TerminalSymbol:DO
TerminalSymbol:OD
TerminalSymbol:EXIT
TerminalSymbol:THEN
TerminalSymbol:FI
TerminalSymbol:ELSEIF
TerminalSymbol:ELSE
TerminalSymbol:UNTILL
TerminalSymbol:TO
TerminalSymbol:STEP
TerminalSymbol:ASM
TerminalSymbol:ENDASM
TerminalSymbol:OR
TerminalSymbol:AND
TerminalSymbol:GTEQ
TerminalSymbol:LTEQ
TerminalSymbol:NUMBER
TerminalSymbol:DEFINE
TerminalSymbol:TYPE
TerminalSymbol:RECORDTYPE
TerminalSymbol:BOOL
TerminalSymbol:CHAR
TerminalSymbol:BYTE
TerminalSymbol:CARD
TerminalSymbol:INT
TerminalSymbol:POINTER
TerminalSymbol:ARRAY
TerminalSymbol:BEGIN
TerminalSymbol:END
TerminalSymbol:@
TerminalSymbol:<*
TerminalSymbol:.
TerminalSymbol:^
TerminalSymbol:!
TerminalSymbol:&
TerminalSymbol:%
TerminalSymbol:#
TerminalSymbol:>
TerminalSymbol:<
TerminalSymbol:=
TerminalSymbol::=
TerminalSymbol:==+
TerminalSymbol:==-
TerminalSymbol:==*
TerminalSymbol:==/
TerminalSymbol:==MOD
TerminalSymbol:==&
TerminalSymbol:==!
TerminalSymbol:==XOR
TerminalSymbol:==%
TerminalSymbol:==LSH
TerminalSymbol:==RSH
TerminalSymbol:[
TerminalSymbol:]
TerminalSymbol:,
TerminalSymbol:;
TerminalSymbol:+
TerminalSymbol:-
TerminalSymbol:*
TerminalSymbol:/
TerminalSymbol:MOD
TerminalSymbol:LSH
TerminalSymbol:RSH
TerminalSymbol:(
TerminalSymbol:)
TerminalSymbol:ϵ
TerminalSymbol:$
------- Non Terminal: Action65 --------
> Rule 1 <
Action65-> Modules     FIRST['TempFirstY'] { 'MODULE' }
BEGIN MODULE ******
  Add Action65-> Modules ==> Table(Action65, MODULE)
END MODULE ^^^^^^^
FOLLOW['Action65'] { '$' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Action65-> Modules--------
Is 'ϵ' Not Contained in 'FIRST['Modules']'
			Compare 'ϵ' To 'MODULE'
TRUE
FIRST['TempFirstY'] { } U FIRST['Modules'] { 'MODULE' } => FIRST['TempFirstY'] { 'MODULE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'MODULE' }
 'MODULE'
------- Non Terminal: Modules --------
> Rule 1 <
Modules-> MODULE Modules_1     FIRST['TempFirstY'] { 'MODULE' }
BEGIN MODULE ******
  Add Modules-> MODULE Modules_1 ==> Table(Modules, MODULE)
END MODULE ^^^^^^^
FOLLOW['Modules'] { '$' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Modules-> MODULE Modules_1--------
Is 'ϵ' Not Contained in 'FIRST['MODULE']'
			Compare 'ϵ' To 'MODULE'
TRUE
FIRST['TempFirstY'] { } U FIRST['MODULE'] { 'MODULE' } => FIRST['TempFirstY'] { 'MODULE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'MODULE' }
 'MODULE'
------- Non Terminal: Modules_1 --------
> Rule 1 <
Modules_1-> MODULE Module Modules_1     FIRST['TempFirstY'] { 'MODULE' }
BEGIN MODULE ******
  Add Modules_1-> MODULE Module Modules_1 ==> Table(Modules_1, MODULE)
END MODULE ^^^^^^^
Modules_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add Modules_1-> ϵ ==> Table(Modules_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['Modules_1'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Modules_1-> MODULE Module Modules_1--------
Is 'ϵ' Not Contained in 'FIRST['MODULE']'
			Compare 'ϵ' To 'MODULE'
TRUE
FIRST['TempFirstY'] { } U FIRST['MODULE'] { 'MODULE' } => FIRST['TempFirstY'] { 'MODULE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'MODULE' }
 'MODULE'
--------Modules_1-> ϵ--------
FIRST['TempFirstY'] { 'MODULE' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'MODULE','ϵ' }
FIRST['TempFirstY'] { 'MODULE','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'MODULE','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
Is $ in Set FOLLOW['Modules_1']
FALSE
  FIRST['TempFirstY'] { 'MODULE','ϵ' }
 'MODULE'
 'ϵ'
------- Non Terminal: Module --------
> Rule 1 <
Module-> SysDecls Routines     FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
 }
BEGIN DEFINE ******
  Add Module-> SysDecls Routines ==> Table(Module, DEFINE)
END DEFINE ^^^^^^^
BEGIN TYPE ******
  Add Module-> SysDecls Routines ==> Table(Module, TYPE)
END TYPE ^^^^^^^
BEGIN RECORDTYPE ******
  Add Module-> SysDecls Routines ==> Table(Module, RECORDTYPE)
END RECORDTYPE ^^^^^^^
BEGIN CHAR ******
  Add Module-> SysDecls Routines ==> Table(Module, CHAR)
END CHAR ^^^^^^^
BEGIN BYTE ******
  Add Module-> SysDecls Routines ==> Table(Module, BYTE)
END BYTE ^^^^^^^
BEGIN INT ******
  Add Module-> SysDecls Routines ==> Table(Module, INT)
END INT ^^^^^^^
BEGIN CARD ******
  Add Module-> SysDecls Routines ==> Table(Module, CARD)
END CARD ^^^^^^^
BEGIN BOOL ******
  Add Module-> SysDecls Routines ==> Table(Module, BOOL)
END BOOL ^^^^^^^
Module-> Routines     FIRST['TempFirstY'] { 'FUNC','PROC' }
BEGIN FUNC ******
  Add Module-> Routines ==> Table(Module, FUNC)
END FUNC ^^^^^^^
BEGIN PROC ******
  Add Module-> Routines ==> Table(Module, PROC)
END PROC ^^^^^^^
FOLLOW['Module'] { 'MODULE' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Module-> SysDecls Routines--------
Is 'ϵ' Not Contained in 'FIRST['SysDecls']'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set FIRST['SysDecls']
TRUE
End of Y1Y2...Yk Chain
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
 }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
--------Module-> Routines--------
Is 'ϵ' Not Contained in 'FIRST['Routines']'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'PROC'
TRUE
FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
 } U FIRST['Routines'] { 'FUNC','PROC' } => FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
,'FUNC','PROC' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
,'FUNC','PROC' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
 'FUNC'
 'PROC'
------- Non Terminal: Routines --------
> Rule 1 <
Routines-> Routine Routines_1     FIRST['TempFirstY'] { 'FUNC','PROC' }
BEGIN FUNC ******
  Add Routines-> Routine Routines_1 ==> Table(Routines, FUNC)
END FUNC ^^^^^^^
BEGIN PROC ******
  Add Routines-> Routine Routines_1 ==> Table(Routines, PROC)
END PROC ^^^^^^^
FOLLOW['Routines'] { 'MODULE' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Routines-> Routine Routines_1--------
Is 'ϵ' Not Contained in 'FIRST['Routine']'
			Compare 'ϵ' To 'FUNC'
			Compare 'ϵ' To 'PROC'
TRUE
FIRST['TempFirstY'] { } U FIRST['Routine'] { 'FUNC','PROC' } => FIRST['TempFirstY'] { 'FUNC','PROC' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'FUNC','PROC' }
 'FUNC'
 'PROC'
------- Non Terminal: Routines_1 --------
> Rule 1 <
Routines_1-> END Routine Routines_1     FIRST['TempFirstY'] { 'END' }
BEGIN END ******
  Add Routines_1-> END Routine Routines_1 ==> Table(Routines_1, END)
END END ^^^^^^^
Routines_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add Routines_1-> ϵ ==> Table(Routines_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['Routines_1'] { 'MODULE' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Routines_1-> END Routine Routines_1--------
Is 'ϵ' Not Contained in 'FIRST['END']'
			Compare 'ϵ' To 'END'
TRUE
FIRST['TempFirstY'] { } U FIRST['END'] { 'END' } => FIRST['TempFirstY'] { 'END' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'END' }
 'END'
--------Routines_1-> ϵ--------
FIRST['TempFirstY'] { 'END' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'END','ϵ' }
FIRST['TempFirstY'] { 'END','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'END','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 'MODULE'
Add Routines_1-> ϵ ==> Table(Routines_1, MODULE)
Is $ in Set FOLLOW['Routines_1']
FALSE
  FIRST['TempFirstY'] { 'END','ϵ' }
 'END'
 'ϵ'
------- Non Terminal: Routine --------
> Rule 1 <
Routine-> FUNC FundType FuncDecl BEGIN ProcBody     FIRST['TempFirstY'] { 'FUNC' }
BEGIN FUNC ******
  Add Routine-> FUNC FundType FuncDecl BEGIN ProcBody ==> Table(Routine, FUNC)
END FUNC ^^^^^^^
Routine-> PROC ProcDecl BEGIN ProcBody     FIRST['TempFirstY'] { 'PROC' }
BEGIN PROC ******
  Add Routine-> PROC ProcDecl BEGIN ProcBody ==> Table(Routine, PROC)
END PROC ^^^^^^^
FOLLOW['Routine'] { 'END','MODULE' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Routine-> FUNC FundType FuncDecl BEGIN ProcBody--------
Is 'ϵ' Not Contained in 'FIRST['FUNC']'
			Compare 'ϵ' To 'FUNC'
TRUE
FIRST['TempFirstY'] { } U FIRST['FUNC'] { 'FUNC' } => FIRST['TempFirstY'] { 'FUNC' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'FUNC' }
 'FUNC'
--------Routine-> PROC ProcDecl BEGIN ProcBody--------
Is 'ϵ' Not Contained in 'FIRST['PROC']'
			Compare 'ϵ' To 'PROC'
TRUE
FIRST['TempFirstY'] { 'FUNC' } U FIRST['PROC'] { 'PROC' } => FIRST['TempFirstY'] { 'FUNC','PROC' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'FUNC','PROC' }
 'FUNC'
 'PROC'
------- Non Terminal: ProcBody --------
> Rule 1 <
ProcBody-> SysDecls ProcBody_1     FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
 }
BEGIN DEFINE ******
  Add ProcBody-> SysDecls ProcBody_1 ==> Table(ProcBody, DEFINE)
END DEFINE ^^^^^^^
BEGIN TYPE ******
  Add ProcBody-> SysDecls ProcBody_1 ==> Table(ProcBody, TYPE)
END TYPE ^^^^^^^
BEGIN RECORDTYPE ******
  Add ProcBody-> SysDecls ProcBody_1 ==> Table(ProcBody, RECORDTYPE)
END RECORDTYPE ^^^^^^^
BEGIN CHAR ******
  Add ProcBody-> SysDecls ProcBody_1 ==> Table(ProcBody, CHAR)
END CHAR ^^^^^^^
BEGIN BYTE ******
  Add ProcBody-> SysDecls ProcBody_1 ==> Table(ProcBody, BYTE)
END BYTE ^^^^^^^
BEGIN INT ******
  Add ProcBody-> SysDecls ProcBody_1 ==> Table(ProcBody, INT)
END INT ^^^^^^^
BEGIN CARD ******
  Add ProcBody-> SysDecls ProcBody_1 ==> Table(ProcBody, CARD)
END CARD ^^^^^^^
BEGIN BOOL ******
  Add ProcBody-> SysDecls ProcBody_1 ==> Table(ProcBody, BOOL)
END BOOL ^^^^^^^
FOLLOW['ProcBody'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ProcBody-> SysDecls ProcBody_1--------
Is 'ϵ' Not Contained in 'FIRST['SysDecls']'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set FIRST['SysDecls']
TRUE
End of Y1Y2...Yk Chain
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
 }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
------- Non Terminal: ProcBody_1 --------
> Rule 1 <
ProcBody_1-> Statements     FIRST['TempFirstY'] { 'UNTILL','EXIT','FOR','IF' }
BEGIN UNTILL ******
  Add ProcBody_1-> Statements ==> Table(ProcBody_1, UNTILL)
END UNTILL ^^^^^^^
BEGIN EXIT ******
  Add ProcBody_1-> Statements ==> Table(ProcBody_1, EXIT)
END EXIT ^^^^^^^
BEGIN FOR ******
  Add ProcBody_1-> Statements ==> Table(ProcBody_1, FOR)
END FOR ^^^^^^^
BEGIN IF ******
  Add ProcBody_1-> Statements ==> Table(ProcBody_1, IF)
END IF ^^^^^^^
FOLLOW['ProcBody_1'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ProcBody_1-> Statements--------
Is 'ϵ' Not Contained in 'FIRST['Statements']'
			Compare 'ϵ' To 'UNTILL'
			Compare 'ϵ' To 'EXIT'
			Compare 'ϵ' To 'FOR'
			Compare 'ϵ' To 'IF'
TRUE
FIRST['TempFirstY'] { } U FIRST['Statements'] { 'UNTILL','EXIT','FOR','IF' } => FIRST['TempFirstY'] { 'UNTILL','EXIT','FOR','IF' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'UNTILL','EXIT','FOR','IF' }
 'UNTILL'
 'EXIT'
 'FOR'
 'IF'
------- Non Terminal: ProcDecl --------
> Rule 1 <
ProcDecl-> ProcIdent OptInit ( ParamList )     FIRST['TempFirstY'] { 'PROC_IDENT' }
BEGIN PROC_IDENT ******
  Add ProcDecl-> ProcIdent OptInit ( ParamList ) ==> Table(ProcDecl, PROC_IDENT)
END PROC_IDENT ^^^^^^^
FOLLOW['ProcDecl'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ProcDecl-> ProcIdent OptInit ( ParamList )--------
Is 'ϵ' Not Contained in 'FIRST['ProcIdent']'
			Compare 'ϵ' To 'PROC_IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['ProcIdent'] { 'PROC_IDENT' } => FIRST['TempFirstY'] { 'PROC_IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'PROC_IDENT' }
 'PROC_IDENT'
------- Non Terminal: FuncDecl --------
> Rule 1 <
FuncDecl-> FuncIdent OptInit ( ParamList )     FIRST['TempFirstY'] { 'FUNC_IDENT' }
BEGIN FUNC_IDENT ******
  Add FuncDecl-> FuncIdent OptInit ( ParamList ) ==> Table(FuncDecl, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
FOLLOW['FuncDecl'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------FuncDecl-> FuncIdent OptInit ( ParamList )--------
Is 'ϵ' Not Contained in 'FIRST['FuncIdent']'
			Compare 'ϵ' To 'FUNC_IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['FuncIdent'] { 'FUNC_IDENT' } => FIRST['TempFirstY'] { 'FUNC_IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'FUNC_IDENT' }
 'FUNC_IDENT'
------- Non Terminal: FuncIdent --------
> Rule 1 <
FuncIdent-> FUNC_IDENT     FIRST['TempFirstY'] { 'FUNC_IDENT' }
BEGIN FUNC_IDENT ******
  Add FuncIdent-> FUNC_IDENT ==> Table(FuncIdent, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
FOLLOW['FuncIdent'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------FuncIdent-> FUNC_IDENT--------
Is 'ϵ' Not Contained in 'FIRST['FUNC_IDENT']'
			Compare 'ϵ' To 'FUNC_IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['FUNC_IDENT'] { 'FUNC_IDENT' } => FIRST['TempFirstY'] { 'FUNC_IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'FUNC_IDENT' }
 'FUNC_IDENT'
------- Non Terminal: ProcIdent --------
> Rule 1 <
ProcIdent-> PROC_IDENT     FIRST['TempFirstY'] { 'PROC_IDENT' }
BEGIN PROC_IDENT ******
  Add ProcIdent-> PROC_IDENT ==> Table(ProcIdent, PROC_IDENT)
END PROC_IDENT ^^^^^^^
FOLLOW['ProcIdent'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ProcIdent-> PROC_IDENT--------
Is 'ϵ' Not Contained in 'FIRST['PROC_IDENT']'
			Compare 'ϵ' To 'PROC_IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['PROC_IDENT'] { 'PROC_IDENT' } => FIRST['TempFirstY'] { 'PROC_IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'PROC_IDENT' }
 'PROC_IDENT'
------- Non Terminal: Statements --------
> Rule 1 <
Statements-> SemiTermStmts     FIRST['TempFirstY'] { 'UNTILL','EXIT' }
BEGIN UNTILL ******
  Add Statements-> SemiTermStmts ==> Table(Statements, UNTILL)
END UNTILL ^^^^^^^
BEGIN EXIT ******
  Add Statements-> SemiTermStmts ==> Table(Statements, EXIT)
END EXIT ^^^^^^^
Statements-> ODTermStmts     FIRST['TempFirstY'] { 'FOR' }
BEGIN FOR ******
  Add Statements-> ODTermStmts ==> Table(Statements, FOR)
END FOR ^^^^^^^
Statements-> FITermStmts     FIRST['TempFirstY'] { 'IF' }
BEGIN IF ******
  Add Statements-> FITermStmts ==> Table(Statements, IF)
END IF ^^^^^^^
FOLLOW['Statements'] { 'ELSEIF','ELSE' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Statements-> SemiTermStmts--------
Is 'ϵ' Not Contained in 'FIRST['SemiTermStmts']'
			Compare 'ϵ' To 'UNTILL'
			Compare 'ϵ' To 'EXIT'
TRUE
FIRST['TempFirstY'] { } U FIRST['SemiTermStmts'] { 'UNTILL','EXIT' } => FIRST['TempFirstY'] { 'UNTILL','EXIT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'UNTILL','EXIT' }
 'UNTILL'
 'EXIT'
--------Statements-> ODTermStmts--------
Is 'ϵ' Not Contained in 'FIRST['ODTermStmts']'
			Compare 'ϵ' To 'FOR'
TRUE
FIRST['TempFirstY'] { 'UNTILL','EXIT' } U FIRST['ODTermStmts'] { 'FOR' } => FIRST['TempFirstY'] { 'UNTILL','EXIT','FOR' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'UNTILL','EXIT','FOR' }
 'UNTILL'
 'EXIT'
 'FOR'
--------Statements-> FITermStmts--------
Is 'ϵ' Not Contained in 'FIRST['FITermStmts']'
			Compare 'ϵ' To 'IF'
TRUE
FIRST['TempFirstY'] { 'UNTILL','EXIT','FOR' } U FIRST['FITermStmts'] { 'IF' } => FIRST['TempFirstY'] { 'UNTILL','EXIT','FOR','IF' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'UNTILL','EXIT','FOR','IF' }
 'UNTILL'
 'EXIT'
 'FOR'
 'IF'
------- Non Terminal: SemiTermStmts --------
> Rule 1 <
SemiTermStmts-> UNTILL ArithExpr ;     FIRST['TempFirstY'] { 'UNTILL' }
BEGIN UNTILL ******
  Add SemiTermStmts-> UNTILL ArithExpr ; ==> Table(SemiTermStmts, UNTILL)
END UNTILL ^^^^^^^
SemiTermStmts-> EXIT ;     FIRST['TempFirstY'] { 'EXIT' }
BEGIN EXIT ******
  Add SemiTermStmts-> EXIT ; ==> Table(SemiTermStmts, EXIT)
END EXIT ^^^^^^^
FOLLOW['SemiTermStmts'] { 'ELSEIF','ELSE' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------SemiTermStmts-> UNTILL ArithExpr ;--------
Is 'ϵ' Not Contained in 'FIRST['UNTILL']'
			Compare 'ϵ' To 'UNTILL'
TRUE
FIRST['TempFirstY'] { } U FIRST['UNTILL'] { 'UNTILL' } => FIRST['TempFirstY'] { 'UNTILL' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'UNTILL' }
 'UNTILL'
--------SemiTermStmts-> EXIT ;--------
Is 'ϵ' Not Contained in 'FIRST['EXIT']'
			Compare 'ϵ' To 'EXIT'
TRUE
FIRST['TempFirstY'] { 'UNTILL' } U FIRST['EXIT'] { 'EXIT' } => FIRST['TempFirstY'] { 'UNTILL','EXIT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'UNTILL','EXIT' }
 'UNTILL'
 'EXIT'
------- Non Terminal: ODTermStmts --------
> Rule 1 <
ODTermStmts-> FOR FORLoop OD     FIRST['TempFirstY'] { 'FOR' }
BEGIN FOR ******
  Add ODTermStmts-> FOR FORLoop OD ==> Table(ODTermStmts, FOR)
END FOR ^^^^^^^
FOLLOW['ODTermStmts'] { 'ELSEIF','ELSE' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ODTermStmts-> FOR FORLoop OD--------
Is 'ϵ' Not Contained in 'FIRST['FOR']'
			Compare 'ϵ' To 'FOR'
TRUE
FIRST['TempFirstY'] { } U FIRST['FOR'] { 'FOR' } => FIRST['TempFirstY'] { 'FOR' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'FOR' }
 'FOR'
------- Non Terminal: FITermStmts --------
> Rule 1 <
FITermStmts-> IF IfStmt FI     FIRST['TempFirstY'] { 'IF' }
BEGIN IF ******
  Add FITermStmts-> IF IfStmt FI ==> Table(FITermStmts, IF)
END IF ^^^^^^^
FOLLOW['FITermStmts'] { 'ELSEIF','ELSE' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------FITermStmts-> IF IfStmt FI--------
Is 'ϵ' Not Contained in 'FIRST['IF']'
			Compare 'ϵ' To 'IF'
TRUE
FIRST['TempFirstY'] { } U FIRST['IF'] { 'IF' } => FIRST['TempFirstY'] { 'IF' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'IF' }
 'IF'
------- Non Terminal: IfStmt --------
> Rule 1 <
IfStmt-> ArithExpr ThenPart     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add IfStmt-> ArithExpr ThenPart ==> Table(IfStmt, -)
END - ^^^^^^^
BEGIN ( ******
  Add IfStmt-> ArithExpr ThenPart ==> Table(IfStmt, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add IfStmt-> ArithExpr ThenPart ==> Table(IfStmt, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add IfStmt-> ArithExpr ThenPart ==> Table(IfStmt, *)
END * ^^^^^^^
BEGIN @ ******
  Add IfStmt-> ArithExpr ThenPart ==> Table(IfStmt, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add IfStmt-> ArithExpr ThenPart ==> Table(IfStmt, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add IfStmt-> ArithExpr ThenPart ==> Table(IfStmt, IDENT)
END IDENT ^^^^^^^
FOLLOW['IfStmt'] { 'FI' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------IfStmt-> ArithExpr ThenPart--------
Is 'ϵ' Not Contained in 'FIRST['ArithExpr']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['ArithExpr'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: ThenPart --------
> Rule 1 <
ThenPart-> THEN ThenPart_1     FIRST['TempFirstY'] { 'THEN' }
BEGIN THEN ******
  Add ThenPart-> THEN ThenPart_1 ==> Table(ThenPart, THEN)
END THEN ^^^^^^^
FOLLOW['ThenPart'] { 'FI' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ThenPart-> THEN ThenPart_1--------
Is 'ϵ' Not Contained in 'FIRST['THEN']'
			Compare 'ϵ' To 'THEN'
TRUE
FIRST['TempFirstY'] { } U FIRST['THEN'] { 'THEN' } => FIRST['TempFirstY'] { 'THEN' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'THEN' }
 'THEN'
------- Non Terminal: ThenPart_1 --------
> Rule 1 <
ThenPart_1-> Statements ElseIfPart     FIRST['TempFirstY'] { 'UNTILL','EXIT','FOR','IF' }
BEGIN UNTILL ******
  Add ThenPart_1-> Statements ElseIfPart ==> Table(ThenPart_1, UNTILL)
END UNTILL ^^^^^^^
BEGIN EXIT ******
  Add ThenPart_1-> Statements ElseIfPart ==> Table(ThenPart_1, EXIT)
END EXIT ^^^^^^^
BEGIN FOR ******
  Add ThenPart_1-> Statements ElseIfPart ==> Table(ThenPart_1, FOR)
END FOR ^^^^^^^
BEGIN IF ******
  Add ThenPart_1-> Statements ElseIfPart ==> Table(ThenPart_1, IF)
END IF ^^^^^^^
FOLLOW['ThenPart_1'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ThenPart_1-> Statements ElseIfPart--------
Is 'ϵ' Not Contained in 'FIRST['Statements']'
			Compare 'ϵ' To 'UNTILL'
			Compare 'ϵ' To 'EXIT'
			Compare 'ϵ' To 'FOR'
			Compare 'ϵ' To 'IF'
TRUE
FIRST['TempFirstY'] { } U FIRST['Statements'] { 'UNTILL','EXIT','FOR','IF' } => FIRST['TempFirstY'] { 'UNTILL','EXIT','FOR','IF' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'UNTILL','EXIT','FOR','IF' }
 'UNTILL'
 'EXIT'
 'FOR'
 'IF'
------- Non Terminal: ElseIfPart --------
> Rule 1 <
ElseIfPart-> ELSEIF ArithExpr ThenPart     FIRST['TempFirstY'] { 'ELSEIF' }
BEGIN ELSEIF ******
  Add ElseIfPart-> ELSEIF ArithExpr ThenPart ==> Table(ElseIfPart, ELSEIF)
END ELSEIF ^^^^^^^
ElseIfPart-> ELSE Statements     FIRST['TempFirstY'] { 'ELSE' }
BEGIN ELSE ******
  Add ElseIfPart-> ELSE Statements ==> Table(ElseIfPart, ELSE)
END ELSE ^^^^^^^
ElseIfPart-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add ElseIfPart-> ϵ ==> Table(ElseIfPart, ϵ)
END ϵ ^^^^^^^
FOLLOW['ElseIfPart'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ElseIfPart-> ELSEIF ArithExpr ThenPart--------
Is 'ϵ' Not Contained in 'FIRST['ELSEIF']'
			Compare 'ϵ' To 'ELSEIF'
TRUE
FIRST['TempFirstY'] { } U FIRST['ELSEIF'] { 'ELSEIF' } => FIRST['TempFirstY'] { 'ELSEIF' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'ELSEIF' }
 'ELSEIF'
--------ElseIfPart-> ELSE Statements--------
Is 'ϵ' Not Contained in 'FIRST['ELSE']'
			Compare 'ϵ' To 'ELSE'
TRUE
FIRST['TempFirstY'] { 'ELSEIF' } U FIRST['ELSE'] { 'ELSE' } => FIRST['TempFirstY'] { 'ELSEIF','ELSE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'ELSEIF','ELSE' }
 'ELSEIF'
 'ELSE'
--------ElseIfPart-> ϵ--------
FIRST['TempFirstY'] { 'ELSEIF','ELSE' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'ELSEIF','ELSE','ϵ' }
FIRST['TempFirstY'] { 'ELSEIF','ELSE','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'ELSEIF','ELSE','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
Is $ in Set FOLLOW['ElseIfPart']
FALSE
  FIRST['TempFirstY'] { 'ELSEIF','ELSE','ϵ' }
 'ELSEIF'
 'ELSE'
 'ϵ'
------- Non Terminal: DoPart --------
> Rule 1 <
DoPart-> DO Statements     FIRST['TempFirstY'] { 'DO' }
BEGIN DO ******
  Add DoPart-> DO Statements ==> Table(DoPart, DO)
END DO ^^^^^^^
FOLLOW['DoPart'] { 'OD' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------DoPart-> DO Statements--------
Is 'ϵ' Not Contained in 'FIRST['DO']'
			Compare 'ϵ' To 'DO'
TRUE
FIRST['TempFirstY'] { } U FIRST['DO'] { 'DO' } => FIRST['TempFirstY'] { 'DO' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'DO' }
 'DO'
------- Non Terminal: Start --------
> Rule 1 <
Start-> MemContents = ArithExpr     FIRST['TempFirstY'] { 'IDENT' }
BEGIN IDENT ******
  Add Start-> MemContents = ArithExpr ==> Table(Start, IDENT)
END IDENT ^^^^^^^
FOLLOW['Start'] { 'TO' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Start-> MemContents = ArithExpr--------
Is 'ϵ' Not Contained in 'FIRST['MemContents']'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['MemContents'] { 'IDENT' } => FIRST['TempFirstY'] { 'IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'IDENT' }
 'IDENT'
------- Non Terminal: Finish --------
> Rule 1 <
Finish-> ArithExpr     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add Finish-> ArithExpr ==> Table(Finish, -)
END - ^^^^^^^
BEGIN ( ******
  Add Finish-> ArithExpr ==> Table(Finish, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add Finish-> ArithExpr ==> Table(Finish, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add Finish-> ArithExpr ==> Table(Finish, *)
END * ^^^^^^^
BEGIN @ ******
  Add Finish-> ArithExpr ==> Table(Finish, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add Finish-> ArithExpr ==> Table(Finish, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add Finish-> ArithExpr ==> Table(Finish, IDENT)
END IDENT ^^^^^^^
FOLLOW['Finish'] { 'STEP' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Finish-> ArithExpr--------
Is 'ϵ' Not Contained in 'FIRST['ArithExpr']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['ArithExpr'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: Step --------
> Rule 1 <
Step-> ArithExpr     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add Step-> ArithExpr ==> Table(Step, -)
END - ^^^^^^^
BEGIN ( ******
  Add Step-> ArithExpr ==> Table(Step, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add Step-> ArithExpr ==> Table(Step, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add Step-> ArithExpr ==> Table(Step, *)
END * ^^^^^^^
BEGIN @ ******
  Add Step-> ArithExpr ==> Table(Step, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add Step-> ArithExpr ==> Table(Step, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add Step-> ArithExpr ==> Table(Step, IDENT)
END IDENT ^^^^^^^
FOLLOW['Step'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Step-> ArithExpr--------
Is 'ϵ' Not Contained in 'FIRST['ArithExpr']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['ArithExpr'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: StepPart --------
> Rule 1 <
StepPart-> STEP Step     FIRST['TempFirstY'] { 'STEP' }
BEGIN STEP ******
  Add StepPart-> STEP Step ==> Table(StepPart, STEP)
END STEP ^^^^^^^
StepPart-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add StepPart-> ϵ ==> Table(StepPart, ϵ)
END ϵ ^^^^^^^
FOLLOW['StepPart'] { 'DO' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------StepPart-> STEP Step--------
Is 'ϵ' Not Contained in 'FIRST['STEP']'
			Compare 'ϵ' To 'STEP'
TRUE
FIRST['TempFirstY'] { } U FIRST['STEP'] { 'STEP' } => FIRST['TempFirstY'] { 'STEP' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'STEP' }
 'STEP'
--------StepPart-> ϵ--------
FIRST['TempFirstY'] { 'STEP' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'STEP','ϵ' }
FIRST['TempFirstY'] { 'STEP','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'STEP','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 'DO'
Add StepPart-> ϵ ==> Table(StepPart, DO)
Is $ in Set FOLLOW['StepPart']
FALSE
  FIRST['TempFirstY'] { 'STEP','ϵ' }
 'STEP'
 'ϵ'
------- Non Terminal: Next --------
> Rule 1 <
Next-> StepPart DoPart     FIRST['TempFirstY'] { 'STEP' }
BEGIN STEP ******
  Add Next-> StepPart DoPart ==> Table(Next, STEP)
END STEP ^^^^^^^
FOLLOW['Next'] { 'OD' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Next-> StepPart DoPart--------
Is 'ϵ' Not Contained in 'FIRST['StepPart']'
			Compare 'ϵ' To 'STEP'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set FIRST['StepPart']
TRUE
End of Y1Y2...Yk Chain
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'STEP' }
 'STEP'
------- Non Terminal: ToPart --------
> Rule 1 <
ToPart-> TO Finish Next     FIRST['TempFirstY'] { 'TO' }
BEGIN TO ******
  Add ToPart-> TO Finish Next ==> Table(ToPart, TO)
END TO ^^^^^^^
FOLLOW['ToPart'] { 'OD' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ToPart-> TO Finish Next--------
Is 'ϵ' Not Contained in 'FIRST['TO']'
			Compare 'ϵ' To 'TO'
TRUE
FIRST['TempFirstY'] { } U FIRST['TO'] { 'TO' } => FIRST['TempFirstY'] { 'TO' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'TO' }
 'TO'
------- Non Terminal: FORLoop --------
> Rule 1 <
FORLoop-> Start ToPart     FIRST['TempFirstY'] { 'IDENT' }
BEGIN IDENT ******
  Add FORLoop-> Start ToPart ==> Table(FORLoop, IDENT)
END IDENT ^^^^^^^
FOLLOW['FORLoop'] { 'OD' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------FORLoop-> Start ToPart--------
Is 'ϵ' Not Contained in 'FIRST['Start']'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['Start'] { 'IDENT' } => FIRST['TempFirstY'] { 'IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'IDENT' }
 'IDENT'
------- Non Terminal: ArithExpr --------
> Rule 1 <
ArithExpr-> LogicalAND LogicalOR_1     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add ArithExpr-> LogicalAND LogicalOR_1 ==> Table(ArithExpr, -)
END - ^^^^^^^
BEGIN ( ******
  Add ArithExpr-> LogicalAND LogicalOR_1 ==> Table(ArithExpr, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add ArithExpr-> LogicalAND LogicalOR_1 ==> Table(ArithExpr, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add ArithExpr-> LogicalAND LogicalOR_1 ==> Table(ArithExpr, *)
END * ^^^^^^^
BEGIN @ ******
  Add ArithExpr-> LogicalAND LogicalOR_1 ==> Table(ArithExpr, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add ArithExpr-> LogicalAND LogicalOR_1 ==> Table(ArithExpr, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add ArithExpr-> LogicalAND LogicalOR_1 ==> Table(ArithExpr, IDENT)
END IDENT ^^^^^^^
FOLLOW['ArithExpr'] { ';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ArithExpr-> LogicalAND LogicalOR_1--------
Is 'ϵ' Not Contained in 'FIRST['LogicalAND']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['LogicalAND'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: LogicalOR_1 --------
> Rule 1 <
LogicalOR_1-> OR LogicalAND LogicalOR_1     FIRST['TempFirstY'] { 'OR' }
BEGIN OR ******
  Add LogicalOR_1-> OR LogicalAND LogicalOR_1 ==> Table(LogicalOR_1, OR)
END OR ^^^^^^^
LogicalOR_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add LogicalOR_1-> ϵ ==> Table(LogicalOR_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['LogicalOR_1'] { ';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------LogicalOR_1-> OR LogicalAND LogicalOR_1--------
Is 'ϵ' Not Contained in 'FIRST['OR']'
			Compare 'ϵ' To 'OR'
TRUE
FIRST['TempFirstY'] { } U FIRST['OR'] { 'OR' } => FIRST['TempFirstY'] { 'OR' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'OR' }
 'OR'
--------LogicalOR_1-> ϵ--------
FIRST['TempFirstY'] { 'OR' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'OR','ϵ' }
FIRST['TempFirstY'] { 'OR','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'OR','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 ';'
Add LogicalOR_1-> ϵ ==> Table(LogicalOR_1, ;)
 'THEN'
Add LogicalOR_1-> ϵ ==> Table(LogicalOR_1, THEN)
 'STEP'
Add LogicalOR_1-> ϵ ==> Table(LogicalOR_1, STEP)
 ')'
Add LogicalOR_1-> ϵ ==> Table(LogicalOR_1, ))
Is $ in Set FOLLOW['LogicalOR_1']
FALSE
  FIRST['TempFirstY'] { 'OR','ϵ' }
 'OR'
 'ϵ'
------- Non Terminal: LogicalAND --------
> Rule 1 <
LogicalAND-> RelOperation LogicalAND_1     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add LogicalAND-> RelOperation LogicalAND_1 ==> Table(LogicalAND, -)
END - ^^^^^^^
BEGIN ( ******
  Add LogicalAND-> RelOperation LogicalAND_1 ==> Table(LogicalAND, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add LogicalAND-> RelOperation LogicalAND_1 ==> Table(LogicalAND, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add LogicalAND-> RelOperation LogicalAND_1 ==> Table(LogicalAND, *)
END * ^^^^^^^
BEGIN @ ******
  Add LogicalAND-> RelOperation LogicalAND_1 ==> Table(LogicalAND, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add LogicalAND-> RelOperation LogicalAND_1 ==> Table(LogicalAND, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add LogicalAND-> RelOperation LogicalAND_1 ==> Table(LogicalAND, IDENT)
END IDENT ^^^^^^^
FOLLOW['LogicalAND'] { 'OR',';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------LogicalAND-> RelOperation LogicalAND_1--------
Is 'ϵ' Not Contained in 'FIRST['RelOperation']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['RelOperation'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: LogicalAND_1 --------
> Rule 1 <
LogicalAND_1-> AND RelOperation LogicalAND_1     FIRST['TempFirstY'] { 'AND' }
BEGIN AND ******
  Add LogicalAND_1-> AND RelOperation LogicalAND_1 ==> Table(LogicalAND_1, AND)
END AND ^^^^^^^
LogicalAND_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add LogicalAND_1-> ϵ ==> Table(LogicalAND_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['LogicalAND_1'] { 'OR',';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------LogicalAND_1-> AND RelOperation LogicalAND_1--------
Is 'ϵ' Not Contained in 'FIRST['AND']'
			Compare 'ϵ' To 'AND'
TRUE
FIRST['TempFirstY'] { } U FIRST['AND'] { 'AND' } => FIRST['TempFirstY'] { 'AND' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'AND' }
 'AND'
--------LogicalAND_1-> ϵ--------
FIRST['TempFirstY'] { 'AND' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'AND','ϵ' }
FIRST['TempFirstY'] { 'AND','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'AND','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 'OR'
Add LogicalAND_1-> ϵ ==> Table(LogicalAND_1, OR)
 ';'
Add LogicalAND_1-> ϵ ==> Table(LogicalAND_1, ;)
 'THEN'
Add LogicalAND_1-> ϵ ==> Table(LogicalAND_1, THEN)
 'STEP'
Add LogicalAND_1-> ϵ ==> Table(LogicalAND_1, STEP)
 ')'
Add LogicalAND_1-> ϵ ==> Table(LogicalAND_1, ))
Is $ in Set FOLLOW['LogicalAND_1']
FALSE
  FIRST['TempFirstY'] { 'AND','ϵ' }
 'AND'
 'ϵ'
------- Non Terminal: RelOperation --------
> Rule 1 <
RelOperation-> RelEquals RelOperation_1     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add RelOperation-> RelEquals RelOperation_1 ==> Table(RelOperation, -)
END - ^^^^^^^
BEGIN ( ******
  Add RelOperation-> RelEquals RelOperation_1 ==> Table(RelOperation, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add RelOperation-> RelEquals RelOperation_1 ==> Table(RelOperation, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add RelOperation-> RelEquals RelOperation_1 ==> Table(RelOperation, *)
END * ^^^^^^^
BEGIN @ ******
  Add RelOperation-> RelEquals RelOperation_1 ==> Table(RelOperation, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add RelOperation-> RelEquals RelOperation_1 ==> Table(RelOperation, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add RelOperation-> RelEquals RelOperation_1 ==> Table(RelOperation, IDENT)
END IDENT ^^^^^^^
FOLLOW['RelOperation'] { 'AND','OR',';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------RelOperation-> RelEquals RelOperation_1--------
Is 'ϵ' Not Contained in 'FIRST['RelEquals']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['RelEquals'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: RelOperation_1 --------
> Rule 1 <
RelOperation_1-> > RelEquals RelOperation_1     FIRST['TempFirstY'] { '>' }
BEGIN > ******
  Add RelOperation_1-> > RelEquals RelOperation_1 ==> Table(RelOperation_1, >)
END > ^^^^^^^
RelOperation_1-> < RelEquals RelOperation_1     FIRST['TempFirstY'] { '<' }
BEGIN < ******
  Add RelOperation_1-> < RelEquals RelOperation_1 ==> Table(RelOperation_1, <)
END < ^^^^^^^
RelOperation_1-> GTEQ RelEquals RelOperation_1     FIRST['TempFirstY'] { 'GTEQ' }
BEGIN GTEQ ******
  Add RelOperation_1-> GTEQ RelEquals RelOperation_1 ==> Table(RelOperation_1, GTEQ)
END GTEQ ^^^^^^^
RelOperation_1-> LTEQ RelEquals RelOperation_1     FIRST['TempFirstY'] { 'LTEQ' }
BEGIN LTEQ ******
  Add RelOperation_1-> LTEQ RelEquals RelOperation_1 ==> Table(RelOperation_1, LTEQ)
END LTEQ ^^^^^^^
RelOperation_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add RelOperation_1-> ϵ ==> Table(RelOperation_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['RelOperation_1'] { 'AND','OR',';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------RelOperation_1-> > RelEquals RelOperation_1--------
Is 'ϵ' Not Contained in 'FIRST['>']'
			Compare 'ϵ' To '>'
TRUE
FIRST['TempFirstY'] { } U FIRST['>'] { '>' } => FIRST['TempFirstY'] { '>' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '>' }
 '>'
--------RelOperation_1-> < RelEquals RelOperation_1--------
Is 'ϵ' Not Contained in 'FIRST['<']'
			Compare 'ϵ' To '<'
TRUE
FIRST['TempFirstY'] { '>' } U FIRST['<'] { '<' } => FIRST['TempFirstY'] { '>','<' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '>','<' }
 '>'
 '<'
--------RelOperation_1-> GTEQ RelEquals RelOperation_1--------
Is 'ϵ' Not Contained in 'FIRST['GTEQ']'
			Compare 'ϵ' To 'GTEQ'
TRUE
FIRST['TempFirstY'] { '>','<' } U FIRST['GTEQ'] { 'GTEQ' } => FIRST['TempFirstY'] { '>','<','GTEQ' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '>','<','GTEQ' }
 '>'
 '<'
 'GTEQ'
--------RelOperation_1-> LTEQ RelEquals RelOperation_1--------
Is 'ϵ' Not Contained in 'FIRST['LTEQ']'
			Compare 'ϵ' To 'LTEQ'
TRUE
FIRST['TempFirstY'] { '>','<','GTEQ' } U FIRST['LTEQ'] { 'LTEQ' } => FIRST['TempFirstY'] { '>','<','GTEQ','LTEQ' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '>','<','GTEQ','LTEQ' }
 '>'
 '<'
 'GTEQ'
 'LTEQ'
--------RelOperation_1-> ϵ--------
FIRST['TempFirstY'] { '>','<','GTEQ','LTEQ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '>','<','GTEQ','LTEQ','ϵ' }
FIRST['TempFirstY'] { '>','<','GTEQ','LTEQ','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '>','<','GTEQ','LTEQ','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 'AND'
Add RelOperation_1-> ϵ ==> Table(RelOperation_1, AND)
 'OR'
Add RelOperation_1-> ϵ ==> Table(RelOperation_1, OR)
 ';'
Add RelOperation_1-> ϵ ==> Table(RelOperation_1, ;)
 'THEN'
Add RelOperation_1-> ϵ ==> Table(RelOperation_1, THEN)
 'STEP'
Add RelOperation_1-> ϵ ==> Table(RelOperation_1, STEP)
 ')'
Add RelOperation_1-> ϵ ==> Table(RelOperation_1, ))
Is $ in Set FOLLOW['RelOperation_1']
FALSE
  FIRST['TempFirstY'] { '>','<','GTEQ','LTEQ','ϵ' }
 '>'
 '<'
 'GTEQ'
 'LTEQ'
 'ϵ'
------- Non Terminal: RelEquals --------
> Rule 1 <
RelEquals-> BitwiseOR RelEquals_1     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add RelEquals-> BitwiseOR RelEquals_1 ==> Table(RelEquals, -)
END - ^^^^^^^
BEGIN ( ******
  Add RelEquals-> BitwiseOR RelEquals_1 ==> Table(RelEquals, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add RelEquals-> BitwiseOR RelEquals_1 ==> Table(RelEquals, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add RelEquals-> BitwiseOR RelEquals_1 ==> Table(RelEquals, *)
END * ^^^^^^^
BEGIN @ ******
  Add RelEquals-> BitwiseOR RelEquals_1 ==> Table(RelEquals, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add RelEquals-> BitwiseOR RelEquals_1 ==> Table(RelEquals, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add RelEquals-> BitwiseOR RelEquals_1 ==> Table(RelEquals, IDENT)
END IDENT ^^^^^^^
FOLLOW['RelEquals'] { '>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------RelEquals-> BitwiseOR RelEquals_1--------
Is 'ϵ' Not Contained in 'FIRST['BitwiseOR']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['BitwiseOR'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: RelEquals_1 --------
> Rule 1 <
RelEquals_1-> = BitwiseOR RelEquals_1     FIRST['TempFirstY'] { '=' }
BEGIN = ******
  Add RelEquals_1-> = BitwiseOR RelEquals_1 ==> Table(RelEquals_1, =)
END = ^^^^^^^
RelEquals_1-> # BitwiseOR RelEquals_1     FIRST['TempFirstY'] { '#' }
BEGIN # ******
  Add RelEquals_1-> # BitwiseOR RelEquals_1 ==> Table(RelEquals_1, #)
END # ^^^^^^^
RelEquals_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add RelEquals_1-> ϵ ==> Table(RelEquals_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['RelEquals_1'] { '>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------RelEquals_1-> = BitwiseOR RelEquals_1--------
Is 'ϵ' Not Contained in 'FIRST['=']'
			Compare 'ϵ' To '='
TRUE
FIRST['TempFirstY'] { } U FIRST['='] { '=' } => FIRST['TempFirstY'] { '=' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '=' }
 '='
--------RelEquals_1-> # BitwiseOR RelEquals_1--------
Is 'ϵ' Not Contained in 'FIRST['#']'
			Compare 'ϵ' To '#'
TRUE
FIRST['TempFirstY'] { '=' } U FIRST['#'] { '#' } => FIRST['TempFirstY'] { '=','#' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '=','#' }
 '='
 '#'
--------RelEquals_1-> ϵ--------
FIRST['TempFirstY'] { '=','#' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '=','#','ϵ' }
FIRST['TempFirstY'] { '=','#','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '=','#','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 '>'
Add RelEquals_1-> ϵ ==> Table(RelEquals_1, >)
 '<'
Add RelEquals_1-> ϵ ==> Table(RelEquals_1, <)
 'GTEQ'
Add RelEquals_1-> ϵ ==> Table(RelEquals_1, GTEQ)
 'LTEQ'
Add RelEquals_1-> ϵ ==> Table(RelEquals_1, LTEQ)
 'AND'
Add RelEquals_1-> ϵ ==> Table(RelEquals_1, AND)
 'OR'
Add RelEquals_1-> ϵ ==> Table(RelEquals_1, OR)
 ';'
Add RelEquals_1-> ϵ ==> Table(RelEquals_1, ;)
 'THEN'
Add RelEquals_1-> ϵ ==> Table(RelEquals_1, THEN)
 'STEP'
Add RelEquals_1-> ϵ ==> Table(RelEquals_1, STEP)
 ')'
Add RelEquals_1-> ϵ ==> Table(RelEquals_1, ))
Is $ in Set FOLLOW['RelEquals_1']
FALSE
  FIRST['TempFirstY'] { '=','#','ϵ' }
 '='
 '#'
 'ϵ'
------- Non Terminal: BitwiseOR --------
> Rule 1 <
BitwiseOR-> BitwiseAND BitwiseOR_1     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add BitwiseOR-> BitwiseAND BitwiseOR_1 ==> Table(BitwiseOR, -)
END - ^^^^^^^
BEGIN ( ******
  Add BitwiseOR-> BitwiseAND BitwiseOR_1 ==> Table(BitwiseOR, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add BitwiseOR-> BitwiseAND BitwiseOR_1 ==> Table(BitwiseOR, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add BitwiseOR-> BitwiseAND BitwiseOR_1 ==> Table(BitwiseOR, *)
END * ^^^^^^^
BEGIN @ ******
  Add BitwiseOR-> BitwiseAND BitwiseOR_1 ==> Table(BitwiseOR, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add BitwiseOR-> BitwiseAND BitwiseOR_1 ==> Table(BitwiseOR, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add BitwiseOR-> BitwiseAND BitwiseOR_1 ==> Table(BitwiseOR, IDENT)
END IDENT ^^^^^^^
FOLLOW['BitwiseOR'] { '=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP',')'
 }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------BitwiseOR-> BitwiseAND BitwiseOR_1--------
Is 'ϵ' Not Contained in 'FIRST['BitwiseAND']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['BitwiseAND'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: BitwiseOR_1 --------
> Rule 1 <
BitwiseOR_1-> % BitwiseAND BitwiseOR_1     FIRST['TempFirstY'] { '%' }
BEGIN % ******
  Add BitwiseOR_1-> % BitwiseAND BitwiseOR_1 ==> Table(BitwiseOR_1, %)
END % ^^^^^^^
BitwiseOR_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['BitwiseOR_1'] { '=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP',')'
 }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------BitwiseOR_1-> % BitwiseAND BitwiseOR_1--------
Is 'ϵ' Not Contained in 'FIRST['%']'
			Compare 'ϵ' To '%'
TRUE
FIRST['TempFirstY'] { } U FIRST['%'] { '%' } => FIRST['TempFirstY'] { '%' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '%' }
 '%'
--------BitwiseOR_1-> ϵ--------
FIRST['TempFirstY'] { '%' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '%','ϵ' }
FIRST['TempFirstY'] { '%','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '%','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 '='
Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, =)
 '#'
Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, #)
 '>'
Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, >)
 '<'
Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, <)
 'GTEQ'
Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, GTEQ)
 'LTEQ'
Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, LTEQ)
 'AND'
Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, AND)
 'OR'
Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, OR)
 ';'
Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, ;)
 'THEN'
Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, THEN)
 'STEP'
Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, STEP)
 ')'
Add BitwiseOR_1-> ϵ ==> Table(BitwiseOR_1, ))
Is $ in Set FOLLOW['BitwiseOR_1']
FALSE
  FIRST['TempFirstY'] { '%','ϵ' }
 '%'
 'ϵ'
------- Non Terminal: BitwiseAND --------
> Rule 1 <
BitwiseAND-> BitwiseXOR BitwiseAND_1     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add BitwiseAND-> BitwiseXOR BitwiseAND_1 ==> Table(BitwiseAND, -)
END - ^^^^^^^
BEGIN ( ******
  Add BitwiseAND-> BitwiseXOR BitwiseAND_1 ==> Table(BitwiseAND, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add BitwiseAND-> BitwiseXOR BitwiseAND_1 ==> Table(BitwiseAND, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add BitwiseAND-> BitwiseXOR BitwiseAND_1 ==> Table(BitwiseAND, *)
END * ^^^^^^^
BEGIN @ ******
  Add BitwiseAND-> BitwiseXOR BitwiseAND_1 ==> Table(BitwiseAND, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add BitwiseAND-> BitwiseXOR BitwiseAND_1 ==> Table(BitwiseAND, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add BitwiseAND-> BitwiseXOR BitwiseAND_1 ==> Table(BitwiseAND, IDENT)
END IDENT ^^^^^^^
FOLLOW['BitwiseAND'] { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP'
,')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------BitwiseAND-> BitwiseXOR BitwiseAND_1--------
Is 'ϵ' Not Contained in 'FIRST['BitwiseXOR']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['BitwiseXOR'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: BitwiseAND_1 --------
> Rule 1 <
BitwiseAND_1-> & BitwiseXOR BitwiseAND_1     FIRST['TempFirstY'] { '&' }
BEGIN & ******
  Add BitwiseAND_1-> & BitwiseXOR BitwiseAND_1 ==> Table(BitwiseAND_1, &)
END & ^^^^^^^
BitwiseAND_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['BitwiseAND_1'] { '%','=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP'
,')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------BitwiseAND_1-> & BitwiseXOR BitwiseAND_1--------
Is 'ϵ' Not Contained in 'FIRST['&']'
			Compare 'ϵ' To '&'
TRUE
FIRST['TempFirstY'] { } U FIRST['&'] { '&' } => FIRST['TempFirstY'] { '&' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '&' }
 '&'
--------BitwiseAND_1-> ϵ--------
FIRST['TempFirstY'] { '&' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '&','ϵ' }
FIRST['TempFirstY'] { '&','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '&','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 '%'
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, %)
 '='
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, =)
 '#'
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, #)
 '>'
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, >)
 '<'
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, <)
 'GTEQ'
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, GTEQ)
 'LTEQ'
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, LTEQ)
 'AND'
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, AND)
 'OR'
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, OR)
 ';'
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, ;)
 'THEN'
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, THEN)
 'STEP'
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, STEP)
 ')'
Add BitwiseAND_1-> ϵ ==> Table(BitwiseAND_1, ))
Is $ in Set FOLLOW['BitwiseAND_1']
FALSE
  FIRST['TempFirstY'] { '&','ϵ' }
 '&'
 'ϵ'
------- Non Terminal: BitwiseXOR --------
> Rule 1 <
BitwiseXOR-> AddExpr SimpleRelExpr_1     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add BitwiseXOR-> AddExpr SimpleRelExpr_1 ==> Table(BitwiseXOR, -)
END - ^^^^^^^
BEGIN ( ******
  Add BitwiseXOR-> AddExpr SimpleRelExpr_1 ==> Table(BitwiseXOR, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add BitwiseXOR-> AddExpr SimpleRelExpr_1 ==> Table(BitwiseXOR, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add BitwiseXOR-> AddExpr SimpleRelExpr_1 ==> Table(BitwiseXOR, *)
END * ^^^^^^^
BEGIN @ ******
  Add BitwiseXOR-> AddExpr SimpleRelExpr_1 ==> Table(BitwiseXOR, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add BitwiseXOR-> AddExpr SimpleRelExpr_1 ==> Table(BitwiseXOR, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add BitwiseXOR-> AddExpr SimpleRelExpr_1 ==> Table(BitwiseXOR, IDENT)
END IDENT ^^^^^^^
FOLLOW['BitwiseXOR'] { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN','STEP'
,')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------BitwiseXOR-> AddExpr SimpleRelExpr_1--------
Is 'ϵ' Not Contained in 'FIRST['AddExpr']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['AddExpr'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: SimpleRelExpr_1 --------
> Rule 1 <
SimpleRelExpr_1-> ! AddExpr SimpleRelExpr_1     FIRST['TempFirstY'] { '!' }
BEGIN ! ******
  Add SimpleRelExpr_1-> ! AddExpr SimpleRelExpr_1 ==> Table(SimpleRelExpr_1, !)
END ! ^^^^^^^
SimpleRelExpr_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['SimpleRelExpr_1'] { '&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN'
,'STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------SimpleRelExpr_1-> ! AddExpr SimpleRelExpr_1--------
Is 'ϵ' Not Contained in 'FIRST['!']'
			Compare 'ϵ' To '!'
TRUE
FIRST['TempFirstY'] { } U FIRST['!'] { '!' } => FIRST['TempFirstY'] { '!' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '!' }
 '!'
--------SimpleRelExpr_1-> ϵ--------
FIRST['TempFirstY'] { '!' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '!','ϵ' }
FIRST['TempFirstY'] { '!','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '!','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 '&'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, &)
 '%'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, %)
 '='
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, =)
 '#'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, #)
 '>'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, >)
 '<'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, <)
 'GTEQ'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, GTEQ)
 'LTEQ'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, LTEQ)
 'AND'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, AND)
 'OR'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, OR)
 ';'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, ;)
 'THEN'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, THEN)
 'STEP'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, STEP)
 ')'
Add SimpleRelExpr_1-> ϵ ==> Table(SimpleRelExpr_1, ))
Is $ in Set FOLLOW['SimpleRelExpr_1']
FALSE
  FIRST['TempFirstY'] { '!','ϵ' }
 '!'
 'ϵ'
------- Non Terminal: AddExpr --------
> Rule 1 <
AddExpr-> ShifExpr AddExpr_1     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add AddExpr-> ShifExpr AddExpr_1 ==> Table(AddExpr, -)
END - ^^^^^^^
BEGIN ( ******
  Add AddExpr-> ShifExpr AddExpr_1 ==> Table(AddExpr, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add AddExpr-> ShifExpr AddExpr_1 ==> Table(AddExpr, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add AddExpr-> ShifExpr AddExpr_1 ==> Table(AddExpr, *)
END * ^^^^^^^
BEGIN @ ******
  Add AddExpr-> ShifExpr AddExpr_1 ==> Table(AddExpr, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add AddExpr-> ShifExpr AddExpr_1 ==> Table(AddExpr, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add AddExpr-> ShifExpr AddExpr_1 ==> Table(AddExpr, IDENT)
END IDENT ^^^^^^^
FOLLOW['AddExpr'] { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN'
,'STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------AddExpr-> ShifExpr AddExpr_1--------
Is 'ϵ' Not Contained in 'FIRST['ShifExpr']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['ShifExpr'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: AddExpr_1 --------
> Rule 1 <
AddExpr_1-> + ShifExpr AddExpr_1     FIRST['TempFirstY'] { '+' }
BEGIN + ******
  Add AddExpr_1-> + ShifExpr AddExpr_1 ==> Table(AddExpr_1, +)
END + ^^^^^^^
AddExpr_1-> - ShifExpr AddExpr_1     FIRST['TempFirstY'] { '-' }
BEGIN - ******
  Add AddExpr_1-> - ShifExpr AddExpr_1 ==> Table(AddExpr_1, -)
END - ^^^^^^^
AddExpr_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add AddExpr_1-> ϵ ==> Table(AddExpr_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['AddExpr_1'] { '!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',';','THEN'
,'STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------AddExpr_1-> + ShifExpr AddExpr_1--------
Is 'ϵ' Not Contained in 'FIRST['+']'
			Compare 'ϵ' To '+'
TRUE
FIRST['TempFirstY'] { } U FIRST['+'] { '+' } => FIRST['TempFirstY'] { '+' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '+' }
 '+'
--------AddExpr_1-> - ShifExpr AddExpr_1--------
Is 'ϵ' Not Contained in 'FIRST['-']'
			Compare 'ϵ' To '-'
TRUE
FIRST['TempFirstY'] { '+' } U FIRST['-'] { '-' } => FIRST['TempFirstY'] { '+','-' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '+','-' }
 '+'
 '-'
--------AddExpr_1-> ϵ--------
FIRST['TempFirstY'] { '+','-' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '+','-','ϵ' }
FIRST['TempFirstY'] { '+','-','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '+','-','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 '!'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, !)
 '&'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, &)
 '%'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, %)
 '='
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, =)
 '#'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, #)
 '>'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, >)
 '<'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, <)
 'GTEQ'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, GTEQ)
 'LTEQ'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, LTEQ)
 'AND'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, AND)
 'OR'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, OR)
 ';'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, ;)
 'THEN'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, THEN)
 'STEP'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, STEP)
 ')'
Add AddExpr_1-> ϵ ==> Table(AddExpr_1, ))
Is $ in Set FOLLOW['AddExpr_1']
FALSE
  FIRST['TempFirstY'] { '+','-','ϵ' }
 '+'
 '-'
 'ϵ'
------- Non Terminal: ShifExpr --------
> Rule 1 <
ShifExpr-> MultExpr ShiftExpr_1     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add ShifExpr-> MultExpr ShiftExpr_1 ==> Table(ShifExpr, -)
END - ^^^^^^^
BEGIN ( ******
  Add ShifExpr-> MultExpr ShiftExpr_1 ==> Table(ShifExpr, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add ShifExpr-> MultExpr ShiftExpr_1 ==> Table(ShifExpr, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add ShifExpr-> MultExpr ShiftExpr_1 ==> Table(ShifExpr, *)
END * ^^^^^^^
BEGIN @ ******
  Add ShifExpr-> MultExpr ShiftExpr_1 ==> Table(ShifExpr, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add ShifExpr-> MultExpr ShiftExpr_1 ==> Table(ShifExpr, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add ShifExpr-> MultExpr ShiftExpr_1 ==> Table(ShifExpr, IDENT)
END IDENT ^^^^^^^
FOLLOW['ShifExpr'] { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR',';'
,'THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ShifExpr-> MultExpr ShiftExpr_1--------
Is 'ϵ' Not Contained in 'FIRST['MultExpr']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['MultExpr'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: ShiftExpr_1 --------
> Rule 1 <
ShiftExpr_1-> LSH MultExpr ShiftExpr_1     FIRST['TempFirstY'] { 'LSH' }
BEGIN LSH ******
  Add ShiftExpr_1-> LSH MultExpr ShiftExpr_1 ==> Table(ShiftExpr_1, LSH)
END LSH ^^^^^^^
ShiftExpr_1-> RSH MultExpr ShiftExpr_1     FIRST['TempFirstY'] { 'RSH' }
BEGIN RSH ******
  Add ShiftExpr_1-> RSH MultExpr ShiftExpr_1 ==> Table(ShiftExpr_1, RSH)
END RSH ^^^^^^^
ShiftExpr_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['ShiftExpr_1'] { '+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND','OR'
,';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ShiftExpr_1-> LSH MultExpr ShiftExpr_1--------
Is 'ϵ' Not Contained in 'FIRST['LSH']'
			Compare 'ϵ' To 'LSH'
TRUE
FIRST['TempFirstY'] { } U FIRST['LSH'] { 'LSH' } => FIRST['TempFirstY'] { 'LSH' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'LSH' }
 'LSH'
--------ShiftExpr_1-> RSH MultExpr ShiftExpr_1--------
Is 'ϵ' Not Contained in 'FIRST['RSH']'
			Compare 'ϵ' To 'RSH'
TRUE
FIRST['TempFirstY'] { 'LSH' } U FIRST['RSH'] { 'RSH' } => FIRST['TempFirstY'] { 'LSH','RSH' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'LSH','RSH' }
 'LSH'
 'RSH'
--------ShiftExpr_1-> ϵ--------
FIRST['TempFirstY'] { 'LSH','RSH' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'LSH','RSH','ϵ' }
FIRST['TempFirstY'] { 'LSH','RSH','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'LSH','RSH','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 '+'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, +)
 '-'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, -)
 '!'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, !)
 '&'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, &)
 '%'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, %)
 '='
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, =)
 '#'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, #)
 '>'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, >)
 '<'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, <)
 'GTEQ'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, GTEQ)
 'LTEQ'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, LTEQ)
 'AND'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, AND)
 'OR'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, OR)
 ';'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, ;)
 'THEN'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, THEN)
 'STEP'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, STEP)
 ')'
Add ShiftExpr_1-> ϵ ==> Table(ShiftExpr_1, ))
Is $ in Set FOLLOW['ShiftExpr_1']
FALSE
  FIRST['TempFirstY'] { 'LSH','RSH','ϵ' }
 'LSH'
 'RSH'
 'ϵ'
------- Non Terminal: MultExpr --------
> Rule 1 <
MultExpr-> Unary MultExpr_1     FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN - ******
  Add MultExpr-> Unary MultExpr_1 ==> Table(MultExpr, -)
END - ^^^^^^^
BEGIN ( ******
  Add MultExpr-> Unary MultExpr_1 ==> Table(MultExpr, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add MultExpr-> Unary MultExpr_1 ==> Table(MultExpr, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add MultExpr-> Unary MultExpr_1 ==> Table(MultExpr, *)
END * ^^^^^^^
BEGIN @ ******
  Add MultExpr-> Unary MultExpr_1 ==> Table(MultExpr, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add MultExpr-> Unary MultExpr_1 ==> Table(MultExpr, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add MultExpr-> Unary MultExpr_1 ==> Table(MultExpr, IDENT)
END IDENT ^^^^^^^
FOLLOW['MultExpr'] { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ','AND'
,'OR',';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------MultExpr-> Unary MultExpr_1--------
Is 'ϵ' Not Contained in 'FIRST['Unary']'
			Compare 'ϵ' To '-'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['Unary'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: MultExpr_1 --------
> Rule 1 <
MultExpr_1-> * Unary MultExpr_1     FIRST['TempFirstY'] { '*' }
BEGIN * ******
  Add MultExpr_1-> * Unary MultExpr_1 ==> Table(MultExpr_1, *)
END * ^^^^^^^
MultExpr_1-> / Unary MultExpr_1     FIRST['TempFirstY'] { '/' }
BEGIN / ******
  Add MultExpr_1-> / Unary MultExpr_1 ==> Table(MultExpr_1, /)
END / ^^^^^^^
MultExpr_1-> MOD Unary MultExpr_1     FIRST['TempFirstY'] { 'MOD' }
BEGIN MOD ******
  Add MultExpr_1-> MOD Unary MultExpr_1 ==> Table(MultExpr_1, MOD)
END MOD ^^^^^^^
MultExpr_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add MultExpr_1-> ϵ ==> Table(MultExpr_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['MultExpr_1'] { 'LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ','LTEQ'
,'AND','OR',';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------MultExpr_1-> * Unary MultExpr_1--------
Is 'ϵ' Not Contained in 'FIRST['*']'
			Compare 'ϵ' To '*'
TRUE
FIRST['TempFirstY'] { } U FIRST['*'] { '*' } => FIRST['TempFirstY'] { '*' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '*' }
 '*'
--------MultExpr_1-> / Unary MultExpr_1--------
Is 'ϵ' Not Contained in 'FIRST['/']'
			Compare 'ϵ' To '/'
TRUE
FIRST['TempFirstY'] { '*' } U FIRST['/'] { '/' } => FIRST['TempFirstY'] { '*','/' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '*','/' }
 '*'
 '/'
--------MultExpr_1-> MOD Unary MultExpr_1--------
Is 'ϵ' Not Contained in 'FIRST['MOD']'
			Compare 'ϵ' To 'MOD'
TRUE
FIRST['TempFirstY'] { '*','/' } U FIRST['MOD'] { 'MOD' } => FIRST['TempFirstY'] { '*','/','MOD' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '*','/','MOD' }
 '*'
 '/'
 'MOD'
--------MultExpr_1-> ϵ--------
FIRST['TempFirstY'] { '*','/','MOD' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '*','/','MOD','ϵ' }
FIRST['TempFirstY'] { '*','/','MOD','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '*','/','MOD','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 'LSH'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, LSH)
 'RSH'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, RSH)
 '+'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, +)
 '-'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, -)
 '!'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, !)
 '&'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, &)
 '%'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, %)
 '='
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, =)
 '#'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, #)
 '>'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, >)
 '<'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, <)
 'GTEQ'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, GTEQ)
 'LTEQ'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, LTEQ)
 'AND'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, AND)
 'OR'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, OR)
 ';'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, ;)
 'THEN'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, THEN)
 'STEP'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, STEP)
 ')'
Add MultExpr_1-> ϵ ==> Table(MultExpr_1, ))
Is $ in Set FOLLOW['MultExpr_1']
FALSE
  FIRST['TempFirstY'] { '*','/','MOD','ϵ' }
 '*'
 '/'
 'MOD'
 'ϵ'
------- Non Terminal: Unary --------
> Rule 1 <
Unary-> - Unary     FIRST['TempFirstY'] { '-' }
BEGIN - ******
  Add Unary-> - Unary ==> Table(Unary, -)
END - ^^^^^^^
Unary-> Factor     FIRST['TempFirstY'] { '(','NUMBER','*','@','FUNC_IDENT','IDENT' }
BEGIN ( ******
  Add Unary-> Factor ==> Table(Unary, ()
END ( ^^^^^^^
BEGIN NUMBER ******
  Add Unary-> Factor ==> Table(Unary, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add Unary-> Factor ==> Table(Unary, *)
END * ^^^^^^^
BEGIN @ ******
  Add Unary-> Factor ==> Table(Unary, @)
END @ ^^^^^^^
BEGIN FUNC_IDENT ******
  Add Unary-> Factor ==> Table(Unary, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
BEGIN IDENT ******
  Add Unary-> Factor ==> Table(Unary, IDENT)
END IDENT ^^^^^^^
FOLLOW['Unary'] { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ'
,'LTEQ','AND','OR',';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Unary-> - Unary--------
Is 'ϵ' Not Contained in 'FIRST['-']'
			Compare 'ϵ' To '-'
TRUE
FIRST['TempFirstY'] { } U FIRST['-'] { '-' } => FIRST['TempFirstY'] { '-' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-' }
 '-'
--------Unary-> Factor--------
Is 'ϵ' Not Contained in 'FIRST['Factor']'
			Compare 'ϵ' To '('
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
			Compare 'ϵ' To 'FUNC_IDENT'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { '-' } U FIRST['Factor'] { '(','NUMBER','*','@','FUNC_IDENT','IDENT' } => FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '-','(','NUMBER','*','@','FUNC_IDENT','IDENT' }
 '-'
 '('
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 'IDENT'
------- Non Terminal: Factor --------
> Rule 1 <
Factor-> BaseCompConst     FIRST['TempFirstY'] { 'NUMBER','*','@' }
BEGIN NUMBER ******
  Add Factor-> BaseCompConst ==> Table(Factor, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add Factor-> BaseCompConst ==> Table(Factor, *)
END * ^^^^^^^
BEGIN @ ******
  Add Factor-> BaseCompConst ==> Table(Factor, @)
END @ ^^^^^^^
Factor-> FUNCcall     FIRST['TempFirstY'] { 'FUNC_IDENT' }
BEGIN FUNC_IDENT ******
  Add Factor-> FUNCcall ==> Table(Factor, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
Factor-> ( ArithExpr )     FIRST['TempFirstY'] { '(' }
BEGIN ( ******
  Add Factor-> ( ArithExpr ) ==> Table(Factor, ()
END ( ^^^^^^^
Factor-> MemContents     FIRST['TempFirstY'] { 'IDENT' }
BEGIN IDENT ******
  Add Factor-> MemContents ==> Table(Factor, IDENT)
END IDENT ^^^^^^^
FOLLOW['Factor'] { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ'
,'LTEQ','AND','OR',';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Factor-> BaseCompConst--------
Is 'ϵ' Not Contained in 'FIRST['BaseCompConst']'
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
TRUE
FIRST['TempFirstY'] { } U FIRST['BaseCompConst'] { 'NUMBER','*','@' } => FIRST['TempFirstY'] { 'NUMBER','*','@' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'NUMBER','*','@' }
 'NUMBER'
 '*'
 '@'
--------Factor-> FUNCcall--------
Is 'ϵ' Not Contained in 'FIRST['FUNCcall']'
			Compare 'ϵ' To 'FUNC_IDENT'
TRUE
FIRST['TempFirstY'] { 'NUMBER','*','@' } U FIRST['FUNCcall'] { 'FUNC_IDENT' } => FIRST['TempFirstY'] { 'NUMBER','*','@','FUNC_IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'NUMBER','*','@','FUNC_IDENT' }
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
--------Factor-> ( ArithExpr )--------
Is 'ϵ' Not Contained in 'FIRST['(']'
			Compare 'ϵ' To '('
TRUE
FIRST['TempFirstY'] { 'NUMBER','*','@','FUNC_IDENT' } U FIRST['('] { '(' } => FIRST['TempFirstY'] { 'NUMBER','*','@','FUNC_IDENT','(' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'NUMBER','*','@','FUNC_IDENT','(' }
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 '('
--------Factor-> MemContents--------
Is 'ϵ' Not Contained in 'FIRST['MemContents']'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { 'NUMBER','*','@','FUNC_IDENT','(' } U FIRST['MemContents'] { 'IDENT' } => FIRST['TempFirstY'] { 'NUMBER','*','@','FUNC_IDENT','(','IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'NUMBER','*','@','FUNC_IDENT','(','IDENT' }
 'NUMBER'
 '*'
 '@'
 'FUNC_IDENT'
 '('
 'IDENT'
------- Non Terminal: FUNCcall --------
> Rule 1 <
FUNCcall-> FuncIdent ( IdentList )     FIRST['TempFirstY'] { 'FUNC_IDENT' }
BEGIN FUNC_IDENT ******
  Add FUNCcall-> FuncIdent ( IdentList ) ==> Table(FUNCcall, FUNC_IDENT)
END FUNC_IDENT ^^^^^^^
FOLLOW['FUNCcall'] { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<','GTEQ'
,'LTEQ','AND','OR',';','THEN','STEP',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------FUNCcall-> FuncIdent ( IdentList )--------
Is 'ϵ' Not Contained in 'FIRST['FuncIdent']'
			Compare 'ϵ' To 'FUNC_IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['FuncIdent'] { 'FUNC_IDENT' } => FIRST['TempFirstY'] { 'FUNC_IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'FUNC_IDENT' }
 'FUNC_IDENT'
------- Non Terminal: IdentList --------
> Rule 1 <
IdentList-> MemContents IdentList_1     FIRST['TempFirstY'] { 'IDENT' }
BEGIN IDENT ******
  Add IdentList-> MemContents IdentList_1 ==> Table(IdentList, IDENT)
END IDENT ^^^^^^^
FOLLOW['IdentList'] { ')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------IdentList-> MemContents IdentList_1--------
Is 'ϵ' Not Contained in 'FIRST['MemContents']'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['MemContents'] { 'IDENT' } => FIRST['TempFirstY'] { 'IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'IDENT' }
 'IDENT'
------- Non Terminal: IdentList_1 --------
> Rule 1 <
IdentList_1-> , MemContents IdentList_1     FIRST['TempFirstY'] { ',' }
BEGIN , ******
  Add IdentList_1-> , MemContents IdentList_1 ==> Table(IdentList_1, ,)
END , ^^^^^^^
IdentList_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add IdentList_1-> ϵ ==> Table(IdentList_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['IdentList_1'] { ')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------IdentList_1-> , MemContents IdentList_1--------
Is 'ϵ' Not Contained in 'FIRST[',']'
			Compare 'ϵ' To ','
TRUE
FIRST['TempFirstY'] { } U FIRST[','] { ',' } => FIRST['TempFirstY'] { ',' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { ',' }
 ','
--------IdentList_1-> ϵ--------
FIRST['TempFirstY'] { ',' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ',','ϵ' }
FIRST['TempFirstY'] { ',','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ',','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 ')'
Add IdentList_1-> ϵ ==> Table(IdentList_1, ))
Is $ in Set FOLLOW['IdentList_1']
FALSE
  FIRST['TempFirstY'] { ',','ϵ' }
 ','
 'ϵ'
------- Non Terminal: FundType --------
> Rule 1 <
FundType-> BOOL     FIRST['TempFirstY'] { 'BOOL' }
BEGIN BOOL ******
  Add FundType-> BOOL ==> Table(FundType, BOOL)
END BOOL ^^^^^^^
FundType-> CHAR OptModifier     FIRST['TempFirstY'] { 'CHAR' }
BEGIN CHAR ******
  Add FundType-> CHAR OptModifier ==> Table(FundType, CHAR)
END CHAR ^^^^^^^
FundType-> BYTE OptModifier     FIRST['TempFirstY'] { 'BYTE' }
BEGIN BYTE ******
  Add FundType-> BYTE OptModifier ==> Table(FundType, BYTE)
END BYTE ^^^^^^^
FundType-> INT OptModifier     FIRST['TempFirstY'] { 'INT' }
BEGIN INT ******
  Add FundType-> INT OptModifier ==> Table(FundType, INT)
END INT ^^^^^^^
FundType-> CARD OptModifier     FIRST['TempFirstY'] { 'CARD' }
BEGIN CARD ******
  Add FundType-> CARD OptModifier ==> Table(FundType, CARD)
END CARD ^^^^^^^
FOLLOW['FundType'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------FundType-> BOOL--------
Is 'ϵ' Not Contained in 'FIRST['BOOL']'
			Compare 'ϵ' To 'BOOL'
TRUE
FIRST['TempFirstY'] { } U FIRST['BOOL'] { 'BOOL' } => FIRST['TempFirstY'] { 'BOOL' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'BOOL' }
 'BOOL'
--------FundType-> CHAR OptModifier--------
Is 'ϵ' Not Contained in 'FIRST['CHAR']'
			Compare 'ϵ' To 'CHAR'
TRUE
FIRST['TempFirstY'] { 'BOOL' } U FIRST['CHAR'] { 'CHAR' } => FIRST['TempFirstY'] { 'BOOL','CHAR' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'BOOL','CHAR' }
 'BOOL'
 'CHAR'
--------FundType-> BYTE OptModifier--------
Is 'ϵ' Not Contained in 'FIRST['BYTE']'
			Compare 'ϵ' To 'BYTE'
TRUE
FIRST['TempFirstY'] { 'BOOL','CHAR' } U FIRST['BYTE'] { 'BYTE' } => FIRST['TempFirstY'] { 'BOOL','CHAR','BYTE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'BOOL','CHAR','BYTE' }
 'BOOL'
 'CHAR'
 'BYTE'
--------FundType-> INT OptModifier--------
Is 'ϵ' Not Contained in 'FIRST['INT']'
			Compare 'ϵ' To 'INT'
TRUE
FIRST['TempFirstY'] { 'BOOL','CHAR','BYTE' } U FIRST['INT'] { 'INT' } => FIRST['TempFirstY'] { 'BOOL','CHAR','BYTE','INT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'BOOL','CHAR','BYTE','INT' }
 'BOOL'
 'CHAR'
 'BYTE'
 'INT'
--------FundType-> CARD OptModifier--------
Is 'ϵ' Not Contained in 'FIRST['CARD']'
			Compare 'ϵ' To 'CARD'
TRUE
FIRST['TempFirstY'] { 'BOOL','CHAR','BYTE','INT' } U FIRST['CARD'] { 'CARD' } => FIRST['TempFirstY'] { 'BOOL','CHAR','BYTE','INT','CARD' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'BOOL','CHAR','BYTE','INT','CARD' }
 'BOOL'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
------- Non Terminal: OptModifier --------
> Rule 1 <
OptModifier-> POINTER     FIRST['TempFirstY'] { 'POINTER' }
BEGIN POINTER ******
  Add OptModifier-> POINTER ==> Table(OptModifier, POINTER)
END POINTER ^^^^^^^
OptModifier-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add OptModifier-> ϵ ==> Table(OptModifier, ϵ)
END ϵ ^^^^^^^
FOLLOW['OptModifier'] { 'IDENT' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------OptModifier-> POINTER--------
Is 'ϵ' Not Contained in 'FIRST['POINTER']'
			Compare 'ϵ' To 'POINTER'
TRUE
FIRST['TempFirstY'] { } U FIRST['POINTER'] { 'POINTER' } => FIRST['TempFirstY'] { 'POINTER' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'POINTER' }
 'POINTER'
--------OptModifier-> ϵ--------
FIRST['TempFirstY'] { 'POINTER' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'POINTER','ϵ' }
FIRST['TempFirstY'] { 'POINTER','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'POINTER','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 'IDENT'
Add OptModifier-> ϵ ==> Table(OptModifier, IDENT)
Is $ in Set FOLLOW['OptModifier']
FALSE
  FIRST['TempFirstY'] { 'POINTER','ϵ' }
 'POINTER'
 'ϵ'
------- Non Terminal: ParamList --------
> Rule 1 <
ParamList-> Param ParamList_1     FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
BEGIN RECORDTYPE ******
  Add ParamList-> Param ParamList_1 ==> Table(ParamList, RECORDTYPE)
END RECORDTYPE ^^^^^^^
BEGIN CHAR ******
  Add ParamList-> Param ParamList_1 ==> Table(ParamList, CHAR)
END CHAR ^^^^^^^
BEGIN BYTE ******
  Add ParamList-> Param ParamList_1 ==> Table(ParamList, BYTE)
END BYTE ^^^^^^^
BEGIN INT ******
  Add ParamList-> Param ParamList_1 ==> Table(ParamList, INT)
END INT ^^^^^^^
BEGIN CARD ******
  Add ParamList-> Param ParamList_1 ==> Table(ParamList, CARD)
END CARD ^^^^^^^
BEGIN BOOL ******
  Add ParamList-> Param ParamList_1 ==> Table(ParamList, BOOL)
END BOOL ^^^^^^^
FOLLOW['ParamList'] { ')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ParamList-> Param ParamList_1--------
Is 'ϵ' Not Contained in 'FIRST['Param']'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
FIRST['TempFirstY'] { } U FIRST['Param'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
------- Non Terminal: ParamList_1 --------
> Rule 1 <
ParamList_1-> , Param ParamList_1     FIRST['TempFirstY'] { ',' }
BEGIN , ******
  Add ParamList_1-> , Param ParamList_1 ==> Table(ParamList_1, ,)
END , ^^^^^^^
ParamList_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add ParamList_1-> ϵ ==> Table(ParamList_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['ParamList_1'] { ')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ParamList_1-> , Param ParamList_1--------
Is 'ϵ' Not Contained in 'FIRST[',']'
			Compare 'ϵ' To ','
TRUE
FIRST['TempFirstY'] { } U FIRST[','] { ',' } => FIRST['TempFirstY'] { ',' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { ',' }
 ','
--------ParamList_1-> ϵ--------
FIRST['TempFirstY'] { ',' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ',','ϵ' }
FIRST['TempFirstY'] { ',','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ',','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 ')'
Add ParamList_1-> ϵ ==> Table(ParamList_1, ))
Is $ in Set FOLLOW['ParamList_1']
FALSE
  FIRST['TempFirstY'] { ',','ϵ' }
 ','
 'ϵ'
------- Non Terminal: Param --------
> Rule 1 <
Param-> RECORDTYPE OptModifier Ident     FIRST['TempFirstY'] { 'RECORDTYPE' }
BEGIN RECORDTYPE ******
  Add Param-> RECORDTYPE OptModifier Ident ==> Table(Param, RECORDTYPE)
END RECORDTYPE ^^^^^^^
Param-> CHAR OptModifier Ident     FIRST['TempFirstY'] { 'CHAR' }
BEGIN CHAR ******
  Add Param-> CHAR OptModifier Ident ==> Table(Param, CHAR)
END CHAR ^^^^^^^
Param-> BYTE OptModifier Ident     FIRST['TempFirstY'] { 'BYTE' }
BEGIN BYTE ******
  Add Param-> BYTE OptModifier Ident ==> Table(Param, BYTE)
END BYTE ^^^^^^^
Param-> INT OptModifier Ident     FIRST['TempFirstY'] { 'INT' }
BEGIN INT ******
  Add Param-> INT OptModifier Ident ==> Table(Param, INT)
END INT ^^^^^^^
Param-> CARD OptModifier Ident     FIRST['TempFirstY'] { 'CARD' }
BEGIN CARD ******
  Add Param-> CARD OptModifier Ident ==> Table(Param, CARD)
END CARD ^^^^^^^
Param-> BOOL OptModifier Ident     FIRST['TempFirstY'] { 'BOOL' }
BEGIN BOOL ******
  Add Param-> BOOL OptModifier Ident ==> Table(Param, BOOL)
END BOOL ^^^^^^^
FOLLOW['Param'] { ',',')' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Param-> RECORDTYPE OptModifier Ident--------
Is 'ϵ' Not Contained in 'FIRST['RECORDTYPE']'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
FIRST['TempFirstY'] { } U FIRST['RECORDTYPE'] { 'RECORDTYPE' } => FIRST['TempFirstY'] { 'RECORDTYPE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE' }
 'RECORDTYPE'
--------Param-> CHAR OptModifier Ident--------
Is 'ϵ' Not Contained in 'FIRST['CHAR']'
			Compare 'ϵ' To 'CHAR'
TRUE
FIRST['TempFirstY'] { 'RECORDTYPE' } U FIRST['CHAR'] { 'CHAR' } => FIRST['TempFirstY'] { 'RECORDTYPE','CHAR' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE','CHAR' }
 'RECORDTYPE'
 'CHAR'
--------Param-> BYTE OptModifier Ident--------
Is 'ϵ' Not Contained in 'FIRST['BYTE']'
			Compare 'ϵ' To 'BYTE'
TRUE
FIRST['TempFirstY'] { 'RECORDTYPE','CHAR' } U FIRST['BYTE'] { 'BYTE' } => FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
--------Param-> INT OptModifier Ident--------
Is 'ϵ' Not Contained in 'FIRST['INT']'
			Compare 'ϵ' To 'INT'
TRUE
FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE' } U FIRST['INT'] { 'INT' } => FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
--------Param-> CARD OptModifier Ident--------
Is 'ϵ' Not Contained in 'FIRST['CARD']'
			Compare 'ϵ' To 'CARD'
TRUE
FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT' } U FIRST['CARD'] { 'CARD' } => FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
--------Param-> BOOL OptModifier Ident--------
Is 'ϵ' Not Contained in 'FIRST['BOOL']'
			Compare 'ϵ' To 'BOOL'
TRUE
FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD' } U FIRST['BOOL'] { 'BOOL' } => FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
------- Non Terminal: VarDecls --------
> Rule 1 <
VarDecls-> RECORDTYPE Modifier VarList     FIRST['TempFirstY'] { 'RECORDTYPE' }
BEGIN RECORDTYPE ******
  Add VarDecls-> RECORDTYPE Modifier VarList ==> Table(VarDecls, RECORDTYPE)
END RECORDTYPE ^^^^^^^
VarDecls-> CHAR Modifier VarList     FIRST['TempFirstY'] { 'CHAR' }
BEGIN CHAR ******
  Add VarDecls-> CHAR Modifier VarList ==> Table(VarDecls, CHAR)
END CHAR ^^^^^^^
VarDecls-> BYTE Modifier VarList     FIRST['TempFirstY'] { 'BYTE' }
BEGIN BYTE ******
  Add VarDecls-> BYTE Modifier VarList ==> Table(VarDecls, BYTE)
END BYTE ^^^^^^^
VarDecls-> INT Modifier VarList     FIRST['TempFirstY'] { 'INT' }
BEGIN INT ******
  Add VarDecls-> INT Modifier VarList ==> Table(VarDecls, INT)
END INT ^^^^^^^
VarDecls-> CARD Modifier VarList     FIRST['TempFirstY'] { 'CARD' }
BEGIN CARD ******
  Add VarDecls-> CARD Modifier VarList ==> Table(VarDecls, CARD)
END CARD ^^^^^^^
VarDecls-> BOOL Modifier VarList     FIRST['TempFirstY'] { 'BOOL' }
BEGIN BOOL ******
  Add VarDecls-> BOOL Modifier VarList ==> Table(VarDecls, BOOL)
END BOOL ^^^^^^^
FOLLOW['VarDecls'] { ';',']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------VarDecls-> RECORDTYPE Modifier VarList--------
Is 'ϵ' Not Contained in 'FIRST['RECORDTYPE']'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
FIRST['TempFirstY'] { } U FIRST['RECORDTYPE'] { 'RECORDTYPE' } => FIRST['TempFirstY'] { 'RECORDTYPE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE' }
 'RECORDTYPE'
--------VarDecls-> CHAR Modifier VarList--------
Is 'ϵ' Not Contained in 'FIRST['CHAR']'
			Compare 'ϵ' To 'CHAR'
TRUE
FIRST['TempFirstY'] { 'RECORDTYPE' } U FIRST['CHAR'] { 'CHAR' } => FIRST['TempFirstY'] { 'RECORDTYPE','CHAR' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE','CHAR' }
 'RECORDTYPE'
 'CHAR'
--------VarDecls-> BYTE Modifier VarList--------
Is 'ϵ' Not Contained in 'FIRST['BYTE']'
			Compare 'ϵ' To 'BYTE'
TRUE
FIRST['TempFirstY'] { 'RECORDTYPE','CHAR' } U FIRST['BYTE'] { 'BYTE' } => FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
--------VarDecls-> INT Modifier VarList--------
Is 'ϵ' Not Contained in 'FIRST['INT']'
			Compare 'ϵ' To 'INT'
TRUE
FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE' } U FIRST['INT'] { 'INT' } => FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
--------VarDecls-> CARD Modifier VarList--------
Is 'ϵ' Not Contained in 'FIRST['CARD']'
			Compare 'ϵ' To 'CARD'
TRUE
FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT' } U FIRST['CARD'] { 'CARD' } => FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
--------VarDecls-> BOOL Modifier VarList--------
Is 'ϵ' Not Contained in 'FIRST['BOOL']'
			Compare 'ϵ' To 'BOOL'
TRUE
FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD' } U FIRST['BOOL'] { 'BOOL' } => FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
------- Non Terminal: SysDecls --------
> Rule 1 <
SysDecls-> SysDecl SysDecls_1     FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
,'ϵ' }
BEGIN DEFINE ******
  Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, DEFINE)
END DEFINE ^^^^^^^
BEGIN TYPE ******
  Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, TYPE)
END TYPE ^^^^^^^
BEGIN RECORDTYPE ******
  Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, RECORDTYPE)
END RECORDTYPE ^^^^^^^
BEGIN CHAR ******
  Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, CHAR)
END CHAR ^^^^^^^
BEGIN BYTE ******
  Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, BYTE)
END BYTE ^^^^^^^
BEGIN INT ******
  Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, INT)
END INT ^^^^^^^
BEGIN CARD ******
  Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, CARD)
END CARD ^^^^^^^
BEGIN BOOL ******
  Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, BOOL)
END BOOL ^^^^^^^
BEGIN ϵ ******
  Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, ϵ)
END ϵ ^^^^^^^
FOLLOW['SysDecls'] { 'FUNC','PROC','UNTILL','EXIT','FOR','IF' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------SysDecls-> SysDecl SysDecls_1--------
Is 'ϵ' Not Contained in 'FIRST['SysDecl']'
			Compare 'ϵ' To 'DEFINE'
			Compare 'ϵ' To 'TYPE'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
			Compare 'ϵ' To 'ϵ'
FALSE
Is ϵ in Set FIRST['SysDecl']
TRUE
End of Y1Y2...Yk Chain
FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
 } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
,'ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 'FUNC'
Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, FUNC)
 'PROC'
Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, PROC)
 'UNTILL'
Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, UNTILL)
 'EXIT'
Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, EXIT)
 'FOR'
Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, FOR)
 'IF'
Add SysDecls-> SysDecl SysDecls_1 ==> Table(SysDecls, IF)
Is $ in Set FOLLOW['SysDecls']
FALSE
  FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
,'ϵ' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
 'ϵ'
------- Non Terminal: SysDecls_1 --------
> Rule 1 <
SysDecls_1-> ; SysDecl SysDecls_1     FIRST['TempFirstY'] { ';' }
BEGIN ; ******
  Add SysDecls_1-> ; SysDecl SysDecls_1 ==> Table(SysDecls_1, ;)
END ; ^^^^^^^
SysDecls_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add SysDecls_1-> ϵ ==> Table(SysDecls_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['SysDecls_1'] { 'FUNC','PROC','UNTILL','EXIT','FOR','IF' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------SysDecls_1-> ; SysDecl SysDecls_1--------
Is 'ϵ' Not Contained in 'FIRST[';']'
			Compare 'ϵ' To ';'
TRUE
FIRST['TempFirstY'] { } U FIRST[';'] { ';' } => FIRST['TempFirstY'] { ';' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { ';' }
 ';'
--------SysDecls_1-> ϵ--------
FIRST['TempFirstY'] { ';' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ';','ϵ' }
FIRST['TempFirstY'] { ';','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ';','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 'FUNC'
Add SysDecls_1-> ϵ ==> Table(SysDecls_1, FUNC)
 'PROC'
Add SysDecls_1-> ϵ ==> Table(SysDecls_1, PROC)
 'UNTILL'
Add SysDecls_1-> ϵ ==> Table(SysDecls_1, UNTILL)
 'EXIT'
Add SysDecls_1-> ϵ ==> Table(SysDecls_1, EXIT)
 'FOR'
Add SysDecls_1-> ϵ ==> Table(SysDecls_1, FOR)
 'IF'
Add SysDecls_1-> ϵ ==> Table(SysDecls_1, IF)
Is $ in Set FOLLOW['SysDecls_1']
FALSE
  FIRST['TempFirstY'] { ';','ϵ' }
 ';'
 'ϵ'
------- Non Terminal: SysDecl --------
> Rule 1 <
SysDecl-> DEFINE DefList     FIRST['TempFirstY'] { 'DEFINE' }
BEGIN DEFINE ******
  Add SysDecl-> DEFINE DefList ==> Table(SysDecl, DEFINE)
END DEFINE ^^^^^^^
SysDecl-> TYPE RecIdent     FIRST['TempFirstY'] { 'TYPE' }
BEGIN TYPE ******
  Add SysDecl-> TYPE RecIdent ==> Table(SysDecl, TYPE)
END TYPE ^^^^^^^
SysDecl-> RECORDTYPE Modifier VarList     FIRST['TempFirstY'] { 'RECORDTYPE' }
BEGIN RECORDTYPE ******
  Add SysDecl-> RECORDTYPE Modifier VarList ==> Table(SysDecl, RECORDTYPE)
END RECORDTYPE ^^^^^^^
SysDecl-> CHAR Modifier VarList     FIRST['TempFirstY'] { 'CHAR' }
BEGIN CHAR ******
  Add SysDecl-> CHAR Modifier VarList ==> Table(SysDecl, CHAR)
END CHAR ^^^^^^^
SysDecl-> BYTE Modifier VarList     FIRST['TempFirstY'] { 'BYTE' }
BEGIN BYTE ******
  Add SysDecl-> BYTE Modifier VarList ==> Table(SysDecl, BYTE)
END BYTE ^^^^^^^
SysDecl-> INT Modifier VarList     FIRST['TempFirstY'] { 'INT' }
BEGIN INT ******
  Add SysDecl-> INT Modifier VarList ==> Table(SysDecl, INT)
END INT ^^^^^^^
SysDecl-> CARD Modifier VarList     FIRST['TempFirstY'] { 'CARD' }
BEGIN CARD ******
  Add SysDecl-> CARD Modifier VarList ==> Table(SysDecl, CARD)
END CARD ^^^^^^^
SysDecl-> BOOL VarList     FIRST['TempFirstY'] { 'BOOL' }
BEGIN BOOL ******
  Add SysDecl-> BOOL VarList ==> Table(SysDecl, BOOL)
END BOOL ^^^^^^^
SysDecl-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add SysDecl-> ϵ ==> Table(SysDecl, ϵ)
END ϵ ^^^^^^^
FOLLOW['SysDecl'] { ';','FUNC','PROC','UNTILL','EXIT','FOR','IF' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------SysDecl-> DEFINE DefList--------
Is 'ϵ' Not Contained in 'FIRST['DEFINE']'
			Compare 'ϵ' To 'DEFINE'
TRUE
FIRST['TempFirstY'] { } U FIRST['DEFINE'] { 'DEFINE' } => FIRST['TempFirstY'] { 'DEFINE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'DEFINE' }
 'DEFINE'
--------SysDecl-> TYPE RecIdent--------
Is 'ϵ' Not Contained in 'FIRST['TYPE']'
			Compare 'ϵ' To 'TYPE'
TRUE
FIRST['TempFirstY'] { 'DEFINE' } U FIRST['TYPE'] { 'TYPE' } => FIRST['TempFirstY'] { 'DEFINE','TYPE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'DEFINE','TYPE' }
 'DEFINE'
 'TYPE'
--------SysDecl-> RECORDTYPE Modifier VarList--------
Is 'ϵ' Not Contained in 'FIRST['RECORDTYPE']'
			Compare 'ϵ' To 'RECORDTYPE'
TRUE
FIRST['TempFirstY'] { 'DEFINE','TYPE' } U FIRST['RECORDTYPE'] { 'RECORDTYPE' } => FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
--------SysDecl-> CHAR Modifier VarList--------
Is 'ϵ' Not Contained in 'FIRST['CHAR']'
			Compare 'ϵ' To 'CHAR'
TRUE
FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE' } U FIRST['CHAR'] { 'CHAR' } => FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
--------SysDecl-> BYTE Modifier VarList--------
Is 'ϵ' Not Contained in 'FIRST['BYTE']'
			Compare 'ϵ' To 'BYTE'
TRUE
FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR' } U FIRST['BYTE'] { 'BYTE' } => FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
--------SysDecl-> INT Modifier VarList--------
Is 'ϵ' Not Contained in 'FIRST['INT']'
			Compare 'ϵ' To 'INT'
TRUE
FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE' } U FIRST['INT'] { 'INT' } => FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
--------SysDecl-> CARD Modifier VarList--------
Is 'ϵ' Not Contained in 'FIRST['CARD']'
			Compare 'ϵ' To 'CARD'
TRUE
FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT' } U FIRST['CARD'] { 'CARD' } => FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
--------SysDecl-> BOOL VarList--------
Is 'ϵ' Not Contained in 'FIRST['BOOL']'
			Compare 'ϵ' To 'BOOL'
TRUE
FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD' } U FIRST['BOOL'] { 'BOOL' } => FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
 }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
 }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
--------SysDecl-> ϵ--------
FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
 } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
,'ϵ' }
FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
,'ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
,'ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 ';'
Add SysDecl-> ϵ ==> Table(SysDecl, ;)
 'FUNC'
Add SysDecl-> ϵ ==> Table(SysDecl, FUNC)
 'PROC'
Add SysDecl-> ϵ ==> Table(SysDecl, PROC)
 'UNTILL'
Add SysDecl-> ϵ ==> Table(SysDecl, UNTILL)
 'EXIT'
Add SysDecl-> ϵ ==> Table(SysDecl, EXIT)
 'FOR'
Add SysDecl-> ϵ ==> Table(SysDecl, FOR)
 'IF'
Add SysDecl-> ϵ ==> Table(SysDecl, IF)
Is $ in Set FOLLOW['SysDecl']
FALSE
  FIRST['TempFirstY'] { 'DEFINE','TYPE','RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL'
,'ϵ' }
 'DEFINE'
 'TYPE'
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
 'ϵ'
------- Non Terminal: VarList --------
> Rule 1 <
VarList-> VarName VarList_1     FIRST['TempFirstY'] { 'IDENT' }
BEGIN IDENT ******
  Add VarList-> VarName VarList_1 ==> Table(VarList, IDENT)
END IDENT ^^^^^^^
FOLLOW['VarList'] { ';','FUNC','PROC','UNTILL','EXIT','FOR','IF',']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------VarList-> VarName VarList_1--------
Is 'ϵ' Not Contained in 'FIRST['VarName']'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['VarName'] { 'IDENT' } => FIRST['TempFirstY'] { 'IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'IDENT' }
 'IDENT'
------- Non Terminal: VarList_1 --------
> Rule 1 <
VarList_1-> , VarName VarList_1     FIRST['TempFirstY'] { ',' }
BEGIN , ******
  Add VarList_1-> , VarName VarList_1 ==> Table(VarList_1, ,)
END , ^^^^^^^
VarList_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add VarList_1-> ϵ ==> Table(VarList_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['VarList_1'] { ';','FUNC','PROC','UNTILL','EXIT','FOR','IF',']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------VarList_1-> , VarName VarList_1--------
Is 'ϵ' Not Contained in 'FIRST[',']'
			Compare 'ϵ' To ','
TRUE
FIRST['TempFirstY'] { } U FIRST[','] { ',' } => FIRST['TempFirstY'] { ',' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { ',' }
 ','
--------VarList_1-> ϵ--------
FIRST['TempFirstY'] { ',' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ',','ϵ' }
FIRST['TempFirstY'] { ',','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ',','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 ';'
Add VarList_1-> ϵ ==> Table(VarList_1, ;)
 'FUNC'
Add VarList_1-> ϵ ==> Table(VarList_1, FUNC)
 'PROC'
Add VarList_1-> ϵ ==> Table(VarList_1, PROC)
 'UNTILL'
Add VarList_1-> ϵ ==> Table(VarList_1, UNTILL)
 'EXIT'
Add VarList_1-> ϵ ==> Table(VarList_1, EXIT)
 'FOR'
Add VarList_1-> ϵ ==> Table(VarList_1, FOR)
 'IF'
Add VarList_1-> ϵ ==> Table(VarList_1, IF)
 ']'
Add VarList_1-> ϵ ==> Table(VarList_1, ])
Is $ in Set FOLLOW['VarList_1']
FALSE
  FIRST['TempFirstY'] { ',','ϵ' }
 ','
 'ϵ'
------- Non Terminal: VarName --------
> Rule 1 <
VarName-> Ident OptInit     FIRST['TempFirstY'] { 'IDENT' }
BEGIN IDENT ******
  Add VarName-> Ident OptInit ==> Table(VarName, IDENT)
END IDENT ^^^^^^^
FOLLOW['VarName'] { ',',';','FUNC','PROC','UNTILL','EXIT','FOR','IF',']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------VarName-> Ident OptInit--------
Is 'ϵ' Not Contained in 'FIRST['Ident']'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['Ident'] { 'IDENT' } => FIRST['TempFirstY'] { 'IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'IDENT' }
 'IDENT'
------- Non Terminal: OptInit --------
> Rule 1 <
OptInit-> = CompConst     FIRST['TempFirstY'] { '=' }
BEGIN = ******
  Add OptInit-> = CompConst ==> Table(OptInit, =)
END = ^^^^^^^
OptInit-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add OptInit-> ϵ ==> Table(OptInit, ϵ)
END ϵ ^^^^^^^
FOLLOW['OptInit'] { ',',';','FUNC','PROC','UNTILL','EXIT','FOR','IF',']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------OptInit-> = CompConst--------
Is 'ϵ' Not Contained in 'FIRST['=']'
			Compare 'ϵ' To '='
TRUE
FIRST['TempFirstY'] { } U FIRST['='] { '=' } => FIRST['TempFirstY'] { '=' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '=' }
 '='
--------OptInit-> ϵ--------
FIRST['TempFirstY'] { '=' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '=','ϵ' }
FIRST['TempFirstY'] { '=','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '=','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 ','
Add OptInit-> ϵ ==> Table(OptInit, ,)
 ';'
Add OptInit-> ϵ ==> Table(OptInit, ;)
 'FUNC'
Add OptInit-> ϵ ==> Table(OptInit, FUNC)
 'PROC'
Add OptInit-> ϵ ==> Table(OptInit, PROC)
 'UNTILL'
Add OptInit-> ϵ ==> Table(OptInit, UNTILL)
 'EXIT'
Add OptInit-> ϵ ==> Table(OptInit, EXIT)
 'FOR'
Add OptInit-> ϵ ==> Table(OptInit, FOR)
 'IF'
Add OptInit-> ϵ ==> Table(OptInit, IF)
 ']'
Add OptInit-> ϵ ==> Table(OptInit, ])
Is $ in Set FOLLOW['OptInit']
FALSE
  FIRST['TempFirstY'] { '=','ϵ' }
 '='
 'ϵ'
------- Non Terminal: DefList --------
> Rule 1 <
DefList-> Def DefList_1     FIRST['TempFirstY'] { 'IDENT' }
BEGIN IDENT ******
  Add DefList-> Def DefList_1 ==> Table(DefList, IDENT)
END IDENT ^^^^^^^
FOLLOW['DefList'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------DefList-> Def DefList_1--------
Is 'ϵ' Not Contained in 'FIRST['Def']'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['Def'] { 'IDENT' } => FIRST['TempFirstY'] { 'IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'IDENT' }
 'IDENT'
------- Non Terminal: DefList_1 --------
> Rule 1 <
DefList_1-> , Def DefList_1     FIRST['TempFirstY'] { ',' }
BEGIN , ******
  Add DefList_1-> , Def DefList_1 ==> Table(DefList_1, ,)
END , ^^^^^^^
DefList_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add DefList_1-> ϵ ==> Table(DefList_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['DefList_1'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------DefList_1-> , Def DefList_1--------
Is 'ϵ' Not Contained in 'FIRST[',']'
			Compare 'ϵ' To ','
TRUE
FIRST['TempFirstY'] { } U FIRST[','] { ',' } => FIRST['TempFirstY'] { ',' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { ',' }
 ','
--------DefList_1-> ϵ--------
FIRST['TempFirstY'] { ',' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ',','ϵ' }
FIRST['TempFirstY'] { ',','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ',','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
Is $ in Set FOLLOW['DefList_1']
FALSE
  FIRST['TempFirstY'] { ',','ϵ' }
 ','
 'ϵ'
------- Non Terminal: Def --------
> Rule 1 <
Def-> Ident = CompConst     FIRST['TempFirstY'] { 'IDENT' }
BEGIN IDENT ******
  Add Def-> Ident = CompConst ==> Table(Def, IDENT)
END IDENT ^^^^^^^
FOLLOW['Def'] { ',' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Def-> Ident = CompConst--------
Is 'ϵ' Not Contained in 'FIRST['Ident']'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['Ident'] { 'IDENT' } => FIRST['TempFirstY'] { 'IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'IDENT' }
 'IDENT'
------- Non Terminal: RecIdent --------
> Rule 1 <
RecIdent-> RecField     FIRST['TempFirstY'] { '=' }
BEGIN = ******
  Add RecIdent-> RecField ==> Table(RecIdent, =)
END = ^^^^^^^
FOLLOW['RecIdent'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------RecIdent-> RecField--------
Is 'ϵ' Not Contained in 'FIRST['RecField']'
			Compare 'ϵ' To '='
TRUE
FIRST['TempFirstY'] { } U FIRST['RecField'] { '=' } => FIRST['TempFirstY'] { '=' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '=' }
 '='
------- Non Terminal: RecField --------
> Rule 1 <
RecField-> = [ RecFieldList ]     FIRST['TempFirstY'] { '=' }
BEGIN = ******
  Add RecField-> = [ RecFieldList ] ==> Table(RecField, =)
END = ^^^^^^^
FOLLOW['RecField'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------RecField-> = [ RecFieldList ]--------
Is 'ϵ' Not Contained in 'FIRST['=']'
			Compare 'ϵ' To '='
TRUE
FIRST['TempFirstY'] { } U FIRST['='] { '=' } => FIRST['TempFirstY'] { '=' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '=' }
 '='
------- Non Terminal: RecFieldList --------
> Rule 1 <
RecFieldList-> VarDecls RecFieldList_1     FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
BEGIN RECORDTYPE ******
  Add RecFieldList-> VarDecls RecFieldList_1 ==> Table(RecFieldList, RECORDTYPE)
END RECORDTYPE ^^^^^^^
BEGIN CHAR ******
  Add RecFieldList-> VarDecls RecFieldList_1 ==> Table(RecFieldList, CHAR)
END CHAR ^^^^^^^
BEGIN BYTE ******
  Add RecFieldList-> VarDecls RecFieldList_1 ==> Table(RecFieldList, BYTE)
END BYTE ^^^^^^^
BEGIN INT ******
  Add RecFieldList-> VarDecls RecFieldList_1 ==> Table(RecFieldList, INT)
END INT ^^^^^^^
BEGIN CARD ******
  Add RecFieldList-> VarDecls RecFieldList_1 ==> Table(RecFieldList, CARD)
END CARD ^^^^^^^
BEGIN BOOL ******
  Add RecFieldList-> VarDecls RecFieldList_1 ==> Table(RecFieldList, BOOL)
END BOOL ^^^^^^^
FOLLOW['RecFieldList'] { ']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------RecFieldList-> VarDecls RecFieldList_1--------
Is 'ϵ' Not Contained in 'FIRST['VarDecls']'
			Compare 'ϵ' To 'RECORDTYPE'
			Compare 'ϵ' To 'CHAR'
			Compare 'ϵ' To 'BYTE'
			Compare 'ϵ' To 'INT'
			Compare 'ϵ' To 'CARD'
			Compare 'ϵ' To 'BOOL'
TRUE
FIRST['TempFirstY'] { } U FIRST['VarDecls'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' } => FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'RECORDTYPE','CHAR','BYTE','INT','CARD','BOOL' }
 'RECORDTYPE'
 'CHAR'
 'BYTE'
 'INT'
 'CARD'
 'BOOL'
------- Non Terminal: RecFieldList_1 --------
> Rule 1 <
RecFieldList_1-> ; VarDecls RecFieldList_1     FIRST['TempFirstY'] { ';' }
BEGIN ; ******
  Add RecFieldList_1-> ; VarDecls RecFieldList_1 ==> Table(RecFieldList_1, ;)
END ; ^^^^^^^
RecFieldList_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add RecFieldList_1-> ϵ ==> Table(RecFieldList_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['RecFieldList_1'] { ']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------RecFieldList_1-> ; VarDecls RecFieldList_1--------
Is 'ϵ' Not Contained in 'FIRST[';']'
			Compare 'ϵ' To ';'
TRUE
FIRST['TempFirstY'] { } U FIRST[';'] { ';' } => FIRST['TempFirstY'] { ';' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { ';' }
 ';'
--------RecFieldList_1-> ϵ--------
FIRST['TempFirstY'] { ';' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ';','ϵ' }
FIRST['TempFirstY'] { ';','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ';','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 ']'
Add RecFieldList_1-> ϵ ==> Table(RecFieldList_1, ])
Is $ in Set FOLLOW['RecFieldList_1']
FALSE
  FIRST['TempFirstY'] { ';','ϵ' }
 ';'
 'ϵ'
------- Non Terminal: Modifier --------
> Rule 1 <
Modifier-> POINTER     FIRST['TempFirstY'] { 'POINTER' }
BEGIN POINTER ******
  Add Modifier-> POINTER ==> Table(Modifier, POINTER)
END POINTER ^^^^^^^
Modifier-> ARRAY ArrayStuff     FIRST['TempFirstY'] { 'ARRAY' }
BEGIN ARRAY ******
  Add Modifier-> ARRAY ArrayStuff ==> Table(Modifier, ARRAY)
END ARRAY ^^^^^^^
Modifier-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add Modifier-> ϵ ==> Table(Modifier, ϵ)
END ϵ ^^^^^^^
FOLLOW['Modifier'] { 'IDENT' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Modifier-> POINTER--------
Is 'ϵ' Not Contained in 'FIRST['POINTER']'
			Compare 'ϵ' To 'POINTER'
TRUE
FIRST['TempFirstY'] { } U FIRST['POINTER'] { 'POINTER' } => FIRST['TempFirstY'] { 'POINTER' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'POINTER' }
 'POINTER'
--------Modifier-> ARRAY ArrayStuff--------
Is 'ϵ' Not Contained in 'FIRST['ARRAY']'
			Compare 'ϵ' To 'ARRAY'
TRUE
FIRST['TempFirstY'] { 'POINTER' } U FIRST['ARRAY'] { 'ARRAY' } => FIRST['TempFirstY'] { 'POINTER','ARRAY' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'POINTER','ARRAY' }
 'POINTER'
 'ARRAY'
--------Modifier-> ϵ--------
FIRST['TempFirstY'] { 'POINTER','ARRAY' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'POINTER','ARRAY','ϵ' }
FIRST['TempFirstY'] { 'POINTER','ARRAY','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { 'POINTER','ARRAY','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 'IDENT'
Add Modifier-> ϵ ==> Table(Modifier, IDENT)
Is $ in Set FOLLOW['Modifier']
FALSE
  FIRST['TempFirstY'] { 'POINTER','ARRAY','ϵ' }
 'POINTER'
 'ARRAY'
 'ϵ'
------- Non Terminal: ArrayStuff --------
> Rule 1 <
ArrayStuff-> ( CompConst ) OptArrayInit     FIRST['TempFirstY'] { '(' }
BEGIN ( ******
  Add ArrayStuff-> ( CompConst ) OptArrayInit ==> Table(ArrayStuff, ()
END ( ^^^^^^^
ArrayStuff-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add ArrayStuff-> ϵ ==> Table(ArrayStuff, ϵ)
END ϵ ^^^^^^^
FOLLOW['ArrayStuff'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------ArrayStuff-> ( CompConst ) OptArrayInit--------
Is 'ϵ' Not Contained in 'FIRST['(']'
			Compare 'ϵ' To '('
TRUE
FIRST['TempFirstY'] { } U FIRST['('] { '(' } => FIRST['TempFirstY'] { '(' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '(' }
 '('
--------ArrayStuff-> ϵ--------
FIRST['TempFirstY'] { '(' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '(','ϵ' }
FIRST['TempFirstY'] { '(','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '(','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
Is $ in Set FOLLOW['ArrayStuff']
FALSE
  FIRST['TempFirstY'] { '(','ϵ' }
 '('
 'ϵ'
------- Non Terminal: OptArrayInit --------
> Rule 1 <
OptArrayInit-> = [ CompConstList ]     FIRST['TempFirstY'] { '=' }
BEGIN = ******
  Add OptArrayInit-> = [ CompConstList ] ==> Table(OptArrayInit, =)
END = ^^^^^^^
OptArrayInit-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add OptArrayInit-> ϵ ==> Table(OptArrayInit, ϵ)
END ϵ ^^^^^^^
FOLLOW['OptArrayInit'] { }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------OptArrayInit-> = [ CompConstList ]--------
Is 'ϵ' Not Contained in 'FIRST['=']'
			Compare 'ϵ' To '='
TRUE
FIRST['TempFirstY'] { } U FIRST['='] { '=' } => FIRST['TempFirstY'] { '=' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '=' }
 '='
--------OptArrayInit-> ϵ--------
FIRST['TempFirstY'] { '=' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '=','ϵ' }
FIRST['TempFirstY'] { '=','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '=','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
Is $ in Set FOLLOW['OptArrayInit']
FALSE
  FIRST['TempFirstY'] { '=','ϵ' }
 '='
 'ϵ'
------- Non Terminal: CompConstList --------
> Rule 1 <
CompConstList-> CompConst CompConstList_1     FIRST['TempFirstY'] { 'NUMBER','*','@' }
BEGIN NUMBER ******
  Add CompConstList-> CompConst CompConstList_1 ==> Table(CompConstList, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add CompConstList-> CompConst CompConstList_1 ==> Table(CompConstList, *)
END * ^^^^^^^
BEGIN @ ******
  Add CompConstList-> CompConst CompConstList_1 ==> Table(CompConstList, @)
END @ ^^^^^^^
FOLLOW['CompConstList'] { ']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------CompConstList-> CompConst CompConstList_1--------
Is 'ϵ' Not Contained in 'FIRST['CompConst']'
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
TRUE
FIRST['TempFirstY'] { } U FIRST['CompConst'] { 'NUMBER','*','@' } => FIRST['TempFirstY'] { 'NUMBER','*','@' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'NUMBER','*','@' }
 'NUMBER'
 '*'
 '@'
------- Non Terminal: CompConstList_1 --------
> Rule 1 <
CompConstList_1-> , CompConst CompConstList_1     FIRST['TempFirstY'] { ',' }
BEGIN , ******
  Add CompConstList_1-> , CompConst CompConstList_1 ==> Table(CompConstList_1, ,)
END , ^^^^^^^
CompConstList_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add CompConstList_1-> ϵ ==> Table(CompConstList_1, ϵ)
END ϵ ^^^^^^^
FOLLOW['CompConstList_1'] { ']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------CompConstList_1-> , CompConst CompConstList_1--------
Is 'ϵ' Not Contained in 'FIRST[',']'
			Compare 'ϵ' To ','
TRUE
FIRST['TempFirstY'] { } U FIRST[','] { ',' } => FIRST['TempFirstY'] { ',' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { ',' }
 ','
--------CompConstList_1-> ϵ--------
FIRST['TempFirstY'] { ',' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ',','ϵ' }
FIRST['TempFirstY'] { ',','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { ',','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 ']'
Add CompConstList_1-> ϵ ==> Table(CompConstList_1, ])
Is $ in Set FOLLOW['CompConstList_1']
FALSE
  FIRST['TempFirstY'] { ',','ϵ' }
 ','
 'ϵ'
------- Non Terminal: CompConst --------
> Rule 1 <
CompConst-> BaseCompConst CompConst_1     FIRST['TempFirstY'] { 'NUMBER','*','@' }
BEGIN NUMBER ******
  Add CompConst-> BaseCompConst CompConst_1 ==> Table(Action65, NUMBER)
END NUMBER ^^^^^^^
BEGIN * ******
  Add CompConst-> BaseCompConst CompConst_1 ==> Table(Action65, *)
END * ^^^^^^^
BEGIN @ ******
  Add CompConst-> BaseCompConst CompConst_1 ==> Table(Action65, @)
END @ ^^^^^^^
FOLLOW['CompConst'] { ',',']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------CompConst-> BaseCompConst CompConst_1--------
Is 'ϵ' Not Contained in 'FIRST['BaseCompConst']'
			Compare 'ϵ' To 'NUMBER'
			Compare 'ϵ' To '*'
			Compare 'ϵ' To '@'
TRUE
FIRST['TempFirstY'] { } U FIRST['BaseCompConst'] { 'NUMBER','*','@' } => FIRST['TempFirstY'] { 'NUMBER','*','@' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'NUMBER','*','@' }
 'NUMBER'
 '*'
 '@'
------- Non Terminal: CompConst_1 --------
> Rule 1 <
CompConst_1-> + BaseCompConst CompConst_1     FIRST['TempFirstY'] { '+' }
BEGIN + ******
  Add CompConst_1-> + BaseCompConst CompConst_1 ==> Table(Action65, +)
END + ^^^^^^^
CompConst_1-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add CompConst_1-> ϵ ==> Table(Action65, ϵ)
END ϵ ^^^^^^^
FOLLOW['CompConst_1'] { ',',']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------CompConst_1-> + BaseCompConst CompConst_1--------
Is 'ϵ' Not Contained in 'FIRST['+']'
			Compare 'ϵ' To '+'
TRUE
FIRST['TempFirstY'] { } U FIRST['+'] { '+' } => FIRST['TempFirstY'] { '+' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '+' }
 '+'
--------CompConst_1-> ϵ--------
FIRST['TempFirstY'] { '+' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '+','ϵ' }
FIRST['TempFirstY'] { '+','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '+','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 ','
Add CompConst_1-> ϵ ==> Table(Action65, ,)
 ']'
Add CompConst_1-> ϵ ==> Table(Action65, ])
Is $ in Set FOLLOW['CompConst_1']
FALSE
  FIRST['TempFirstY'] { '+','ϵ' }
 '+'
 'ϵ'
------- Non Terminal: BaseCompConst --------
> Rule 1 <
BaseCompConst-> NUMBER     FIRST['TempFirstY'] { 'NUMBER' }
BEGIN NUMBER ******
  Add BaseCompConst-> NUMBER ==> Table(Action65, NUMBER)
END NUMBER ^^^^^^^
BaseCompConst-> *     FIRST['TempFirstY'] { '*' }
BEGIN * ******
  Add BaseCompConst-> * ==> Table(Action65, *)
END * ^^^^^^^
BaseCompConst-> @ MemContents     FIRST['TempFirstY'] { '@' }
BEGIN @ ******
  Add BaseCompConst-> @ MemContents ==> Table(Action65, @)
END @ ^^^^^^^
FOLLOW['BaseCompConst'] { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>'
,'<','GTEQ','LTEQ','AND','OR',';','THEN','STEP',')',',',']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------BaseCompConst-> NUMBER--------
Is 'ϵ' Not Contained in 'FIRST['NUMBER']'
			Compare 'ϵ' To 'NUMBER'
TRUE
FIRST['TempFirstY'] { } U FIRST['NUMBER'] { 'NUMBER' } => FIRST['TempFirstY'] { 'NUMBER' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'NUMBER' }
 'NUMBER'
--------BaseCompConst-> *--------
Is 'ϵ' Not Contained in 'FIRST['*']'
			Compare 'ϵ' To '*'
TRUE
FIRST['TempFirstY'] { 'NUMBER' } U FIRST['*'] { '*' } => FIRST['TempFirstY'] { 'NUMBER','*' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'NUMBER','*' }
 'NUMBER'
 '*'
--------BaseCompConst-> @ MemContents--------
Is 'ϵ' Not Contained in 'FIRST['@']'
			Compare 'ϵ' To '@'
TRUE
FIRST['TempFirstY'] { 'NUMBER','*' } U FIRST['@'] { '@' } => FIRST['TempFirstY'] { 'NUMBER','*','@' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'NUMBER','*','@' }
 'NUMBER'
 '*'
 '@'
------- Non Terminal: Ident --------
> Rule 1 <
Ident-> IDENT     FIRST['TempFirstY'] { 'IDENT' }
BEGIN IDENT ******
  Add Ident-> IDENT ==> Table(Action65, IDENT)
END IDENT ^^^^^^^
FOLLOW['Ident'] { '=',',','(','^','.',')',';','FUNC','PROC','UNTILL','EXIT','FOR','IF'
,'*','/','MOD','LSH','RSH','+','-','!','&','%','#','>','<','GTEQ','LTEQ','AND','OR'
,'THEN','STEP',']' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------Ident-> IDENT--------
Is 'ϵ' Not Contained in 'FIRST['IDENT']'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['IDENT'] { 'IDENT' } => FIRST['TempFirstY'] { 'IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'IDENT' }
 'IDENT'
------- Non Terminal: MemContents --------
> Rule 1 <
MemContents-> Ident MemContentsType     FIRST['TempFirstY'] { 'IDENT' }
BEGIN IDENT ******
  Add MemContents-> Ident MemContentsType ==> Table(Action65, IDENT)
END IDENT ^^^^^^^
FOLLOW['MemContents'] { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>','<'
,'GTEQ','LTEQ','AND','OR',';','THEN','STEP',')',',' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------MemContents-> Ident MemContentsType--------
Is 'ϵ' Not Contained in 'FIRST['Ident']'
			Compare 'ϵ' To 'IDENT'
TRUE
FIRST['TempFirstY'] { } U FIRST['Ident'] { 'IDENT' } => FIRST['TempFirstY'] { 'IDENT' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { 'IDENT' }
 'IDENT'
------- Non Terminal: MemContentsType --------
> Rule 1 <
MemContentsType-> ( ArithExpr )     FIRST['TempFirstY'] { '(' }
BEGIN ( ******
  Add MemContentsType-> ( ArithExpr ) ==> Table(Action65, ()
END ( ^^^^^^^
MemContentsType-> ^     FIRST['TempFirstY'] { '^' }
BEGIN ^ ******
  Add MemContentsType-> ^ ==> Table(Action65, ^)
END ^ ^^^^^^^
MemContentsType-> . Ident     FIRST['TempFirstY'] { '.' }
BEGIN . ******
  Add MemContentsType-> . Ident ==> Table(Action65, .)
END . ^^^^^^^
MemContentsType-> ϵ     FIRST['TempFirstY'] { 'ϵ' }
BEGIN ϵ ******
  Add MemContentsType-> ϵ ==> Table(Action65, ϵ)
END ϵ ^^^^^^^
FOLLOW['MemContentsType'] { '*','/','MOD','LSH','RSH','+','-','!','&','%','=','#','>'
,'<','GTEQ','LTEQ','AND','OR',';','THEN','STEP',')',',' }
TERMINALS['Terminals'] { 'IDENT','GLOBALS','ROUTINES','MODULE','RETURN','PROC','FUNC'
,'FUNC_IDENT','PROC_IDENT','IF','FOR','WHILE','DO','OD','EXIT','THEN','FI','ELSEIF'
,'ELSE','UNTILL','TO','STEP','ASM','ENDASM','OR','AND','GTEQ','LTEQ','NUMBER','DEFINE'
,'TYPE','RECORDTYPE','BOOL','CHAR','BYTE','CARD','INT','POINTER','ARRAY','BEGIN','END'
,'@','<*','.','^','!','&','%','#','>','<','=',':=','==+','==-','==*','==/','==MOD'
,'==&','==!','==XOR','==%','==LSH','==RSH','[',']',',',';','+','-','*','/','MOD','LSH'
,'RSH','(',')','ϵ','$' }
############< Rule 2 >############
--------MemContentsType-> ( ArithExpr )--------
Is 'ϵ' Not Contained in 'FIRST['(']'
			Compare 'ϵ' To '('
TRUE
FIRST['TempFirstY'] { } U FIRST['('] { '(' } => FIRST['TempFirstY'] { '(' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '(' }
 '('
--------MemContentsType-> ^--------
Is 'ϵ' Not Contained in 'FIRST['^']'
			Compare 'ϵ' To '^'
TRUE
FIRST['TempFirstY'] { '(' } U FIRST['^'] { '^' } => FIRST['TempFirstY'] { '(','^' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '(','^' }
 '('
 '^'
--------MemContentsType-> . Ident--------
Is 'ϵ' Not Contained in 'FIRST['.']'
			Compare 'ϵ' To '.'
TRUE
FIRST['TempFirstY'] { '(','^' } U FIRST['.'] { '.' } => FIRST['TempFirstY'] { '(','^','.' }
Is ϵ in Set FIRST['TempFirstY']
FALSE
  FIRST['TempFirstY'] { '(','^','.' }
 '('
 '^'
 '.'
--------MemContentsType-> ϵ--------
FIRST['TempFirstY'] { '(','^','.' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '(','^','.','ϵ' }
FIRST['TempFirstY'] { '(','^','.','ϵ' } U FIRST['ϵ'] { 'ϵ' } => FIRST['TempFirstY'] { '(','^','.','ϵ' }
Is ϵ in Set FIRST['TempFirstY']
TRUE
 '*'
Add MemContentsType-> ϵ ==> Table(Action65, *)
 '/'
Add MemContentsType-> ϵ ==> Table(Action65, /)
 'MOD'
Add MemContentsType-> ϵ ==> Table(Action65, MOD)
 'LSH'
Add MemContentsType-> ϵ ==> Table(Action65, LSH)
 'RSH'
Add MemContentsType-> ϵ ==> Table(Action65, RSH)
 '+'
Add MemContentsType-> ϵ ==> Table(Action65, +)
 '-'
Add MemContentsType-> ϵ ==> Table(Action65, -)
 '!'
Add MemContentsType-> ϵ ==> Table(Action65, !)
 '&'
Add MemContentsType-> ϵ ==> Table(Action65, &)
 '%'
Add MemContentsType-> ϵ ==> Table(Action65, %)
 '='
Add MemContentsType-> ϵ ==> Table(Action65, =)
 '#'
Add MemContentsType-> ϵ ==> Table(Action65, #)
 '>'
Add MemContentsType-> ϵ ==> Table(Action65, >)
 '<'
Add MemContentsType-> ϵ ==> Table(Action65, <)
 'GTEQ'
Add MemContentsType-> ϵ ==> Table(Action65, GTEQ)
 'LTEQ'
Add MemContentsType-> ϵ ==> Table(Action65, LTEQ)
 'AND'
Add MemContentsType-> ϵ ==> Table(Action65, AND)
 'OR'
Add MemContentsType-> ϵ ==> Table(Action65, OR)
 ';'
Add MemContentsType-> ϵ ==> Table(Action65, ;)
 'THEN'
Add MemContentsType-> ϵ ==> Table(Action65, THEN)
 'STEP'
Add MemContentsType-> ϵ ==> Table(Action65, STEP)
 ')'
Add MemContentsType-> ϵ ==> Table(Action65, ))
 ','
Add MemContentsType-> ϵ ==> Table(Action65, ,)
Is $ in Set FOLLOW['MemContentsType']
FALSE
  FIRST['TempFirstY'] { '(','^','.','ϵ' }
 '('
 '^'
 '.'
 'ϵ'
xxxxxxxxxxxx Parse Table xxxxxxxxxxxxxxxxx
('Action65','IDENT')
     1.  Ident-> IDENT
     2.  MemContents-> Ident MemContentsType
('Action65','MODULE')
     1.  Action65-> Modules
('Action65','THEN')
     1.  MemContentsType-> ϵ
('Action65','STEP')
     1.  MemContentsType-> ϵ
('Action65','OR')
     1.  MemContentsType-> ϵ
('Action65','AND')
     1.  MemContentsType-> ϵ
('Action65','GTEQ')
     1.  MemContentsType-> ϵ
('Action65','LTEQ')
     1.  MemContentsType-> ϵ
('Action65','NUMBER')
     1.  CompConst-> BaseCompConst CompConst_1
     2.  BaseCompConst-> NUMBER
('Action65','@')
     1.  CompConst-> BaseCompConst CompConst_1
     2.  BaseCompConst-> @ MemContents
('Action65','.')
     1.  MemContentsType-> . Ident
('Action65','^')
     1.  MemContentsType-> ^
('Action65','!')
     1.  MemContentsType-> ϵ
('Action65','&')
     1.  MemContentsType-> ϵ
('Action65','%')
     1.  MemContentsType-> ϵ
('Action65','#')
     1.  MemContentsType-> ϵ
('Action65','>')
     1.  MemContentsType-> ϵ
('Action65','<')
     1.  MemContentsType-> ϵ
('Action65','=')
     1.  MemContentsType-> ϵ
('Action65',']')
     1.  CompConst_1-> ϵ
('Action65',',')
     1.  CompConst_1-> ϵ
     2.  MemContentsType-> ϵ
('Action65',';')
     1.  MemContentsType-> ϵ
('Action65','+')
     1.  CompConst_1-> + BaseCompConst CompConst_1
     2.  MemContentsType-> ϵ
('Action65','-')
     1.  MemContentsType-> ϵ
('Action65','*')
     1.  CompConst-> BaseCompConst CompConst_1
     2.  BaseCompConst-> *
     3.  MemContentsType-> ϵ
('Action65','/')
     1.  MemContentsType-> ϵ
('Action65','MOD')
     1.  MemContentsType-> ϵ
('Action65','LSH')
     1.  MemContentsType-> ϵ
('Action65','RSH')
     1.  MemContentsType-> ϵ
('Action65','(')
     1.  MemContentsType-> ( ArithExpr )
('Action65',')')
     1.  MemContentsType-> ϵ
('Action65','ϵ')
     1.  CompConst_1-> ϵ
     2.  MemContentsType-> ϵ
('Modules','MODULE')
     1.  Modules-> MODULE Modules_1
('Modules_1','MODULE')
     1.  Modules_1-> MODULE Module Modules_1
('Modules_1','ϵ')
     1.  Modules_1-> ϵ
('Module','PROC')
     1.  Module-> Routines
('Module','FUNC')
     1.  Module-> Routines
('Module','DEFINE')
     1.  Module-> SysDecls Routines
('Module','TYPE')
     1.  Module-> SysDecls Routines
('Module','RECORDTYPE')
     1.  Module-> SysDecls Routines
('Module','BOOL')
     1.  Module-> SysDecls Routines
('Module','CHAR')
     1.  Module-> SysDecls Routines
('Module','BYTE')
     1.  Module-> SysDecls Routines
('Module','CARD')
     1.  Module-> SysDecls Routines
('Module','INT')
     1.  Module-> SysDecls Routines
('Routines','PROC')
     1.  Routines-> Routine Routines_1
('Routines','FUNC')
     1.  Routines-> Routine Routines_1
('Routines_1','MODULE')
     1.  Routines_1-> ϵ
('Routines_1','END')
     1.  Routines_1-> END Routine Routines_1
('Routines_1','ϵ')
     1.  Routines_1-> ϵ
('Routine','PROC')
     1.  Routine-> PROC ProcDecl BEGIN ProcBody
('Routine','FUNC')
     1.  Routine-> FUNC FundType FuncDecl BEGIN ProcBody
('ProcBody','DEFINE')
     1.  ProcBody-> SysDecls ProcBody_1
('ProcBody','TYPE')
     1.  ProcBody-> SysDecls ProcBody_1
('ProcBody','RECORDTYPE')
     1.  ProcBody-> SysDecls ProcBody_1
('ProcBody','BOOL')
     1.  ProcBody-> SysDecls ProcBody_1
('ProcBody','CHAR')
     1.  ProcBody-> SysDecls ProcBody_1
('ProcBody','BYTE')
     1.  ProcBody-> SysDecls ProcBody_1
('ProcBody','CARD')
     1.  ProcBody-> SysDecls ProcBody_1
('ProcBody','INT')
     1.  ProcBody-> SysDecls ProcBody_1
('ProcBody_1','IF')
     1.  ProcBody_1-> Statements
('ProcBody_1','FOR')
     1.  ProcBody_1-> Statements
('ProcBody_1','EXIT')
     1.  ProcBody_1-> Statements
('ProcBody_1','UNTILL')
     1.  ProcBody_1-> Statements
('ProcDecl','PROC_IDENT')
     1.  ProcDecl-> ProcIdent OptInit ( ParamList )
('FuncDecl','FUNC_IDENT')
     1.  FuncDecl-> FuncIdent OptInit ( ParamList )
('FuncIdent','FUNC_IDENT')
     1.  FuncIdent-> FUNC_IDENT
('ProcIdent','PROC_IDENT')
     1.  ProcIdent-> PROC_IDENT
('Statements','IF')
     1.  Statements-> FITermStmts
('Statements','FOR')
     1.  Statements-> ODTermStmts
('Statements','EXIT')
     1.  Statements-> SemiTermStmts
('Statements','UNTILL')
     1.  Statements-> SemiTermStmts
('SemiTermStmts','EXIT')
     1.  SemiTermStmts-> EXIT ;
('SemiTermStmts','UNTILL')
     1.  SemiTermStmts-> UNTILL ArithExpr ;
('ODTermStmts','FOR')
     1.  ODTermStmts-> FOR FORLoop OD
('FITermStmts','IF')
     1.  FITermStmts-> IF IfStmt FI
('IfStmt','IDENT')
     1.  IfStmt-> ArithExpr ThenPart
('IfStmt','FUNC_IDENT')
     1.  IfStmt-> ArithExpr ThenPart
('IfStmt','NUMBER')
     1.  IfStmt-> ArithExpr ThenPart
('IfStmt','@')
     1.  IfStmt-> ArithExpr ThenPart
('IfStmt','-')
     1.  IfStmt-> ArithExpr ThenPart
('IfStmt','*')
     1.  IfStmt-> ArithExpr ThenPart
('IfStmt','(')
     1.  IfStmt-> ArithExpr ThenPart
('ThenPart','THEN')
     1.  ThenPart-> THEN ThenPart_1
('ThenPart_1','IF')
     1.  ThenPart_1-> Statements ElseIfPart
('ThenPart_1','FOR')
     1.  ThenPart_1-> Statements ElseIfPart
('ThenPart_1','EXIT')
     1.  ThenPart_1-> Statements ElseIfPart
('ThenPart_1','UNTILL')
     1.  ThenPart_1-> Statements ElseIfPart
('ElseIfPart','ELSEIF')
     1.  ElseIfPart-> ELSEIF ArithExpr ThenPart
('ElseIfPart','ELSE')
     1.  ElseIfPart-> ELSE Statements
('ElseIfPart','ϵ')
     1.  ElseIfPart-> ϵ
('DoPart','DO')
     1.  DoPart-> DO Statements
('Start','IDENT')
     1.  Start-> MemContents = ArithExpr
('Finish','IDENT')
     1.  Finish-> ArithExpr
('Finish','FUNC_IDENT')
     1.  Finish-> ArithExpr
('Finish','NUMBER')
     1.  Finish-> ArithExpr
('Finish','@')
     1.  Finish-> ArithExpr
('Finish','-')
     1.  Finish-> ArithExpr
('Finish','*')
     1.  Finish-> ArithExpr
('Finish','(')
     1.  Finish-> ArithExpr
('Step','IDENT')
     1.  Step-> ArithExpr
('Step','FUNC_IDENT')
     1.  Step-> ArithExpr
('Step','NUMBER')
     1.  Step-> ArithExpr
('Step','@')
     1.  Step-> ArithExpr
('Step','-')
     1.  Step-> ArithExpr
('Step','*')
     1.  Step-> ArithExpr
('Step','(')
     1.  Step-> ArithExpr
('StepPart','DO')
     1.  StepPart-> ϵ
('StepPart','STEP')
     1.  StepPart-> STEP Step
('StepPart','ϵ')
     1.  StepPart-> ϵ
('Next','STEP')
     1.  Next-> StepPart DoPart
('ToPart','TO')
     1.  ToPart-> TO Finish Next
('FORLoop','IDENT')
     1.  FORLoop-> Start ToPart
('ArithExpr','IDENT')
     1.  ArithExpr-> LogicalAND LogicalOR_1
('ArithExpr','FUNC_IDENT')
     1.  ArithExpr-> LogicalAND LogicalOR_1
('ArithExpr','NUMBER')
     1.  ArithExpr-> LogicalAND LogicalOR_1
('ArithExpr','@')
     1.  ArithExpr-> LogicalAND LogicalOR_1
('ArithExpr','-')
     1.  ArithExpr-> LogicalAND LogicalOR_1
('ArithExpr','*')
     1.  ArithExpr-> LogicalAND LogicalOR_1
('ArithExpr','(')
     1.  ArithExpr-> LogicalAND LogicalOR_1
('LogicalOR_1','THEN')
     1.  LogicalOR_1-> ϵ
('LogicalOR_1','STEP')
     1.  LogicalOR_1-> ϵ
('LogicalOR_1','OR')
     1.  LogicalOR_1-> OR LogicalAND LogicalOR_1
('LogicalOR_1',';')
     1.  LogicalOR_1-> ϵ
('LogicalOR_1',')')
     1.  LogicalOR_1-> ϵ
('LogicalOR_1','ϵ')
     1.  LogicalOR_1-> ϵ
('LogicalAND','IDENT')
     1.  LogicalAND-> RelOperation LogicalAND_1
('LogicalAND','FUNC_IDENT')
     1.  LogicalAND-> RelOperation LogicalAND_1
('LogicalAND','NUMBER')
     1.  LogicalAND-> RelOperation LogicalAND_1
('LogicalAND','@')
     1.  LogicalAND-> RelOperation LogicalAND_1
('LogicalAND','-')
     1.  LogicalAND-> RelOperation LogicalAND_1
('LogicalAND','*')
     1.  LogicalAND-> RelOperation LogicalAND_1
('LogicalAND','(')
     1.  LogicalAND-> RelOperation LogicalAND_1
('LogicalAND_1','THEN')
     1.  LogicalAND_1-> ϵ
('LogicalAND_1','STEP')
     1.  LogicalAND_1-> ϵ
('LogicalAND_1','OR')
     1.  LogicalAND_1-> ϵ
('LogicalAND_1','AND')
     1.  LogicalAND_1-> AND RelOperation LogicalAND_1
('LogicalAND_1',';')
     1.  LogicalAND_1-> ϵ
('LogicalAND_1',')')
     1.  LogicalAND_1-> ϵ
('LogicalAND_1','ϵ')
     1.  LogicalAND_1-> ϵ
('RelOperation','IDENT')
     1.  RelOperation-> RelEquals RelOperation_1
('RelOperation','FUNC_IDENT')
     1.  RelOperation-> RelEquals RelOperation_1
('RelOperation','NUMBER')
     1.  RelOperation-> RelEquals RelOperation_1
('RelOperation','@')
     1.  RelOperation-> RelEquals RelOperation_1
('RelOperation','-')
     1.  RelOperation-> RelEquals RelOperation_1
('RelOperation','*')
     1.  RelOperation-> RelEquals RelOperation_1
('RelOperation','(')
     1.  RelOperation-> RelEquals RelOperation_1
('RelOperation_1','THEN')
     1.  RelOperation_1-> ϵ
('RelOperation_1','STEP')
     1.  RelOperation_1-> ϵ
('RelOperation_1','OR')
     1.  RelOperation_1-> ϵ
('RelOperation_1','AND')
     1.  RelOperation_1-> ϵ
('RelOperation_1','GTEQ')
     1.  RelOperation_1-> GTEQ RelEquals RelOperation_1
('RelOperation_1','LTEQ')
     1.  RelOperation_1-> LTEQ RelEquals RelOperation_1
('RelOperation_1','>')
     1.  RelOperation_1-> > RelEquals RelOperation_1
('RelOperation_1','<')
     1.  RelOperation_1-> < RelEquals RelOperation_1
('RelOperation_1',';')
     1.  RelOperation_1-> ϵ
('RelOperation_1',')')
     1.  RelOperation_1-> ϵ
('RelOperation_1','ϵ')
     1.  RelOperation_1-> ϵ
('RelEquals','IDENT')
     1.  RelEquals-> BitwiseOR RelEquals_1
('RelEquals','FUNC_IDENT')
     1.  RelEquals-> BitwiseOR RelEquals_1
('RelEquals','NUMBER')
     1.  RelEquals-> BitwiseOR RelEquals_1
('RelEquals','@')
     1.  RelEquals-> BitwiseOR RelEquals_1
('RelEquals','-')
     1.  RelEquals-> BitwiseOR RelEquals_1
('RelEquals','*')
     1.  RelEquals-> BitwiseOR RelEquals_1
('RelEquals','(')
     1.  RelEquals-> BitwiseOR RelEquals_1
('RelEquals_1','THEN')
     1.  RelEquals_1-> ϵ
('RelEquals_1','STEP')
     1.  RelEquals_1-> ϵ
('RelEquals_1','OR')
     1.  RelEquals_1-> ϵ
('RelEquals_1','AND')
     1.  RelEquals_1-> ϵ
('RelEquals_1','GTEQ')
     1.  RelEquals_1-> ϵ
('RelEquals_1','LTEQ')
     1.  RelEquals_1-> ϵ
('RelEquals_1','#')
     1.  RelEquals_1-> # BitwiseOR RelEquals_1
('RelEquals_1','>')
     1.  RelEquals_1-> ϵ
('RelEquals_1','<')
     1.  RelEquals_1-> ϵ
('RelEquals_1','=')
     1.  RelEquals_1-> = BitwiseOR RelEquals_1
('RelEquals_1',';')
     1.  RelEquals_1-> ϵ
('RelEquals_1',')')
     1.  RelEquals_1-> ϵ
('RelEquals_1','ϵ')
     1.  RelEquals_1-> ϵ
('BitwiseOR','IDENT')
     1.  BitwiseOR-> BitwiseAND BitwiseOR_1
('BitwiseOR','FUNC_IDENT')
     1.  BitwiseOR-> BitwiseAND BitwiseOR_1
('BitwiseOR','NUMBER')
     1.  BitwiseOR-> BitwiseAND BitwiseOR_1
('BitwiseOR','@')
     1.  BitwiseOR-> BitwiseAND BitwiseOR_1
('BitwiseOR','-')
     1.  BitwiseOR-> BitwiseAND BitwiseOR_1
('BitwiseOR','*')
     1.  BitwiseOR-> BitwiseAND BitwiseOR_1
('BitwiseOR','(')
     1.  BitwiseOR-> BitwiseAND BitwiseOR_1
('BitwiseOR_1','THEN')
     1.  BitwiseOR_1-> ϵ
('BitwiseOR_1','STEP')
     1.  BitwiseOR_1-> ϵ
('BitwiseOR_1','OR')
     1.  BitwiseOR_1-> ϵ
('BitwiseOR_1','AND')
     1.  BitwiseOR_1-> ϵ
('BitwiseOR_1','GTEQ')
     1.  BitwiseOR_1-> ϵ
('BitwiseOR_1','LTEQ')
     1.  BitwiseOR_1-> ϵ
('BitwiseOR_1','%')
     1.  BitwiseOR_1-> % BitwiseAND BitwiseOR_1
('BitwiseOR_1','#')
     1.  BitwiseOR_1-> ϵ
('BitwiseOR_1','>')
     1.  BitwiseOR_1-> ϵ
('BitwiseOR_1','<')
     1.  BitwiseOR_1-> ϵ
('BitwiseOR_1','=')
     1.  BitwiseOR_1-> ϵ
('BitwiseOR_1',';')
     1.  BitwiseOR_1-> ϵ
('BitwiseOR_1',')')
     1.  BitwiseOR_1-> ϵ
('BitwiseOR_1','ϵ')
     1.  BitwiseOR_1-> ϵ
('BitwiseAND','IDENT')
     1.  BitwiseAND-> BitwiseXOR BitwiseAND_1
('BitwiseAND','FUNC_IDENT')
     1.  BitwiseAND-> BitwiseXOR BitwiseAND_1
('BitwiseAND','NUMBER')
     1.  BitwiseAND-> BitwiseXOR BitwiseAND_1
('BitwiseAND','@')
     1.  BitwiseAND-> BitwiseXOR BitwiseAND_1
('BitwiseAND','-')
     1.  BitwiseAND-> BitwiseXOR BitwiseAND_1
('BitwiseAND','*')
     1.  BitwiseAND-> BitwiseXOR BitwiseAND_1
('BitwiseAND','(')
     1.  BitwiseAND-> BitwiseXOR BitwiseAND_1
('BitwiseAND_1','THEN')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1','STEP')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1','OR')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1','AND')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1','GTEQ')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1','LTEQ')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1','&')
     1.  BitwiseAND_1-> & BitwiseXOR BitwiseAND_1
('BitwiseAND_1','%')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1','#')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1','>')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1','<')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1','=')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1',';')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1',')')
     1.  BitwiseAND_1-> ϵ
('BitwiseAND_1','ϵ')
     1.  BitwiseAND_1-> ϵ
('BitwiseXOR','IDENT')
     1.  BitwiseXOR-> AddExpr SimpleRelExpr_1
('BitwiseXOR','FUNC_IDENT')
     1.  BitwiseXOR-> AddExpr SimpleRelExpr_1
('BitwiseXOR','NUMBER')
     1.  BitwiseXOR-> AddExpr SimpleRelExpr_1
('BitwiseXOR','@')
     1.  BitwiseXOR-> AddExpr SimpleRelExpr_1
('BitwiseXOR','-')
     1.  BitwiseXOR-> AddExpr SimpleRelExpr_1
('BitwiseXOR','*')
     1.  BitwiseXOR-> AddExpr SimpleRelExpr_1
('BitwiseXOR','(')
     1.  BitwiseXOR-> AddExpr SimpleRelExpr_1
('SimpleRelExpr_1','THEN')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1','STEP')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1','OR')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1','AND')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1','GTEQ')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1','LTEQ')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1','!')
     1.  SimpleRelExpr_1-> ! AddExpr SimpleRelExpr_1
('SimpleRelExpr_1','&')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1','%')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1','#')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1','>')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1','<')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1','=')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1',';')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1',')')
     1.  SimpleRelExpr_1-> ϵ
('SimpleRelExpr_1','ϵ')
     1.  SimpleRelExpr_1-> ϵ
('AddExpr','IDENT')
     1.  AddExpr-> ShifExpr AddExpr_1
('AddExpr','FUNC_IDENT')
     1.  AddExpr-> ShifExpr AddExpr_1
('AddExpr','NUMBER')
     1.  AddExpr-> ShifExpr AddExpr_1
('AddExpr','@')
     1.  AddExpr-> ShifExpr AddExpr_1
('AddExpr','-')
     1.  AddExpr-> ShifExpr AddExpr_1
('AddExpr','*')
     1.  AddExpr-> ShifExpr AddExpr_1
('AddExpr','(')
     1.  AddExpr-> ShifExpr AddExpr_1
('AddExpr_1','THEN')
     1.  AddExpr_1-> ϵ
('AddExpr_1','STEP')
     1.  AddExpr_1-> ϵ
('AddExpr_1','OR')
     1.  AddExpr_1-> ϵ
('AddExpr_1','AND')
     1.  AddExpr_1-> ϵ
('AddExpr_1','GTEQ')
     1.  AddExpr_1-> ϵ
('AddExpr_1','LTEQ')
     1.  AddExpr_1-> ϵ
('AddExpr_1','!')
     1.  AddExpr_1-> ϵ
('AddExpr_1','&')
     1.  AddExpr_1-> ϵ
('AddExpr_1','%')
     1.  AddExpr_1-> ϵ
('AddExpr_1','#')
     1.  AddExpr_1-> ϵ
('AddExpr_1','>')
     1.  AddExpr_1-> ϵ
('AddExpr_1','<')
     1.  AddExpr_1-> ϵ
('AddExpr_1','=')
     1.  AddExpr_1-> ϵ
('AddExpr_1',';')
     1.  AddExpr_1-> ϵ
('AddExpr_1','+')
     1.  AddExpr_1-> + ShifExpr AddExpr_1
('AddExpr_1','-')
     1.  AddExpr_1-> - ShifExpr AddExpr_1
('AddExpr_1',')')
     1.  AddExpr_1-> ϵ
('AddExpr_1','ϵ')
     1.  AddExpr_1-> ϵ
('ShifExpr','IDENT')
     1.  ShifExpr-> MultExpr ShiftExpr_1
('ShifExpr','FUNC_IDENT')
     1.  ShifExpr-> MultExpr ShiftExpr_1
('ShifExpr','NUMBER')
     1.  ShifExpr-> MultExpr ShiftExpr_1
('ShifExpr','@')
     1.  ShifExpr-> MultExpr ShiftExpr_1
('ShifExpr','-')
     1.  ShifExpr-> MultExpr ShiftExpr_1
('ShifExpr','*')
     1.  ShifExpr-> MultExpr ShiftExpr_1
('ShifExpr','(')
     1.  ShifExpr-> MultExpr ShiftExpr_1
('ShiftExpr_1','THEN')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','STEP')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','OR')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','AND')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','GTEQ')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','LTEQ')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','!')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','&')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','%')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','#')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','>')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','<')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','=')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1',';')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','+')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','-')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','LSH')
     1.  ShiftExpr_1-> LSH MultExpr ShiftExpr_1
('ShiftExpr_1','RSH')
     1.  ShiftExpr_1-> RSH MultExpr ShiftExpr_1
('ShiftExpr_1',')')
     1.  ShiftExpr_1-> ϵ
('ShiftExpr_1','ϵ')
     1.  ShiftExpr_1-> ϵ
('MultExpr','IDENT')
     1.  MultExpr-> Unary MultExpr_1
('MultExpr','FUNC_IDENT')
     1.  MultExpr-> Unary MultExpr_1
('MultExpr','NUMBER')
     1.  MultExpr-> Unary MultExpr_1
('MultExpr','@')
     1.  MultExpr-> Unary MultExpr_1
('MultExpr','-')
     1.  MultExpr-> Unary MultExpr_1
('MultExpr','*')
     1.  MultExpr-> Unary MultExpr_1
('MultExpr','(')
     1.  MultExpr-> Unary MultExpr_1
('MultExpr_1','THEN')
     1.  MultExpr_1-> ϵ
('MultExpr_1','STEP')
     1.  MultExpr_1-> ϵ
('MultExpr_1','OR')
     1.  MultExpr_1-> ϵ
('MultExpr_1','AND')
     1.  MultExpr_1-> ϵ
('MultExpr_1','GTEQ')
     1.  MultExpr_1-> ϵ
('MultExpr_1','LTEQ')
     1.  MultExpr_1-> ϵ
('MultExpr_1','!')
     1.  MultExpr_1-> ϵ
('MultExpr_1','&')
     1.  MultExpr_1-> ϵ
('MultExpr_1','%')
     1.  MultExpr_1-> ϵ
('MultExpr_1','#')
     1.  MultExpr_1-> ϵ
('MultExpr_1','>')
     1.  MultExpr_1-> ϵ
('MultExpr_1','<')
     1.  MultExpr_1-> ϵ
('MultExpr_1','=')
     1.  MultExpr_1-> ϵ
('MultExpr_1',';')
     1.  MultExpr_1-> ϵ
('MultExpr_1','+')
     1.  MultExpr_1-> ϵ
('MultExpr_1','-')
     1.  MultExpr_1-> ϵ
('MultExpr_1','*')
     1.  MultExpr_1-> * Unary MultExpr_1
('MultExpr_1','/')
     1.  MultExpr_1-> / Unary MultExpr_1
('MultExpr_1','MOD')
     1.  MultExpr_1-> MOD Unary MultExpr_1
('MultExpr_1','LSH')
     1.  MultExpr_1-> ϵ
('MultExpr_1','RSH')
     1.  MultExpr_1-> ϵ
('MultExpr_1',')')
     1.  MultExpr_1-> ϵ
('MultExpr_1','ϵ')
     1.  MultExpr_1-> ϵ
('Unary','IDENT')
     1.  Unary-> Factor
('Unary','FUNC_IDENT')
     1.  Unary-> Factor
('Unary','NUMBER')
     1.  Unary-> Factor
('Unary','@')
     1.  Unary-> Factor
('Unary','-')
     1.  Unary-> - Unary
('Unary','*')
     1.  Unary-> Factor
('Unary','(')
     1.  Unary-> Factor
('Factor','IDENT')
     1.  Factor-> MemContents
('Factor','FUNC_IDENT')
     1.  Factor-> FUNCcall
('Factor','NUMBER')
     1.  Factor-> BaseCompConst
('Factor','@')
     1.  Factor-> BaseCompConst
('Factor','*')
     1.  Factor-> BaseCompConst
('Factor','(')
     1.  Factor-> ( ArithExpr )
('FUNCcall','FUNC_IDENT')
     1.  FUNCcall-> FuncIdent ( IdentList )
('IdentList','IDENT')
     1.  IdentList-> MemContents IdentList_1
('IdentList_1',',')
     1.  IdentList_1-> , MemContents IdentList_1
('IdentList_1',')')
     1.  IdentList_1-> ϵ
('IdentList_1','ϵ')
     1.  IdentList_1-> ϵ
('FundType','BOOL')
     1.  FundType-> BOOL
('FundType','CHAR')
     1.  FundType-> CHAR OptModifier
('FundType','BYTE')
     1.  FundType-> BYTE OptModifier
('FundType','CARD')
     1.  FundType-> CARD OptModifier
('FundType','INT')
     1.  FundType-> INT OptModifier
('OptModifier','IDENT')
     1.  OptModifier-> ϵ
('OptModifier','POINTER')
     1.  OptModifier-> POINTER
('OptModifier','ϵ')
     1.  OptModifier-> ϵ
('ParamList','RECORDTYPE')
     1.  ParamList-> Param ParamList_1
('ParamList','BOOL')
     1.  ParamList-> Param ParamList_1
('ParamList','CHAR')
     1.  ParamList-> Param ParamList_1
('ParamList','BYTE')
     1.  ParamList-> Param ParamList_1
('ParamList','CARD')
     1.  ParamList-> Param ParamList_1
('ParamList','INT')
     1.  ParamList-> Param ParamList_1
('ParamList_1',',')
     1.  ParamList_1-> , Param ParamList_1
('ParamList_1',')')
     1.  ParamList_1-> ϵ
('ParamList_1','ϵ')
     1.  ParamList_1-> ϵ
('Param','RECORDTYPE')
     1.  Param-> RECORDTYPE OptModifier Ident
('Param','BOOL')
     1.  Param-> BOOL OptModifier Ident
('Param','CHAR')
     1.  Param-> CHAR OptModifier Ident
('Param','BYTE')
     1.  Param-> BYTE OptModifier Ident
('Param','CARD')
     1.  Param-> CARD OptModifier Ident
('Param','INT')
     1.  Param-> INT OptModifier Ident
('VarDecls','RECORDTYPE')
     1.  VarDecls-> RECORDTYPE Modifier VarList
('VarDecls','BOOL')
     1.  VarDecls-> BOOL Modifier VarList
('VarDecls','CHAR')
     1.  VarDecls-> CHAR Modifier VarList
('VarDecls','BYTE')
     1.  VarDecls-> BYTE Modifier VarList
('VarDecls','CARD')
     1.  VarDecls-> CARD Modifier VarList
('VarDecls','INT')
     1.  VarDecls-> INT Modifier VarList
('SysDecls','PROC')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','FUNC')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','IF')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','FOR')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','EXIT')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','UNTILL')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','DEFINE')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','TYPE')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','RECORDTYPE')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','BOOL')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','CHAR')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','BYTE')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','CARD')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','INT')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls','ϵ')
     1.  SysDecls-> SysDecl SysDecls_1
('SysDecls_1','PROC')
     1.  SysDecls_1-> ϵ
('SysDecls_1','FUNC')
     1.  SysDecls_1-> ϵ
('SysDecls_1','IF')
     1.  SysDecls_1-> ϵ
('SysDecls_1','FOR')
     1.  SysDecls_1-> ϵ
('SysDecls_1','EXIT')
     1.  SysDecls_1-> ϵ
('SysDecls_1','UNTILL')
     1.  SysDecls_1-> ϵ
('SysDecls_1',';')
     1.  SysDecls_1-> ; SysDecl SysDecls_1
('SysDecls_1','ϵ')
     1.  SysDecls_1-> ϵ
('SysDecl','PROC')
     1.  SysDecl-> ϵ
('SysDecl','FUNC')
     1.  SysDecl-> ϵ
('SysDecl','IF')
     1.  SysDecl-> ϵ
('SysDecl','FOR')
     1.  SysDecl-> ϵ
('SysDecl','EXIT')
     1.  SysDecl-> ϵ
('SysDecl','UNTILL')
     1.  SysDecl-> ϵ
('SysDecl','DEFINE')
     1.  SysDecl-> DEFINE DefList
('SysDecl','TYPE')
     1.  SysDecl-> TYPE RecIdent
('SysDecl','RECORDTYPE')
     1.  SysDecl-> RECORDTYPE Modifier VarList
('SysDecl','BOOL')
     1.  SysDecl-> BOOL VarList
('SysDecl','CHAR')
     1.  SysDecl-> CHAR Modifier VarList
('SysDecl','BYTE')
     1.  SysDecl-> BYTE Modifier VarList
('SysDecl','CARD')
     1.  SysDecl-> CARD Modifier VarList
('SysDecl','INT')
     1.  SysDecl-> INT Modifier VarList
('SysDecl',';')
     1.  SysDecl-> ϵ
('SysDecl','ϵ')
     1.  SysDecl-> ϵ
('VarList','IDENT')
     1.  VarList-> VarName VarList_1
('VarList_1','PROC')
     1.  VarList_1-> ϵ
('VarList_1','FUNC')
     1.  VarList_1-> ϵ
('VarList_1','IF')
     1.  VarList_1-> ϵ
('VarList_1','FOR')
     1.  VarList_1-> ϵ
('VarList_1','EXIT')
     1.  VarList_1-> ϵ
('VarList_1','UNTILL')
     1.  VarList_1-> ϵ
('VarList_1',']')
     1.  VarList_1-> ϵ
('VarList_1',',')
     1.  VarList_1-> , VarName VarList_1
('VarList_1',';')
     1.  VarList_1-> ϵ
('VarList_1','ϵ')
     1.  VarList_1-> ϵ
('VarName','IDENT')
     1.  VarName-> Ident OptInit
('OptInit','PROC')
     1.  OptInit-> ϵ
('OptInit','FUNC')
     1.  OptInit-> ϵ
('OptInit','IF')
     1.  OptInit-> ϵ
('OptInit','FOR')
     1.  OptInit-> ϵ
('OptInit','EXIT')
     1.  OptInit-> ϵ
('OptInit','UNTILL')
     1.  OptInit-> ϵ
('OptInit','=')
     1.  OptInit-> = CompConst
('OptInit',']')
     1.  OptInit-> ϵ
('OptInit',',')
     1.  OptInit-> ϵ
('OptInit',';')
     1.  OptInit-> ϵ
('OptInit','ϵ')
     1.  OptInit-> ϵ
('DefList','IDENT')
     1.  DefList-> Def DefList_1
('DefList_1',',')
     1.  DefList_1-> , Def DefList_1
('DefList_1','ϵ')
     1.  DefList_1-> ϵ
('Def','IDENT')
     1.  Def-> Ident = CompConst
('RecIdent','=')
     1.  RecIdent-> RecField
('RecField','=')
     1.  RecField-> = [ RecFieldList ]
('RecFieldList','RECORDTYPE')
     1.  RecFieldList-> VarDecls RecFieldList_1
('RecFieldList','BOOL')
     1.  RecFieldList-> VarDecls RecFieldList_1
('RecFieldList','CHAR')
     1.  RecFieldList-> VarDecls RecFieldList_1
('RecFieldList','BYTE')
     1.  RecFieldList-> VarDecls RecFieldList_1
('RecFieldList','CARD')
     1.  RecFieldList-> VarDecls RecFieldList_1
('RecFieldList','INT')
     1.  RecFieldList-> VarDecls RecFieldList_1
('RecFieldList_1',']')
     1.  RecFieldList_1-> ϵ
('RecFieldList_1',';')
     1.  RecFieldList_1-> ; VarDecls RecFieldList_1
('RecFieldList_1','ϵ')
     1.  RecFieldList_1-> ϵ
('Modifier','IDENT')
     1.  Modifier-> ϵ
('Modifier','POINTER')
     1.  Modifier-> POINTER
('Modifier','ARRAY')
     1.  Modifier-> ARRAY ArrayStuff
('Modifier','ϵ')
     1.  Modifier-> ϵ
('ArrayStuff','(')
     1.  ArrayStuff-> ( CompConst ) OptArrayInit
('ArrayStuff','ϵ')
     1.  ArrayStuff-> ϵ
('OptArrayInit','=')
     1.  OptArrayInit-> = [ CompConstList ]
('OptArrayInit','ϵ')
     1.  OptArrayInit-> ϵ
('CompConstList','NUMBER')
     1.  CompConstList-> CompConst CompConstList_1
('CompConstList','@')
     1.  CompConstList-> CompConst CompConstList_1
('CompConstList','*')
     1.  CompConstList-> CompConst CompConstList_1
('CompConstList_1',']')
     1.  CompConstList_1-> ϵ
('CompConstList_1',',')
     1.  CompConstList_1-> , CompConst CompConstList_1
('CompConstList_1','ϵ')
     1.  CompConstList_1-> ϵ
Table Entries = 464
------------ Check For Conflicts-------------
2('Action65','IDENT')
          1.  Ident-> IDENT
          2.  MemContents-> Ident MemContentsType
2('Action65','NUMBER')
          1.  CompConst-> BaseCompConst CompConst_1
          2.  BaseCompConst-> NUMBER
2('Action65','@')
          1.  CompConst-> BaseCompConst CompConst_1
          2.  BaseCompConst-> @ MemContents
2('Action65',',')
          1.  CompConst_1-> ϵ
          2.  MemContentsType-> ϵ
2('Action65','+')
          1.  CompConst_1-> + BaseCompConst CompConst_1
          2.  MemContentsType-> ϵ
3('Action65','*')
          1.  CompConst-> BaseCompConst CompConst_1
          2.  BaseCompConst-> *
          3.  MemContentsType-> ϵ
2('Action65','ϵ')
          1.  CompConst_1-> ϵ
          2.  MemContentsType-> ϵ
