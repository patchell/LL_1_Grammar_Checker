???????? $ Nullable Set(0)
*************  Print Out Grammar Structure************
As65
 -> CodeLines
CodeLines
 -> CodeLine CodeLines_1
CodeLines_1
 -> EOL CodeLine CodeLines_1
 -> e
CodeLine
 -> OptLable AsmStatement
AsmStatement
 -> DefineStorage DefineMemory_1
DefineMemory_1
 -> DB AsmConstList DefineStorage DefineMemory_1
 -> DW AsmConstList DefineStorage DefineMemory_1
 -> DL AsmConstList DefineStorage DefineMemory_1
 -> e
DefineStorage
 -> Proceedure DefineStorage_1
DefineStorage_1
 -> DS AsmConstant Proceedure DefineStorage_1
 -> e
Proceedure
 -> Section Proceedure_1
Proceedure_1
 -> PROC CodeLines EPROC Section Proceedure_1
 -> e
Section
 -> Org Section_1
Section_1
 -> SECTIONTOKEN SectionAttributes Org Section_1
 -> e
SectionAttributes
 -> SectionAtribute SectionAttributes_1
SectionAttributes_1
 -> , SectionAtribute SectionAttributes_1
 -> e
SectionAtribute
 -> NAME = STRING
 -> SIZE = NUMBER
 -> e
Org
 -> Processor Org_1
Org_1
 -> ORG NUMBER Processor Org_1
 -> e
Processor
 -> Instruction Processor_1
Processor_1
 -> PROCESSOR ProcessorType Instruction Processor_1
 -> e
ProcessorType
 -> R6502
 -> WD65C02
 -> WD65C816
Instruction
 -> ADC AluAdrModes
 -> AND AluAdrModes
 -> EOR AluAdrModes
 -> ORA AluAdrModes
 -> CMP AluAdrModes
 -> SBC AluAdrModes
 -> LDA AluAdrModes
 -> STA StaAddressingModes
 -> ASL ShiftAddressingModes
 -> ROL ShiftAddressingModes
 -> LSR ShiftAddressingModes
 -> ROR ShiftAddressingModes
 -> BCC RelAddressingMode
 -> BCS RelAddressingMode
 -> BEQ RelAddressingMode
 -> BMI RelAddressingMode
 -> BNE RelAddressingMode
 -> BPL RelAddressingMode
 -> BVC RelAddressingMode
 -> BVS RelAddressingMode
 -> BIT BitAddressModes
 -> BRK
 -> CLC
 -> CLD
 -> CLI
 -> CLV
 -> DEX
 -> DEY
 -> INX
 -> INY
 -> NOP
 -> PHA
 -> PLA
 -> PHP
 -> PLP
 -> RTI
 -> RTS
 -> SEC
 -> SED
 -> SEI
 -> TAX
 -> TAY
 -> TXA
 -> TYA
 -> TXS
 -> TSX
 -> INC IncAddressingMOdes
 -> DEC IncAddressingMOdes
 -> JMP JumpAddressingModes
 -> JSR CallAddressingMode
 -> CPX CPXAddressingMode
 -> CPY CPXAddressingMode
 -> LDX LdxAddressingMode
 -> LDY LdyAddressingMode
 -> STX StxAddressingMode
 -> STY StyAddressingMode
 -> e
OptLable
 -> IDENT LocalGlobal
 -> e
LocalGlobal
 -> :
 -> e
AluAdrModes
 -> # ConstUpperLower
 -> ( Indirect
 -> AsmConstant OptIndexReg
Indirect
 -> AsmConstant Indirect_1
Indirect_1
 -> ) , YREG
 -> , XREG )
StaAddressingModes
 -> AsmConstant OptIndexReg
 -> ( Indirect
ShiftAddressingModes
 -> AREG
 -> AsmConstant OptXReg
RelAddressingMode
 -> AsmConstant
BitAddressModes
 -> AsmConstant
IncAddressingMOdes
 -> AsmConstant OptXReg
JumpAddressingModes
 -> AsmConstant
 -> ( AsmConstant )
CallAddressingMode
 -> AsmConstant
LdxAddressingMode
 -> AsmConstant OptYReg
 -> # AsmConstant
CPXAddressingMode
 -> AsmConstant
 -> # AsmConstant
StxAddressingMode
 -> AsmConstant OptYReg
LdyAddressingMode
 -> AsmConstant OptXReg
 -> # AsmConstant
StyAddressingMode
 -> AsmConstant OptXReg
OptIndexReg
 -> , OptIndexReg_1
 -> e
OptIndexReg_1
 -> XREG
 -> YREG
OptXReg
 -> , XREG
 -> e
OptYReg
 -> , YREG
 -> e
AsmConstList
 -> AsmConstant AsmConstList_1
AsmConstList_1
 -> , AsmConstant AsmConstList_1
AsmConstant
 -> ConstUpperLower String_1
String_1
 -> STRING
 -> e
ConstUpperLower
 -> > ConstUpperLower
 -> < ConstUpperLower
 -> AsmConstant_1
AsmConstant_1
 -> BaseAsmConstant AsmConstant_2
AsmConstant_2
 -> + BaseAsmConstant AsmConstant_2
 -> - BaseAsmConstant AsmConstant_2
 -> e
BaseAsmConstant
 -> LOCAL_LABLE
 -> GLOBAL_LABLE
 -> IDENT
 -> NUMBER
 -> CHAR_CONSTANT
 -> *
 -> e
TERMINALS['Terminals'] { 'ADC','AND','ASL','BCC','BCS','BEQ','BMI','BNE','BPL','BVC'
,'BVS','BIT','BRK','CLC','CLD','CLI','CLV','CMP','CPX','CPY','DEC','DEX','DEY','EOR'
,'INC','INX','INY','JMP','JSR','LDA','LDX','LDY','LSR','NOP','ORA','PHA','PLA','PHP'
,'PLP','ROL','ROR','RTI','RTS','SBC','STA','SEC','SED','SEI','STX','STY','TAX','TAY'
,'TXA','TYA','TXS','TSX','AREG','XREG','YREG','IDENT','LOCAL_LABLE','GLOBAL_LABLE'
,'STRING','HEX_NUMBER','CHAR_CONSTANT','SYMBOL','NUMBER','ORG','DB','DW','DL','DS'
,'INCLUDE','SECTIONTOKEN','NAME','SIZE','START','MODE','READ_WRITE','READ_ONLY','R6502'
,'PROCESSOR','WD65C02','WD65C816','VALUE','PROC','EPROC','EOL',',','=',':','#','('
,')','>','<','+','-','*','e','$' }
NONTERMINALS['Non Terminals'] { 'As65','CodeLines','CodeLines_1','CodeLine','AsmStatement'
,'DefineMemory_1','DefineStorage','DefineStorage_1','Proceedure','Proceedure_1','Section'
,'Section_1','SectionAttributes','SectionAttributes_1','SectionAtribute','Org','Org_1'
,'Processor','Processor_1','ProcessorType','Instruction','OptLable','LocalGlobal'
,'AluAdrModes','Indirect','Indirect_1','StaAddressingModes','ShiftAddressingModes'
,'RelAddressingMode','BitAddressModes','IncAddressingMOdes','JumpAddressingModes'
,'CallAddressingMode','LdxAddressingMode','CPXAddressingMode','StxAddressingMode'
,'LdyAddressingMode','StyAddressingMode','OptIndexReg','OptIndexReg_1','OptXReg','OptYReg'
,'AsmConstList','AsmConstList_1','AsmConstant','String_1','ConstUpperLower','AsmConstant_1'
,'AsmConstant_2','BaseAsmConstant' }
*********** Build Nullable Set **********
****************Create NOT nullable set ************************
----- Calc First Sets------
FIRST['As65'] { }
FIRST['CodeLines'] { }
FIRST['CodeLines_1'] { 'e' }
FIRST['CodeLine'] { }
FIRST['AsmStatement'] { }
FIRST['DefineMemory_1'] { 'e' }
FIRST['DefineStorage'] { }
FIRST['DefineStorage_1'] { 'e' }
FIRST['Proceedure'] { }
FIRST['Proceedure_1'] { 'e' }
FIRST['Section'] { }
FIRST['Section_1'] { 'e' }
FIRST['SectionAttributes'] { 'e' }
FIRST['SectionAttributes_1'] { ',','e' }
FIRST['SectionAtribute'] { 'e' }
FIRST['Org'] { }
FIRST['Org_1'] { 'e' }
FIRST['Processor'] { 'e' }
FIRST['Processor_1'] { 'e' }
FIRST['ProcessorType'] { }
FIRST['Instruction'] { 'e' }
FIRST['OptLable'] { 'e' }
FIRST['LocalGlobal'] { ':','e' }
FIRST['AluAdrModes'] { '#','(','>','<' }
FIRST['Indirect'] { '>','<' }
FIRST['Indirect_1'] { ')',',' }
FIRST['StaAddressingModes'] { '(','>','<' }
FIRST['ShiftAddressingModes'] { '>','<' }
FIRST['RelAddressingMode'] { '>','<' }
FIRST['BitAddressModes'] { '>','<' }
FIRST['IncAddressingMOdes'] { '>','<' }
FIRST['JumpAddressingModes'] { '(','>','<' }
FIRST['CallAddressingMode'] { '>','<' }
FIRST['LdxAddressingMode'] { '#','>','<' }
FIRST['CPXAddressingMode'] { '#','>','<' }
FIRST['StxAddressingMode'] { '>','<' }
FIRST['LdyAddressingMode'] { '#','>','<' }
FIRST['StyAddressingMode'] { '>','<' }
FIRST['OptIndexReg'] { ',','e' }
FIRST['OptIndexReg_1'] { }
FIRST['OptXReg'] { ',','e' }
FIRST['OptYReg'] { ',','e' }
FIRST['AsmConstList'] { '>','<' }
FIRST['AsmConstList_1'] { ',' }
FIRST['AsmConstant'] { '>','<' }
FIRST['String_1'] { 'e' }
FIRST['ConstUpperLower'] { '>','<' }
FIRST['AsmConstant_1'] { 'e','*' }
FIRST['AsmConstant_2'] { '+','-','e' }
FIRST['BaseAsmConstant'] { '*','e' }
----- Calc Follow Sets------
------------ Follow Sets ---------------
FOLLOW['As65'] { '$' }
FOLLOW['CodeLines'] { '$' }
FOLLOW['CodeLines_1'] { '$' }
FOLLOW['CodeLine'] { '$' }
FOLLOW['AsmStatement'] { '$' }
FOLLOW['DefineMemory_1'] { '$' }
FOLLOW['DefineStorage'] { '$' }
FOLLOW['DefineStorage_1'] { '$' }
FOLLOW['Proceedure'] { '$' }
FOLLOW['Proceedure_1'] { '$' }
FOLLOW['Section'] { '$' }
FOLLOW['Section_1'] { '$' }
FOLLOW['SectionAttributes'] { }
FOLLOW['SectionAttributes_1'] { }
FOLLOW['SectionAtribute'] { ',' }
FOLLOW['Org'] { '$' }
FOLLOW['Org_1'] { '$' }
FOLLOW['Processor'] { '$' }
FOLLOW['Processor_1'] { '$' }
FOLLOW['ProcessorType'] { }
FOLLOW['Instruction'] { '$' }
FOLLOW['OptLable'] { }
FOLLOW['LocalGlobal'] { }
FOLLOW['AluAdrModes'] { }
FOLLOW['Indirect'] { }
FOLLOW['Indirect_1'] { }
FOLLOW['StaAddressingModes'] { }
FOLLOW['ShiftAddressingModes'] { }
FOLLOW['RelAddressingMode'] { }
FOLLOW['BitAddressModes'] { }
FOLLOW['IncAddressingMOdes'] { }
FOLLOW['JumpAddressingModes'] { }
FOLLOW['CallAddressingMode'] { }
FOLLOW['LdxAddressingMode'] { }
FOLLOW['CPXAddressingMode'] { }
FOLLOW['StxAddressingMode'] { }
FOLLOW['LdyAddressingMode'] { }
FOLLOW['StyAddressingMode'] { }
FOLLOW['OptIndexReg'] { }
FOLLOW['OptIndexReg_1'] { }
FOLLOW['OptXReg'] { }
FOLLOW['OptYReg'] { }
FOLLOW['AsmConstList'] { }
FOLLOW['AsmConstList_1'] { }
FOLLOW['AsmConstant'] { ',',')' }
FOLLOW['String_1'] { ',',')' }
FOLLOW['ConstUpperLower'] { ',',')' }
FOLLOW['AsmConstant_1'] { ',',')' }
FOLLOW['AsmConstant_2'] { ',',')' }
FOLLOW['BaseAsmConstant'] { '+','-',',',')' }
---------------- Create Parse Table --------------
Table Entries = 94
------------ Check For Conflicts-------------
