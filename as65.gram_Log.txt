???????? $ Nullable Set(0)
*************  Print Out Grammar Structure************
As65
 -> CodeLines
CodeLines
 -> DefineStorage DefineMemory_1
DefineMemory_1
 -> DB AsmConstList DefineStorage DefineMemory_1
 -> DW AsmConstList DefineStorage DefineMemory_1
 -> DL AsmConstList DefineStorage DefineMemory_1
 -> e
DefineStorage
 -> Proceedure DefineStorage_1
DefineStorage_1
 -> DS AsmConstant Proceedure DefineStorage_1
 -> e
Proceedure
 -> Section Proceedure_1
Proceedure_1
 -> PROC CodeLines EPROC Section Proceedure_1
 -> e
Section
 -> Org Section_1
Section_1
 -> SECTIONTOKEN SectionAttributes Org Section_1
 -> e
SectionAttributes
 -> SectionAtribute SectionAttributes_1
SectionAttributes_1
 -> , SectionAtribute SectionAttributes_1
 -> e
SectionAtribute
 -> NAME = STRING
 -> SIZE = NUMBER
 -> e
Org
 -> Processor Org_1
Org_1
 -> ORG NUMBER Processor Org_1
 -> e
Processor
 -> Operator Processor_1
Processor_1
 -> PROCESSOR ProcessorType Operator Processor_1
 -> e
ProcessorType
 -> R6502
 -> WD65C02
 -> WD65C816
Operator
 -> Lable Operator_1
Operator_1
 -> ADC AluAdrModes Lable Operator_1
 -> AND AluAdrModes Lable Operator_1
 -> EOR AluAdrModes Lable Operator_1
 -> ORA AluAdrModes Lable Operator_1
 -> CMP AluAdrModes Lable Operator_1
 -> SBC AluAdrModes Lable Operator_1
 -> LDA AluAdrModes Lable Operator_1
 -> STA StaAddressingModes Lable Operator_1
 -> ASL ShiftAddressingModes Lable Operator_1
 -> ROL ShiftAddressingModes Lable Operator_1
 -> LSR ShiftAddressingModes Lable Operator_1
 -> ROR ShiftAddressingModes Lable Operator_1
 -> BCC RelAddressingMode Lable Operator_1
 -> BCS RelAddressingMode Lable Operator_1
 -> BEQ RelAddressingMode Lable Operator_1
 -> BMI RelAddressingMode Lable Operator_1
 -> BNE RelAddressingMode Lable Operator_1
 -> BPL RelAddressingMode Lable Operator_1
 -> BVC RelAddressingMode Lable Operator_1
 -> BVS RelAddressingMode Lable Operator_1
 -> BIT BitAddressModes Lable Operator_1
 -> BRK Lable Operator_1
 -> CLC Lable Operator_1
 -> CLD Lable Operator_1
 -> CLI Lable Operator_1
 -> CLV Lable Operator_1
 -> DEX Lable Operator_1
 -> DEY Lable Operator_1
 -> INX Lable Operator_1
 -> INY Lable Operator_1
 -> NOP Lable Operator_1
 -> PHA Lable Operator_1
 -> PLA Lable Operator_1
 -> PHP Lable Operator_1
 -> PLP Lable Operator_1
 -> RTI Lable Operator_1
 -> RTS Lable Operator_1
 -> SEC Lable Operator_1
 -> SED Lable Operator_1
 -> SEI Lable Operator_1
 -> TAX Lable Operator_1
 -> TAY Lable Operator_1
 -> TXA Lable Operator_1
 -> TYA Lable Operator_1
 -> TXS Lable Operator_1
 -> TSX Lable Operator_1
 -> INC IncAddressingMOdes Lable Operator_1
 -> DEC IncAddressingMOdes Lable Operator_1
 -> JMP JumpAddressingModes Lable Operator_1
 -> JSR CallAddressingMode Lable Operator_1
 -> CPX CPXAddressingMode Lable Operator_1
 -> CPY CPXAddressingMode Lable Operator_1
 -> LDX LdxAddressingMode Lable Operator_1
 -> LDY LdyAddressingMode Lable Operator_1
 -> STX StxAddressingMode Lable Operator_1
 -> STY StyAddressingMode Lable Operator_1
 -> e
Lable
 -> IDENT Lable
 -> : IDENT Lable
 -> e
AluAdrModes
 -> # ConstUpperLower
 -> ( Indirect
 -> AsmConstant OptIndexReg
Indirect
 -> AsmConstant Indirect_1
Indirect_1
 -> ) , YREG
 -> , XREG )
StaAddressingModes
 -> AsmConstant OptIndexReg
 -> ( Indirect
ShiftAddressingModes
 -> AREG
 -> AsmConstant OptXReg
RelAddressingMode
 -> AsmConstant
BitAddressModes
 -> AsmConstant
IncAddressingMOdes
 -> AsmConstant OptXReg
JumpAddressingModes
 -> AsmConstant
 -> ( AsmConstant )
CallAddressingMode
 -> AsmConstant
LdxAddressingMode
 -> AsmConstant OptYReg
 -> # AsmConstant
CPXAddressingMode
 -> AsmConstant
 -> # AsmConstant
StxAddressingMode
 -> AsmConstant OptYReg
LdyAddressingMode
 -> AsmConstant OptXReg
 -> # AsmConstant
StyAddressingMode
 -> AsmConstant OptXReg
OptIndexReg
 -> , OptIndexReg_1
 -> e
OptIndexReg_1
 -> XREG
 -> YREG
OptXReg
 -> , XREG
 -> e
OptYReg
 -> , YREG
 -> e
AsmConstList
 -> AsmConstant AsmConstList_1
AsmConstList_1
 -> , AsmConstant AsmConstList_1
AsmConstant
 -> ConstUpperLower String_1
String_1
 -> STRING
 -> e
ConstUpperLower
 -> > ConstUpperLower
 -> < ConstUpperLower
 -> AsmConstant_1
AsmConstant_1
 -> BaseAsmConstant AsmConstant_2
AsmConstant_2
 -> + BaseAsmConstant AsmConstant_2
 -> - BaseAsmConstant AsmConstant_2
 -> e
BaseAsmConstant
 -> IDENT
 -> NUMBER
 -> CHAR_CONSTANT
 -> *
 -> e
TERMINALS['Terminals'] { 'ADC','AND','ASL','BCC','BCS','BEQ','BMI','BNE','BPL','BVC'
,'BVS','BIT','BRK','CLC','CLD','CLI','CLV','CMP','CPX','CPY','DEC','DEX','DEY','EOR'
,'INC','INX','INY','JMP','JSR','LDA','LDX','LDY','LSR','NOP','ORA','PHA','PLA','PHP'
,'PLP','ROL','ROR','RTI','RTS','SBC','STA','SEC','SED','SEI','STX','STY','TAX','TAY'
,'TXA','TYA','TXS','TSX','AREG','XREG','YREG','IDENT','LABLE','STRING','HEX_NUMBER'
,'CHAR_CONSTANT','SYMBOL','NUMBER','ORG','DB','DW','DL','DS','INCLUDE','SECTIONTOKEN'
,'NAME','SIZE','START','MODE','READ_WRITE','READ_ONLY','R6502','PROCESSOR','WD65C02'
,'WD65C816','VALUE','PROC','EPROC',',','=',':','#','(',')','>','<','+','-','*','e'
,'$' }
NONTERMINALS['Non Terminals'] { 'As65','CodeLines','DefineMemory_1','DefineStorage'
,'DefineStorage_1','Proceedure','Proceedure_1','Section','Section_1','SectionAttributes'
,'SectionAttributes_1','SectionAtribute','Org','Org_1','Processor','Processor_1','ProcessorType'
,'Operator','Operator_1','Lable','AluAdrModes','Indirect','Indirect_1','StaAddressingModes'
,'ShiftAddressingModes','RelAddressingMode','BitAddressModes','IncAddressingMOdes'
,'JumpAddressingModes','CallAddressingMode','LdxAddressingMode','CPXAddressingMode'
,'StxAddressingMode','LdyAddressingMode','StyAddressingMode','OptIndexReg','OptIndexReg_1'
,'OptXReg','OptYReg','AsmConstList','AsmConstList_1','AsmConstant','String_1','ConstUpperLower'
,'AsmConstant_1','AsmConstant_2','BaseAsmConstant' }
*********** Build Nullable Set **********
****************Create NOT nullable set ************************
----- Calc First Sets------
FIRST['As65'] { ':' }
FIRST['CodeLines'] { ':' }
FIRST['DefineMemory_1'] { 'e' }
FIRST['DefineStorage'] { ':' }
FIRST['DefineStorage_1'] { 'e' }
FIRST['Proceedure'] { ':' }
FIRST['Proceedure_1'] { 'e' }
FIRST['Section'] { ':' }
FIRST['Section_1'] { 'e' }
FIRST['SectionAttributes'] { 'e' }
FIRST['SectionAttributes_1'] { ',','e' }
FIRST['SectionAtribute'] { 'e' }
FIRST['Org'] { ':' }
FIRST['Org_1'] { 'e' }
FIRST['Processor'] { ':' }
FIRST['Processor_1'] { 'e' }
FIRST['ProcessorType'] { }
FIRST['Operator'] { 'e',':' }
FIRST['Operator_1'] { 'e' }
FIRST['Lable'] { ':','e' }
FIRST['AluAdrModes'] { '#','(','>','<' }
FIRST['Indirect'] { '>','<' }
FIRST['Indirect_1'] { ')',',' }
FIRST['StaAddressingModes'] { '(','>','<' }
FIRST['ShiftAddressingModes'] { '>','<' }
FIRST['RelAddressingMode'] { '>','<' }
FIRST['BitAddressModes'] { '>','<' }
FIRST['IncAddressingMOdes'] { '>','<' }
FIRST['JumpAddressingModes'] { '(','>','<' }
FIRST['CallAddressingMode'] { '>','<' }
FIRST['LdxAddressingMode'] { '#','>','<' }
FIRST['CPXAddressingMode'] { '#','>','<' }
FIRST['StxAddressingMode'] { '>','<' }
FIRST['LdyAddressingMode'] { '#','>','<' }
FIRST['StyAddressingMode'] { '>','<' }
FIRST['OptIndexReg'] { ',','e' }
FIRST['OptIndexReg_1'] { }
FIRST['OptXReg'] { ',','e' }
FIRST['OptYReg'] { ',','e' }
FIRST['AsmConstList'] { '>','<' }
FIRST['AsmConstList_1'] { ',' }
FIRST['AsmConstant'] { '>','<' }
FIRST['String_1'] { 'e' }
FIRST['ConstUpperLower'] { '>','<' }
FIRST['AsmConstant_1'] { 'e','*' }
FIRST['AsmConstant_2'] { '+','-','e' }
FIRST['BaseAsmConstant'] { '*','e' }
----- Calc Follow Sets------
------------ Follow Sets ---------------
FOLLOW['As65'] { '$' }
FOLLOW['CodeLines'] { '$' }
FOLLOW['DefineMemory_1'] { '$' }
FOLLOW['DefineStorage'] { '$' }
FOLLOW['DefineStorage_1'] { '$' }
FOLLOW['Proceedure'] { '$' }
FOLLOW['Proceedure_1'] { '$' }
FOLLOW['Section'] { '$' }
FOLLOW['Section_1'] { '$' }
FOLLOW['SectionAttributes'] { }
FOLLOW['SectionAttributes_1'] { }
FOLLOW['SectionAtribute'] { ',' }
FOLLOW['Org'] { '$' }
FOLLOW['Org_1'] { '$' }
FOLLOW['Processor'] { '$' }
FOLLOW['Processor_1'] { '$' }
FOLLOW['ProcessorType'] { }
FOLLOW['Operator'] { '$' }
FOLLOW['Operator_1'] { '$' }
FOLLOW['Lable'] { '$' }
FOLLOW['AluAdrModes'] { }
FOLLOW['Indirect'] { }
FOLLOW['Indirect_1'] { }
FOLLOW['StaAddressingModes'] { }
FOLLOW['ShiftAddressingModes'] { }
FOLLOW['RelAddressingMode'] { }
FOLLOW['BitAddressModes'] { }
FOLLOW['IncAddressingMOdes'] { }
FOLLOW['JumpAddressingModes'] { }
FOLLOW['CallAddressingMode'] { }
FOLLOW['LdxAddressingMode'] { }
FOLLOW['CPXAddressingMode'] { }
FOLLOW['StxAddressingMode'] { }
FOLLOW['LdyAddressingMode'] { }
FOLLOW['StyAddressingMode'] { }
FOLLOW['OptIndexReg'] { }
FOLLOW['OptIndexReg_1'] { }
FOLLOW['OptXReg'] { }
FOLLOW['OptYReg'] { }
FOLLOW['AsmConstList'] { }
FOLLOW['AsmConstList_1'] { }
FOLLOW['AsmConstant'] { ',',')' }
FOLLOW['String_1'] { ',',')' }
FOLLOW['ConstUpperLower'] { ',',')' }
FOLLOW['AsmConstant_1'] { ',',')' }
FOLLOW['AsmConstant_2'] { ',',')' }
FOLLOW['BaseAsmConstant'] { '+','-',',',')' }
---------------- Create Parse Table --------------
Table Entries = 100
------------ Check For Conflicts-------------
