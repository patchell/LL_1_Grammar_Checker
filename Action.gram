//----------------------------------
// ACTION! compiler for the 6502
// Version 0.0.1 Nov 27, 2024
//----------------------------------

TERMINALS
	"IDENT" = 256,
	"NUMBER",
	"STRING",
	"VECTOR",
	"MODULE",
	"RETURN",
	"PROC",
	"FUNC",
	"INTERRUPT",
	"INTERRUPT_IDENT",
	"PROC_IDENT",
	"FUNC_IDENT",
	"FOR",
	"WHILE",
	"DO",
	"OD",
	"BEGIN",
	"END",
	"EXIT",
	"IF",
	"THEN",
	"ELSEIF",
	"ELSE",
	"FI",
	"IFF",
	"FFI",
	"UNTILL",
	"TO",
	"STEP",
	"OR",		// Logical OR operator
	"AND",		// Logical AND operator or cpu AND opcode
	"GTEQ",
	"LTEQ",
	"DEFINE",
	"TYPE",
	"RECORDTYPE",
	"BOOL",
	"CHAR",
	"BYTE",
	"CARD",
	"INT",
	"POINTER",
	"ARRAY",
	"PUSH",
	"POP",
	"BREAK",
	"BITS",
	"ACC",
	"XREG",
	"YREG",
	"ASM",
	//Assembler Tokens
	"SECTION",
	"START",
	"SIZE",
	"MODE",
	"ZEROPAGE",
	"READ_ONLY",
	"READ_WRITE",
	"true",
	"false",
	"ORG",
	"DB",
	"DW",
	"DL",
	"DAS",	//ACTION! STRING
	"DCS",	// 'C' STRING
	"DS",	// DEFINE STORAGE, BLOCK OF MEMORY
	"ASMPROC",
	"EPROC",
	"LOCAL_LABLE",
	"GLOBAL_LABLE",
	"GLOBAL_LABLE",
	"ADC",
//	"AND",		// see logical AND
	"ASL",
	"BCC",
	"BCS",
	"BEQ",
	"BMI",
	"BNE",
	"BPL",
	"BVC",
	"BVS",
	"BIT",
	"BRK",
	"CLC",
	"CLD",
	"CLI",
	"CLV",
	"CMP",
	"CPX",
	"CPY",
	"DEC",
	"DEX",
	"DEY",
	"EOR",
	"INC",
	"INX",
	"INY",
	"JMP",
	"JSR",
	"LDA",
	"LDX",
	"LDY",
	"LSR",
	"NOP",
	"ORA",
	"PHA",
	"PLA",
	"PHP",
	"PLP",
	"ROL",
	"ROR",
	"RTI",
	"RTS",
	"SBC",
	"STA",
	"SEC",
	"SED",
	"SEI",
	"STX",
	"STY",
	"TAX",
	"TAY",
	"TXA",
	"TYA",
	"TXS",
	"TSX",
	"X",
	"Y",
	"A",
	"SR",		// Status Register
	"@",		// address of operator
	".",		// record field operator
	"^",		// pointer dereference
	"!",
	"XOR",
	"&",		// bitwise AND
	"%",		// bitwise OR
	"#",		// Not equals
	">",		// greater than
	"<",		// less than
	"{",
	"}",
	"=",		// assignment or equal to
	"==+",
	"==-",
	"==*",
	"==/",
	"==MOD",
	"==&",
	"==!",
	"==XOR",
	"==%",
	"==LSH",
	"==RSH",
	"[",
	"]",
	",",
	";",
	"+",
	"-",
	"*",
	"/",
	"MOD",
	"LSH",
	"RSH",
	"(",
	")",
	"NEG",		//cpu 'N'eg status register flage
	"CARRY",		// cpu 'C'arry status register flag
	"ZERO",		// cpu 'Z'ero status register flag
	"OVERFLOW"		// cpu 'O'verflow status register flag

GRAMMAR
//--------------------------------
// Program Structure
//--------------------------------
Action65	-> Modules;

Modules		-> Vector Modules_1;
Modules_1	-> 'MODULE' Vector Modules_1
			-> .
			;

Vector			-> SysDecl Vector_1;
Vector_1		-> 'VECTOR' VectorAddress SysDecl Vector_1
				-> .
				;
VectorAddress	-> '(' CompConst ')' VectorData;
VectorData		-> '=' CompConst;


//------------------------------------------
// Statements
//------------------------------------------


//---------------------------------------
// Proceedure/Function Call
//---------------------------------------
Statements		->ForStmt ProcCall_1;
ProcCall_1		-> 'PROC_IDENT' ProcParams ForStmt ProcCall_1
				-> 'FUNC_IDENT' ProcParams ForStmt ProcCall_1
				-> .
				;

ProcParams		->  ProcParamsEnd ProcParams_1;
ProcParams_1	->	'(' ProcParamsEnd
				-> .
				;

ProcParamsEnd	-> ValueList ProcParamsEnd_1;
ProcParamsEnd_1	-> ')'
				-> .
				;

//------------------------------------------------
// FOR statement
//------------------------------------------------
ForStmt			-> IfStmt ForStmt_1;
ForStmt_1		-> 'FOR' STEPoption DoStmt ForStmt_1
				-> .
				;
STEPoption		-> ForTO STEPoption_1;
STEPoption_1	-> 'STEP' ArithExpr
				-> .
				;
ForTO			-> Itterrator ForTO_1;
ForTO_1		-> 'TO' ArithExpr
				-> .
				;
Itterrator		-> MemContentsType Itterrator_1;
Itterrator_1	-> '=' ArithExpr
				-> .
				;

//------------------------------------------------
// IF statement
//------------------------------------------------
IfStmt			-> Iff IfStmt_1;
IfStmt_1		-> 'IF' EndIF Iff IfStmt_1
				-> .
				;

EndIF		-> ElsePart EndIF_1;
EndIF_1		-> 'FI';

ElsePart	-> ElseIfPart ElsePart_1;
ElsePart_1	-> 'ELSE' Statements
			-> .
			;

ElseIfPart		-> ThenPart ElseIfPart_1;
ElseIfPart_1	-> 'ELSEIF' ThenPart ElseIfPart_1
				-> .
				;

ThenPart	-> RelOperation ThenPart_1;
ThenPart_1	-> 'THEN' Statements
			-> .
			;

//-------------------------------------------------
// IFF Statement
//-------------------------------------------------

Iff		-> WhileStmt Iff_1;
Iff_1	-> 'IFF' IFFend WhileStmt Iff_1
		-> .
		;

IFFend		-> IFFelse IFFend_1;
IFFend_1	-> 'FFI';

IFFelse		-> IFFthenpart IFFelse_1;
IFFelse_1	-> 'ELSE' Statements
			-> .
			;
IFFthenpart		-> IffConditional IFFthenpart_1;
IFFthenpart_1	-> 'THEN' Statements
				-> .
				;

IffConditional	-> Bits IffConditional_1;
IffConditional_1-> 'AREG' RelOper 
				-> 'XREG' RelOper 
				-> 'YREG' RelOper 
				-> .
				;
RelOper			-> '<' Value
				-> 'GTEQ' Value
				-> '=' Value
				-> .
				;

Bits			->StatusFlags Bits_1;
Bits_1			-> 'BITS' BitValue
				-> .
				;
BitValue		-> '[' ArithExpr ']';

StatusFlags		-> OptNot StatusFlags_1;
StatusFlags_1	-> 'NEG'		//negative flag
				-> 'CARRY'		//Carry flag
				-> 'ZERO'		//Zero
				-> 'OVERFLOW'		//Overflow
				;

OptNot			-> '^'
				-> .
				;


//-------------------------------------------------
// WHILE Statement
//-------------------------------------------------
WhileStmt		-> DoStmt WhileStmt_1;
WhileStmt_1		-> 'WHILE'  RelOperation DoStmt WhileStmt_1
				-> .
				;

//------------------------------------------------
// DO Statement
//------------------------------------------------
DoStmt			-> EXITstmt DoStmt_1;
DoStmt_1		-> 'DO' DoEnd DoStmt_1
				-> .
				;
DoEnd			-> Statements DoEnd_1;
DoEnd_1			-> 'OD'
				-> .
				;

//---------------------------------------------------
// EXIT Statement
//---------------------------------------------------
EXITstmt		-> RetStmt EXITstmt_1;
EXITstmt_1		-> 'EXIT' RetStmt EXITstmt_1
				-> .
				;
//-------------------------------------------------
// RETURN Statement
//-------------------------------------------------
RetStmt		-> InlineAssembly RetStmt_1;
RetStmt_1	-> 'RETURN' OptReturnValue  InlineAssembly RetStmt_1
				-> .
				;
OptReturnValue	-> '(' ArithExpr ')'
				-> .
				;
//---------------------------------------------
// Inline Assembly Code
//---------------------------------------------
InlineAssembly		-> CodeBlock InlineAssembly_1;
InlineAssembly_1	-> 'ASM' InlineAssBlock CodeBlock InlineAssembly_1
					-> .
					;

InlineAssBlock		-> EndAsmBlock InlineAssBlock_1;
InlineAssBlock_1	-> '{' EndAsmBlock InlineAssBlock_1
					-> .
					;
EndAsmBlock			-> AsmStmt EndAsmBlock_1;
EndAsmBlock_1		-> '}'
					-> .
					;
//-----------------------------------------------
// CODE (Kluge) BLOCK statement
//-----------------------------------------------
CodeBlock		-> UntillStmt CodeBlock_1;
CodeBlock_1		-> '[' CodeBlockEnd UntillStmt CodeBlock_1
				-> .
				;
CodeBlockEnd	-> ConstList CodeBlockEnd_1;
CodeBlockEnd_1	-> ']'
				-> .
				;

//---------------------------------------------------
// UNTILE Statement
//---------------------------------------------------
UntillStmt		-> Push UntillStmt_1;
UntillStmt_1	-> 'UNTILL' RelOperation Push UntillStmt_1
				-> .
				;
//---------------------------------------------------
// PUSH Statement
//---------------------------------------------------

Push		-> Pop Push_1;
Push_1		-> 'PUSH' PushSourceList Pop Push_1
			-> .
			;
PushSourceList	-> PushSource PushSourceList_1;
PushSourceList_1-> ',' PushSource PushSourceList_1
				-> .
				;
PushSource	-> ArithExpr PushSource_1;
PushSource_1-> 'AREG'
			-> 'XREG'
			-> 'YREG'
			-> 'SR'
			-> .
			;
//---------------------------------------------------
// POP Statment
//---------------------------------------------------
Pop			-> Break Pop_1;
Pop_1		-> 'POP' PopDestList Break Pop_1
			-> .
			;
PopDestList		-> PopDest PopDestList_1;
PopDestList_1	-> ',' PopDest PopDestList_1
				-> .
				;
PopDest		-> MemContentsType PopDest_1;
PopDest_1	-> 'AREG'
			-> 'XREG'
			-> 'YREG'
			-> 'SR'
			-> .
			;
//--------------------------------------------------
// BREAK Statement (Assembler BRK) Software Interrupt
//--------------------------------------------------
Break	-> Rti Break_1;
Break_1	-> 'BREAK' Rti Break_1
		-> .
		;
//--------------------------------------------------
// RTI  Return from interrupt statement
//--------------------------------------------------
Rti		-> Assignment Rti_1;
Rti_1	-> 'RTI' Assignment Rti_1
		-> .
		;
//---------------------------------------------------
// Assignment Statements
//---------------------------------------------------

Assignment	-> MemContentsType Assignment_1;
Assignment_1->  '=' ArithExpr Assignment_1
			-> '==+' ArithExpr  Assignment_1
			->  '==-' ArithExpr  Assignment_1
			->  '==*' ArithExpr  Assignment_1
			->  '==/' ArithExpr Assignment_1
			->  '==MOD' ArithExpr Assignment_1
			->  '==&' ArithExpr	Assignment_1	// AND
			->  '==!' ArithExpr Assignment_1	//XOR
			->  '==%' ArithExpr Assignment_1	//OR
			->  '==LSH' ArithExpr Assignment_1
			->  '==RSH' ArithExpr Assignment_1
			-> .
			;

//----------------------------------------------
// Relation Operations
//----------------------------------------------

RelOperation	-> LogicalOR RelOperation_1;
RelOperation_1	-> '>' LogicalOR RelOperation_1
				-> '<' LogicalOR RelOperation_1
				-> 'GTEQ' LogicalOR RelOperation_1
				-> 'LTEQ' LogicalOR RelOperation_1
				-> '=' LogicalOR RelOperation_1
				-> '#' LogicalOR RelOperation_1	//not equal
				-> .
				;

LogicalOR	-> LogicalAND LogicalOR_1;
LogicalOR_1	-> 'OR' LogicalAND LogicalOR_1
			-> .
			;

LogicalAND		-> ArithExpr LogicalAND_1;
LogicalAND_1	-> 'AND' ArithExpr LogicalAND_1
				-> .
				;

//--------------------------------------
// Arithmetic Expressions
//--------------------------------------

ArithExpr	-> BitwiseAND BitwiseOR_1;
BitwiseOR_1	-> '%' BitwiseAND BitwiseOR_1
			-> .
			;

BitwiseAND		-> BitwiseXOR BitwiseAND_1;
BitwiseAND_1	-> '&' BitwiseXOR BitwiseAND_1
				-> .
				;

BitwiseXOR		-> AddExpr BitwiseXOR_1;
BitwiseXOR_1	-> '!' AddExpr BitwiseXOR_1
				-> 'XOR' AddExpr BitwiseXOR_1
				-> .
				;

AddExpr	-> ShifExpr AddExpr_1;
AddExpr_1	-> '+' ShifExpr AddExpr_1
			-> '-' ShifExpr AddExpr_1
			-> .
			;

ShifExpr	-> MultExpr ShiftExpr_1;
ShiftExpr_1	-> 'LSH' MultExpr ShiftExpr_1
			-> 'RSH' MultExpr ShiftExpr_1
			-> .
			;

MultExpr	-> Unary MultExpr_1;
MultExpr_1	-> '*' Unary MultExpr_1
			-> '/' Unary MultExpr_1
			-> 'MOD' Unary MultExpr_1
			-> .
			;

Unary	-> '-' Unary
		-> Factor
		;

Factor		-> Value Factor_1;
Factor_1	-> '(' ArithExpr ')'
			-> .
			;
		 
//-------------------------------------------
// Declarations
//-------------------------------------------
// DEFINE declaration  Sort of a MACRO defination
//-------------------------------------------
SysDecl		-> TypeDefDecl Define;
Define	-> 'DEFINE' DefList TypeDefDecl Define
			-> .
			;
DefList	-> Def DefList_1;
DefList_1	-> ',' Def DefList_1
			-> .
			;
Def		-> IDENT '=' CompConst;

//----------------------------------------------
// TYPE Defination  Creates User define data
// object.
//----------------------------------------------
TypeDefDecl		-> FundDecl TypeDefDecl_1;
TypeDefDecl_1	-> 'TYPE' EndTypeDef FundDecl TypeDefDecl_1
				-> .
				;
EndTypeDef		-> RecDefField EndTypeDef_1;
EndTypeDef_1	-> ']'
				-> .
				;
RecDefField		-> Ident RecDefField_1;
RecDefField_1	-> '=' '[' LocalDecls
				-> '[' LocalDecls
				-> .
				;


//--------------------------------------------
// Fundemental Declarations.  These are the
// base types that every thing is based on
//--------------------------------------------
FundDecl	->FundPointerDecl FundDecl_1;
FundDecl_1	-> 'BOOL' FundPointerDecl FundDecl_1
			-> 'CHAR' FundPointerDecl FundDecl_1
			-> 'BYTE' FundPointerDecl FundDecl_1
			-> 'INT' FundPointerDecl FundDecl_1
			-> 'CARD' FundPointerDecl FundDecl_1
			-> 'RECORDTYPE' FundPointerDecl FundDecl_1
			-> .
			;

FundPointerDecl		-> FundArrayDecl FundPointerDecl_1;
FundPointerDecl_1	-> 'POINTER' FundArrayDecl
					-> .
					;

FundArrayDecl	-> FunctionDecl FundArrayDecl_1;
FundArrayDecl_1	-> 'ARRAY' FunctionDecl 
				-> .
				;

FunctionDecl	-> IdentList FunctionDecl_1;;
FunctionDecl_1	-> 'FUNC' FuncDef
				-> 'PROC' ProcDef
				-> 'INTERRUPT' IrqDef
				-> .
				;

IrqDef		-> IrqDecl IrqBody;
ProcDef		-> ProcDecl ProcBody;
FuncDef		-> FuncDecl FuncBody;

IrqDecl		-> 'IDENT' OptInit '(' ')';
ProcDecl	-> 'IDENT' OptInit '(' ParamList ')';
FuncDecl	-> 'IDENT' OptInit '(' ParamList ')';

OptInit		-> '=' CompConst
			-> .
			;

IrqBody		-> LocalDecls Statements;
ProcBody	-> LocalDecls Statements;
FuncBody	-> LocalDecls Statements;

//----------------------------------
// Identifiers
//BYTE a,b;
//BYTE x=$a0
//BYTE y=[15]
//BYTE ARRAY a=$2000
//BYTE ARRAY b =["This is a string"]
//BYTE ARRAY c = [1 2 3 4 55 6]
//BYTE ARRAY d(156) =$2100
//----------------------------------
IdentList	-> Ident IdentList_1;
IdentList_1	-> ',' Ident IdentList_1
			-> .
			;

Ident		-> IdentInit Ident_1;
Ident_1		-> 'IDENT' IdentInit
			-> .
			;
IdentInit	-> ArrayDim IdentInit_1;
IdentInit_1	-> '=' Address
			-> .
			;

Address		-> CompConst Address_1;
Address_1	-> '[' Data ']'
			-> .
			;
Data		-> ConstList Data_1;
Data_1		-> 'STRING'
			-> .
			;
ArrayDim	-> ArrayDim_1;
ArrayDim_1	-> '(' CompConst ')'
			-> .
			;

//-------------------------------------------
// Parameter Declarations
//-------------------------------------------

ParamList	-> PramPointer Param_1;
Param_1		-> 'RECORDTYPE' PramPointer Param_1
			-> 'CHAR' PramPointer Param_1 
			-> 'BYTE' PramPointer Param_1 
			-> 'INT' PramPointer Param_1 
			-> 'CARD' PramPointer Param_1 
			-> 'BOOL' PramPointer Param_1 
			-> ',' Param_1
			-> .
			;

PramPointer		-> ParamArray ParamPointer_1;
ParamPointer_1	-> 'POINTER'  ParamArray
				-> .
				;
ParamArray		-> IdentList ParamArray_1;
ParamArray_1	-> 'ARRAY' IdentList
				-> .
				;
				;			
//-----------------------------------------------
// Local Variableas
//-----------------------------------------------

LocalDecls		-> LocalPointerDecl LocalDecls_1;
LocalDecls_1	-> 'CHAR' LocalPointerDecl  LocalDecls_1
				-> 'BYTE' LocalPointerDecl  LocalDecls_1
				-> 'INT' LocalPointerDecl  LocalDecls_1
				-> 'CARD' LocalPointerDecl  LocalDecls_1
				-> 'BOOL' LocalPointerDecl LocalDecls_1
				-> 'RECORDTYPE' LocalPointerDecl LocalDecls_1
				-> .
				;

LocalPointerDecl	-> LocalArrayDecl LocalPointerDecl_1;
LocalPointerDecl_1	-> 'POINTER' LocalArrayDecl
					-> .
					;

LocalArrayDecl		-> IdentList LocalArrayDecl_1;
LocalArrayDecl_1	-> 'ARRAY' IdentList
					-> .
					;

//-------------------------------
// Compiler Constants
//-------------------------------
ConstList	-> CompConst ConstList_1;
ConstList_1	-> ',' CompConst ConstList_1
			-> .
			;
CompConst		-> BaseCompConst CompConst_1;
CompConst_1		-> '+' BaseCompConst CompConst_1
				-> '-' BaseCompConst CompConst_1
				-> .
				;
BaseCompConst	-> 'NUMBER'
				-> '*'
				-> '@' MemContentsType
				-> 'INTERRUPT_IDENT'
				-> 'FUNC_IDENT'
				-> 'PROC_IDENT'
				-> .
				;

//----------------------------------
//Variable References
//Memory References
//----------------------------------

ValueList	-> Value ValueList_1;
ValueList_1	-> ',' Value ValueList_1
				-> .
				;

Value			-> MemContentsType Value_1;
Value_1			-> 'NUMBER'
				-> '*'		// current memroy location
				-> '@' AddressOf
				-> .
				;

AddressOf		-> MemContentsType AddressOf_1;
AddressOf_1		-> 'PROC_IDENT'
				-> 'FUNC_IDENT'
				-> 'INTERRUPT_IDENT'
				-> .
				; 
MemContentsType		-> MemContents MemContentsType_1;
MemContentsType_1 	-> '(' ArithExpr ')'	//array ref
					-> '^'					// Pointer Dereference
					-> '.' MemContents MemContentsType_1		//record ref
					-> .
					;

MemContents		-> 'IDENT'
				-> .
				;



//----------------------------------------
//  Inline assembly code
//----------------------------------------

//----------------------------------------
//	Statements
//----------------------------------------

AsmStmt			-> DefineMemory Processor_1;
Processor_1		-> 'PROCESSOR' ProcessorType DefineMemory Processor_1
				-> .
				;
ProcessorType	-> 'R6502'
				-> 'WD65C02'
				-> 'WD65C816'
				;

//-----------------------------------------
// Code
//		These statements are what actually
// do something that concerns the machine
// code that is executed
//-----------------------------------------

//-----------------------------------------
// SECITON
//-----------------------------------------
Section		-> Org Section_1;
Section_1	-> 'SECTION' SectionName Org Section_1
				-> .
				;
SectionName		-> SectionDef SectionName_1;
SectionName_1	-> 'IDENT' SectionDef
				-> .
				;
			
SectionDef		-> '[' SectionAttributesList ']'
				-> .
				;

SectionAttributesList	-> SectionAtribute SectionAttributesList_1;
SectionAttributesList_1	-> ',' SectionAtribute SectionAttributesList_1
						-> .
						;

SectionAtribute	-> 'START' '=' AsmConstant
				-> 'SIZE' '=' AsmConstant
				-> 'MODE' '=' Modes
				-> 'ZEROPAGE' '=' TrueFalse
				-> .
				;

Modes			-> 'READ_ONLY'
				-> 'READ_WRITE'
				;

TrueFalse		-> 'true'
				-> 'false'
				;

//-------------------------------------
// Org  Sets the location counter
// for the current section
//-------------------------------------
Org				-> DefineMemory Org_1;
Org_1			-> 'ORG' AsmConstant DefineMemory Org_1
				-> .
				;

//-------------------------------------
// DefineMemeory
//-------------------------------------
				
DefineMemory	-> DefineStorage DefineMemory_1;
DefineMemory_1	-> 'DB' AsmConstList DefineStorage DefineMemory_1 
				-> 'DW' AsmConstList DefineStorage DefineMemory_1
				-> 'DL' AsmConstList DefineStorage DefineMemory_1
				-> 'DAS' 'STRING' DefineStorage DefineMemory_1
				-> 'DCS' 'STRING' DefineStorage DefineMemory_1
				-> .
				;


//-------------------------------------
// DefineStorage
//-------------------------------------
DefineStorage	-> Proceedure DefineStorage_1;
DefineStorage_1	-> 'DS' AsmConstant Proceedure DefineStorage_1
				-> .
				;

//-------------------------------------
// Proceedure
//-------------------------------------
Proceedure		-> Instruction Proceedure_1;
Proceedure_1	-> 'ASMPROC' Section 'EPROC' Instruction Proceedure_1
				-> .
				;

//--------------------------------------
// Opcodes
//--------------------------------------
Instruction		-> Labels Instruction_1;	
Instruction_1	-> 'ADC'  AluAdrModes	Labels Instruction_1 //ALU Opcodes		
				-> 'AND'  AluAdrModes	Labels Instruction_1
				-> 'EOR'  AluAdrModes	Labels Instruction_1	
				-> 'ORA'  AluAdrModes	Labels Instruction_1	
				-> 'CMP'  AluAdrModes	Labels Instruction_1
				-> 'SBC'  AluAdrModes	Labels Instruction_1	
				-> 'LDA'  AluAdrModes	Labels Instruction_1	
				-> 'STA'  StaAddressingModes Labels Instruction_1	
				-> 'ASL' ShiftAddressingModes	Labels Instruction_1			//shift addressing modes
				-> 'ROL' ShiftAddressingModes	Labels Instruction_1	
				-> 'LSR' ShiftAddressingModes	Labels Instruction_1 
				-> 'ROR' ShiftAddressingModes	Labels Instruction_1	 
				-> 'BCC' RelAddressingMode Labels Instruction_1				// Branch Op Codes
				-> 'BCS' RelAddressingMode Labels Instruction_1	 
				-> 'BEQ' RelAddressingMode Labels Instruction_1
				-> 'BMI' RelAddressingMode Labels Instruction_1
				-> 'BNE' RelAddressingMode Labels Instruction_1
				-> 'BPL' RelAddressingMode Labels Instruction_1
				-> 'BVC' RelAddressingMode Labels Instruction_1
				-> 'BVS' RelAddressingMode Labels Instruction_1
				-> 'BIT' BitAddressModes	Labels Instruction_1			//BIT opcode
				-> 'BRK'	Labels Instruction_1				//Implied Addressing Mode 
				-> 'CLC'	Labels Instruction_1	 
				-> 'CLD'	Labels Instruction_1	
				-> 'CLI'	Labels Instruction_1	
				-> 'CLV'	Labels Instruction_1	
				-> 'DEX'	Labels Instruction_1	
				-> 'DEY'	Labels Instruction_1	
				-> 'INX'	Labels Instruction_1	
				-> 'INY'	Labels Instruction_1	
				-> 'NOP'	Labels Instruction_1	
				-> 'PHA'	Labels Instruction_1	
				-> 'PLA'	Labels Instruction_1	
				-> 'PHP'	Labels Instruction_1	
				-> 'PLP'	Labels Instruction_1	
				-> 'RTI'	Labels Instruction_1	
				-> 'RTS'	Labels Instruction_1	
				-> 'SEC'	Labels Instruction_1	
				-> 'SED'	Labels Instruction_1	
				-> 'SEI'	Labels Instruction_1	
				-> 'TAX'	Labels Instruction_1	
				-> 'TAY'	Labels Instruction_1	
				-> 'TXA'	Labels Instruction_1	
				-> 'TYA'	Labels Instruction_1	
				-> 'TXS'	Labels Instruction_1	
				-> 'TSX'	Labels Instruction_1	
				-> 'INC' IncAddressingMOdes	Labels Instruction_1			//Inc/Dec Addressing Modes
				-> 'DEC' IncAddressingMOdes	Labels Instruction_1	
				-> 'JMP' JumpAddressingModes	Labels Instruction_1		// Jump
				-> 'JSR' CallAddressingMode	Labels Instruction_1			// Jump To Subroutine
				-> 'CPX'  CPX_CPY_AddressingMode	Labels Instruction_1	
				-> 'CPY'  CPX_CPY_AddressingMode		Labels Instruction_1
				-> 'LDX' LdxAddressingMode	Labels Instruction_1	
				-> 'LDY' LdyAddressingMode	Labels Instruction_1	
				-> 'STX' StxAddressingMode	Labels Instruction_1	
				-> 'STY' StyAddressingMode	Labels Instruction_1	
				-> .
				;

//---------------------------------------------
// Lables
//---------------------------------------------
Labels	-> 'IDENT' Label_1	//Global
		-> .
		;
Label_1	-> ':'		//private lable
		-> .
		;

//-----------------------------------
//ALU Addressing Mode
//-----------------------------------

AluAdrModes		-> '#' AsmConstant
				-> '(' Indirect
				-> AsmConstant OptIndexReg
				;
Indirect	-> AsmConstant  Indirect_1;
Indirect_1	-> ')' ',' 'YREG'
			-> ',' 'XREG' ')'
			;

//---------------------------------------------
// STA addressing mode
//---------------------------------------------
StaAddressingModes	-> AsmConstant OptIndexReg
					-> '(' Indirect
					;

//-----------------------------------------
// ASL LSR ROR and ROL addressing modes
//-----------------------------------------

ShiftAddressingModes	-> 'AREG'
						-> AsmConstant OptXReg
						;

//------------------------------------------
// Branch Instructions Addressing Mode
//------------------------------------------
RelAddressingMode	-> AsmConstant;

//------------------------------------------
// BIT Instructions Addressing Mode
//------------------------------------------

BitAddressModes	-> AsmConstant;

//------------------------------------------
// INC DEC Instructions Addressing Mode
//------------------------------------------

IncAddressingMOdes	-> AsmConstant OptXReg;

//------------------------------------------
// JMP Instructions Addressing Mode
//------------------------------------------

JumpAddressingModes	-> JumpDirect JumpIndirect;
JumpIndirect		-> '(' AsmConstant ')'
					-> .
					;
JumpDirect			-> AsmConstant;
//------------------------------------------
// JSR Instructions Addressing Mode
//------------------------------------------

CallAddressingMode	-> AsmConstant;

//------------------------------------------
// LDX Instructions Addressing Mode
//------------------------------------------

LdxAddressingMode	-> '#' AsmConstant
					-> AsmConstant OptYReg
					;
//------------------------------------------
// CPX & CPY Instructions Addressing Mode
//------------------------------------------

CPX_CPY_AddressingMode	-> '#' AsmConstant
						-> AsmConstant
						;

//------------------------------------------
// STX Instructions Addressing Mode
//------------------------------------------

StxAddressingMode	-> AsmConstant OptYReg;

//------------------------------------------
// LDY Instructions Addressing Mode
//------------------------------------------

LdyAddressingMode	-> '#' AsmConstant
					-> AsmConstant OptXReg
					;

//------------------------------------------
// STY Instructions Addressing Mode
//------------------------------------------

StyAddressingMode	-> AsmConstant OptXReg;

//---------------------------------------------
//	Optional Index Registers
//---------------------------------------------

OptIndexReg		-> ',' OptIndexReg_1
				-> .
				;
OptIndexReg_1	-> 'XREG'
				-> 'YREG'
				;

OptXReg			-> ',' 'XREG'
				-> .
				;

OptYReg			-> ',' 'YREG'
				-> .
				;

//---------------------------------------
// Assembler Constants
//---------------------------------------
AsmConstList	-> 'STRING'
				-> AsmConstList_1
				;
AsmConstList_1	-> AsmConstant AsmConstList_2;
AsmConstList_2	-> ',' AsmConstant AsmConstList_2
				-> .
				;

AsmConstant		-> AsmConstAddSub AsmConstant_1;
AsmConstant_1	-> '>' AsmConstAddSub 	//Lower Part
				-> '<' AsmConstAddSub 	//Upper Part
				-> .
				;

AsmConstAddSub		-> BaseAsmConstant AsmConstAddSub_1;
AsmConstAddSub_1	-> '+' BaseAsmConstant AsmConstAddSub_1
					-> '-' BaseAsmConstant AsmConstAddSub_1
					-> .
					;

BaseAsmConstant	-> 'LOCAL_LABLE'
				-> 'GLOBAL_LABLE'
				-> 'IDENT'
				-> 'NUMBER'
				-> 'CHAR_CONSTANT'
				-> '*'				//current location counter
				;
